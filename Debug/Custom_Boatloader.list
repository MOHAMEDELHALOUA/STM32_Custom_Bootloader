
Custom_Boatloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000564c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800578c  0800578c  0000678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005920  08005920  00006920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005928  08005928  00006928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800592c  0800592c  0000692c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  08005930  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  20000070  08005998  00007070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000274  08005998  00007274  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011031  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000026c9  00000000  00000000  000180d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001310  00000000  00000000  0001a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e79  00000000  00000000  0001bab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022522  00000000  00000000  0001c929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fac5  00000000  00000000  0003ee4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d89a9  00000000  00000000  0004e910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001272b9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056b0  00000000  00000000  001272fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  0012c9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08005774 	.word	0x08005774

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08005774 	.word	0x08005774

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000558:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4313      	orrs	r3, r2
 8000562:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000570:	68fb      	ldr	r3, [r7, #12]
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fc96 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f812 	bl	80005b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058c:	f000 f868 	bl	8000660 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8d0 	bl	8000734 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000594:	f000 f882 	bl	800069c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Custom Bootloader v(%d.%d) [by : ELHALOUA MOHAMED]\r\n",BL_Version[0],BL_Version[1]);
 8000598:	2300      	movs	r3, #0
 800059a:	2201      	movs	r2, #1
 800059c:	4619      	mov	r1, r3
 800059e:	4803      	ldr	r0, [pc, #12]	@ (80005ac <main+0x2c>)
 80005a0:	f004 fa1e 	bl	80049e0 <iprintf>
//  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);
//  HAL_Delay(1000);

  goto_application();
 80005a4:	f000 f932 	bl	800080c <goto_application>

  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0x28>
 80005ac:	0800578c 	.word	0x0800578c

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b09a      	sub	sp, #104	@ 0x68
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2248      	movs	r2, #72	@ 0x48
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fb56 	bl	8004c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d6:	4b21      	ldr	r3, [pc, #132]	@ (800065c <SystemClock_Config+0xac>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80005de:	4a1f      	ldr	r2, [pc, #124]	@ (800065c <SystemClock_Config+0xac>)
 80005e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <SystemClock_Config+0xac>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80005f2:	2322      	movs	r3, #34	@ 0x22
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2340      	movs	r3, #64	@ 0x40
 8000602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000604:	2300      	movs	r3, #0
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000608:	23a0      	movs	r3, #160	@ 0xa0
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fce3 	bl	8001fe0 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000620:	f000 f94a 	bl	80008b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000624:	236f      	movs	r3, #111	@ 0x6f
 8000626:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2101      	movs	r1, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f002 f83f 	bl	80026c8 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000650:	f000 f932 	bl	80008b8 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3768      	adds	r7, #104	@ 0x68
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58000400 	.word	0x58000400

08000660 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	@ 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2250      	movs	r2, #80	@ 0x50
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f004 faff 	bl	8004c70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000672:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000676:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800067c:	2300      	movs	r3, #0
 800067e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fc5d 	bl	8002f42 <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800068e:	f000 f913 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	@ 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a0:	4b22      	ldr	r3, [pc, #136]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006a2:	4a23      	ldr	r2, [pc, #140]	@ (8000730 <MX_USART1_UART_Init+0x94>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006a6:	4b21      	ldr	r3, [pc, #132]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b19      	ldr	r3, [pc, #100]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b16      	ldr	r3, [pc, #88]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e4:	4811      	ldr	r0, [pc, #68]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006e6:	f002 fed3 	bl	8003490 <HAL_UART_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006f0:	f000 f8e2 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f4:	2100      	movs	r1, #0
 80006f6:	480d      	ldr	r0, [pc, #52]	@ (800072c <MX_USART1_UART_Init+0x90>)
 80006f8:	f003 ffe5 	bl	80046c6 <HAL_UARTEx_SetTxFifoThreshold>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000702:	f000 f8d9 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4808      	ldr	r0, [pc, #32]	@ (800072c <MX_USART1_UART_Init+0x90>)
 800070a:	f004 f81a 	bl	8004742 <HAL_UARTEx_SetRxFifoThreshold>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000714:	f000 f8d0 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000718:	4804      	ldr	r0, [pc, #16]	@ (800072c <MX_USART1_UART_Init+0x90>)
 800071a:	f003 ff9b 	bl	8004654 <HAL_UARTEx_DisableFifoMode>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000724:	f000 f8c8 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000008c 	.word	0x2000008c
 8000730:	40013800 	.word	0x40013800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	2004      	movs	r0, #4
 800074a:	f7ff feff 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	2002      	movs	r0, #2
 8000750:	f7ff fefc 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff fef9 	bl	800054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2008      	movs	r0, #8
 800075c:	f7ff fef6 	bl	800054c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2123      	movs	r1, #35	@ 0x23
 8000764:	481d      	ldr	r0, [pc, #116]	@ (80007dc <MX_GPIO_Init+0xa8>)
 8000766:	f000 ffd3 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076a:	2310      	movs	r3, #16
 800076c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4819      	ldr	r0, [pc, #100]	@ (80007e0 <MX_GPIO_Init+0xac>)
 800077c:	f000 fe58 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000780:	2323      	movs	r3, #35	@ 0x23
 8000782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4811      	ldr	r0, [pc, #68]	@ (80007dc <MX_GPIO_Init+0xa8>)
 8000796:	f000 fe4b 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800079a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800079e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80007ac:	230a      	movs	r3, #10
 80007ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f000 fe3a 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80007bc:	2303      	movs	r3, #3
 80007be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_GPIO_Init+0xb0>)
 80007ce:	f000 fe2f 	bl	8001430 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	48000400 	.word	0x48000400
 80007e0:	48000800 	.word	0x48000800
 80007e4:	48000c00 	.word	0x48000c00

080007e8 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007f0:	1d39      	adds	r1, r7, #4
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007f6:	2201      	movs	r2, #1
 80007f8:	4803      	ldr	r0, [pc, #12]	@ (8000808 <__io_putchar+0x20>)
 80007fa:	f002 fe99 	bl	8003530 <HAL_UART_Transmit>
  return ch;
 80007fe:	687b      	ldr	r3, [r7, #4]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000008c 	.word	0x2000008c

0800080c <goto_application>:
//    }
//    return len;
//}

static void goto_application(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
  printf("Gonna Jump to Application after : \r\n");
 8000812:	4823      	ldr	r0, [pc, #140]	@ (80008a0 <goto_application+0x94>)
 8000814:	f004 f94c 	bl	8004ab0 <puts>
  // Blink green LED to show bootloader is running
  for(int i = 0; i < 5; i++) {
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	e01b      	b.n	8000856 <goto_application+0x4a>
	  printf("%d...\r\n",5-(i+1));
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	f1c3 0304 	rsb	r3, r3, #4
 8000824:	4619      	mov	r1, r3
 8000826:	481f      	ldr	r0, [pc, #124]	@ (80008a4 <goto_application+0x98>)
 8000828:	f004 f8da 	bl	80049e0 <iprintf>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);   // Green ON
 800082c:	2201      	movs	r2, #1
 800082e:	2101      	movs	r1, #1
 8000830:	481d      	ldr	r0, [pc, #116]	@ (80008a8 <goto_application+0x9c>)
 8000832:	f000 ff6d 	bl	8001710 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000836:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800083a:	f000 fc07 	bl	800104c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // Green OFF
 800083e:	2200      	movs	r2, #0
 8000840:	2101      	movs	r1, #1
 8000842:	4819      	ldr	r0, [pc, #100]	@ (80008a8 <goto_application+0x9c>)
 8000844:	f000 ff64 	bl	8001710 <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000848:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800084c:	f000 fbfe 	bl	800104c <HAL_Delay>
  for(int i = 0; i < 5; i++) {
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	2b04      	cmp	r3, #4
 800085a:	dde0      	ble.n	800081e <goto_application+0x12>
  }
  void (*app_reset_handler)(void) = (void*)(*((volatile uint32_t*) (0x08020000 + 4U)));
 800085c:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <goto_application+0xa0>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	60bb      	str	r3, [r7, #8]
  //__set_MSP(*(volatile uint32_t*) 0x08020000);
  // Turn OFF the Green Led to tell the user that Bootloader is not running
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    //Green LED OFF
 8000862:	2200      	movs	r2, #0
 8000864:	2101      	movs	r1, #1
 8000866:	4810      	ldr	r0, [pc, #64]	@ (80008a8 <goto_application+0x9c>)
 8000868:	f000 ff52 	bl	8001710 <HAL_GPIO_WritePin>

  /* Reset the Clock */
  HAL_RCC_DeInit();
 800086c:	f001 fb1c 	bl	8001ea8 <HAL_RCC_DeInit>
  HAL_DeInit();
 8000870:	f000 fb40 	bl	8000ef4 <HAL_DeInit>
  __set_MSP(*(volatile uint32_t*) 0x08020000);
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <goto_application+0xa4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f383 8808 	msr	MSP, r3
}
 8000880:	bf00      	nop
  SysTick->CTRL = 0;
 8000882:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <goto_application+0xa8>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <goto_application+0xa8>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <goto_application+0xa8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  /* Jump to application */
  app_reset_handler();    //call the app reset handler
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	4798      	blx	r3
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	080057cc 	.word	0x080057cc
 80008a4:	080057f0 	.word	0x080057f0
 80008a8:	48000400 	.word	0x48000400
 80008ac:	08020004 	.word	0x08020004
 80008b0:	08020000 	.word	0x08020000
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <LL_AHB2_GRP1_EnableClock>:
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80008e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e8:	68fb      	ldr	r3, [r7, #12]
}
 80008ea:	bf00      	nop
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b085      	sub	sp, #20
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000902:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800090e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000912:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4013      	ands	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09c      	sub	sp, #112	@ 0x70
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000950:	f107 030c 	add.w	r3, r7, #12
 8000954:	2250      	movs	r2, #80	@ 0x50
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f004 f989 	bl	8004c70 <memset>
  if(huart->Instance==USART1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a1a      	ldr	r2, [pc, #104]	@ (80009cc <HAL_UART_MspInit+0x94>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d12c      	bne.n	80009c2 <HAL_UART_MspInit+0x8a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000968:	2301      	movs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fae4 	bl	8002f42 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000980:	f7ff ff9a 	bl	80008b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000984:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000988:	f7ff ffb5 	bl	80008f6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	2002      	movs	r0, #2
 800098e:	f7ff ff99 	bl	80008c4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000992:	23c0      	movs	r3, #192	@ 0xc0
 8000994:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009a2:	2307      	movs	r3, #7
 80009a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009aa:	4619      	mov	r1, r3
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <HAL_UART_MspInit+0x98>)
 80009ae:	f000 fd3f 	bl	8001430 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2024      	movs	r0, #36	@ 0x24
 80009b8:	f000 fc47 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009bc:	2024      	movs	r0, #36	@ 0x24
 80009be:	f000 fc5e 	bl	800127e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80009c2:	bf00      	nop
 80009c4:	3770      	adds	r7, #112	@ 0x70
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40013800 	.word	0x40013800
 80009d0:	48000400 	.word	0x48000400

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2a:	f000 fae3 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <USART1_IRQHandler+0x10>)
 8000a3a:	f002 fe07 	bl	800364c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000008c 	.word	0x2000008c

08000a48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
  }

  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fea3 	bl	80007e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
  }
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f004 f8da 	bl	8004d0c <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20030000 	.word	0x20030000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	20000120 	.word	0x20000120
 8000b8c:	20000278 	.word	0x20000278

08000b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location add offset address ------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8000b94:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <SystemInit+0xa0>)
 8000b96:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b9a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000b9c:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <SystemInit+0xa0>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <SystemInit+0xa0>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bc0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000bc4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000bc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <SystemInit+0xa4>)
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000be2:	f023 0305 	bic.w	r3, r3, #5
 8000be6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000bf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000bf6:	f023 0301 	bic.w	r3, r3, #1
 8000bfa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c02:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <SystemInit+0xa8>)
 8000c04:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c38 <SystemInit+0xa8>)
 8000c0c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000c18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00
 8000c34:	faf6fefb 	.word	0xfaf6fefb
 8000c38:	22041000 	.word	0x22041000

08000c3c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c3c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c40:	3304      	adds	r3, #4

08000c42 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c42:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c44:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c46:	d3f9      	bcc.n	8000c3c <CopyDataInit>
  bx lr
 8000c48:	4770      	bx	lr

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c4a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c4c:	3004      	adds	r0, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c4e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>
  bx lr
 8000c52:	4770      	bx	lr

08000c54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c54:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c58:	f7ff ff9a 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <LoopForever+0x6>)
 8000c5e:	490c      	ldr	r1, [pc, #48]	@ (8000c90 <LoopForever+0xa>)
 8000c60:	4a0c      	ldr	r2, [pc, #48]	@ (8000c94 <LoopForever+0xe>)
 8000c62:	2300      	movs	r3, #0
 8000c64:	f7ff ffed 	bl	8000c42 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c68:	480b      	ldr	r0, [pc, #44]	@ (8000c98 <LoopForever+0x12>)
 8000c6a:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <LoopForever+0x16>)
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca0 <LoopForever+0x1a>)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	f7ff ffe7 	bl	8000c42 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c74:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <LoopForever+0x1e>)
 8000c76:	490c      	ldr	r1, [pc, #48]	@ (8000ca8 <LoopForever+0x22>)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f7ff ffe8 	bl	8000c4e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c7e:	f004 f84b 	bl	8004d18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c82:	f7ff fc7d 	bl	8000580 <main>

08000c86 <LoopForever>:

LoopForever:
  b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   r0, =_estack
 8000c88:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000070 	.word	0x20000070
 8000c94:	08005930 	.word	0x08005930
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c98:	20030000 	.word	0x20030000
 8000c9c:	20030000 	.word	0x20030000
 8000ca0:	08005998 	.word	0x08005998
  INIT_BSS _sbss, _ebss
 8000ca4:	20000070 	.word	0x20000070
 8000ca8:	20000274 	.word	0x20000274

08000cac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_IRQHandler>

08000cae <LL_AHB1_GRP1_ForceReset>:
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8000cb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000cbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <LL_AHB1_GRP1_ReleaseReset>:
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000cde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ce8:	4013      	ands	r3, r2
 8000cea:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <LL_AHB2_GRP1_ForceReset>:
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8000d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <LL_AHB2_GRP1_ReleaseReset>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8000d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d32:	4013      	ands	r3, r2
 8000d34:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <LL_AHB3_GRP1_ForceReset>:
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8000d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <LL_AHB3_GRP1_ReleaseReset>:
{
 8000d66:	b480      	push	{r7}
 8000d68:	b083      	sub	sp, #12
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <LL_APB1_GRP1_ForceReset>:
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8000d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000d98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LL_APB1_GRP2_ForceReset>:
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000dbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8000dc8:	bf00      	nop
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LL_APB1_GRP1_ReleaseReset>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8000ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000dea:	4013      	ands	r3, r2
 8000dec:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <LL_APB1_GRP2_ReleaseReset>:
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	b083      	sub	sp, #12
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8000e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e10:	4013      	ands	r3, r2
 8000e12:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_APB3_GRP1_ForceReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB3RSTR, Periphs);
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <LL_APB3_GRP1_ReleaseReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB3RSTR, Periphs);
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <HAL_Init+0x3c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <HAL_Init+0x3c>)
 8000ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f000 f9b2 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 f855 	bl	8000f80 <HAL_InitTick>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	e001      	b.n	8000ee6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee2:	f7ff fd21 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58004000 	.word	0x58004000

08000ef4 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000efc:	f7ff ff46 	bl	8000d8c <LL_APB1_GRP1_ForceReset>
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f04:	f7ff ff54 	bl	8000db0 <LL_APB1_GRP2_ForceReset>
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f0c:	f7ff ff62 	bl	8000dd4 <LL_APB1_GRP1_ReleaseReset>
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f14:	f7ff ff71 	bl	8000dfa <LL_APB1_GRP2_ReleaseReset>

  __HAL_RCC_APB2_FORCE_RESET();
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f1c:	f7ff ff80 	bl	8000e20 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f24:	f7ff ff8e 	bl	8000e44 <LL_APB2_GRP1_ReleaseReset>

  __HAL_RCC_APB3_FORCE_RESET();
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f2c:	f7ff ff9d 	bl	8000e6a <LL_APB3_GRP1_ForceReset>
  __HAL_RCC_APB3_RELEASE_RESET();
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f34:	f7ff ffab 	bl	8000e8e <LL_APB3_GRP1_ReleaseReset>

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f3c:	f7ff feb7 	bl	8000cae <LL_AHB1_GRP1_ForceReset>
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f44:	f7ff fec5 	bl	8000cd2 <LL_AHB1_GRP1_ReleaseReset>

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f4c:	f7ff fed4 	bl	8000cf8 <LL_AHB2_GRP1_ForceReset>
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f54:	f7ff fee2 	bl	8000d1c <LL_AHB2_GRP1_ReleaseReset>

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f5c:	f7ff fef1 	bl	8000d42 <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f64:	f7ff feff 	bl	8000d66 <LL_AHB3_GRP1_ReleaseReset>

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f68:	f000 f803 	bl	8000f72 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <HAL_InitTick+0x6c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d024      	beq.n	8000fde <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f94:	f001 fd44 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <HAL_InitTick+0x6c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 f974 	bl	800129a <HAL_SYSTICK_Config>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10f      	bne.n	8000fd8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	d809      	bhi.n	8000fd2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fc6:	f000 f940 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fca:	4a09      	ldr	r2, [pc, #36]	@ (8000ff0 <HAL_InitTick+0x70>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	e007      	b.n	8000fe2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e004      	b.n	8000fe2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	e001      	b.n	8000fe2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000010 	.word	0x20000010
 8000ff0:	2000000c 	.word	0x2000000c

08000ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000010 	.word	0x20000010
 8001018:	20000124 	.word	0x20000124

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	@ (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000124 	.word	0x20000124

08001034 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001038:	4b03      	ldr	r3, [pc, #12]	@ (8001048 <HAL_GetTickPrio+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000000c 	.word	0x2000000c

0800104c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001054:	f7ff ffe2 	bl	800101c <HAL_GetTick>
 8001058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001064:	d005      	beq.n	8001072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001066:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_Delay+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4413      	add	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001072:	bf00      	nop
 8001074:	f7ff ffd2 	bl	800101c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	429a      	cmp	r2, r3
 8001082:	d8f7      	bhi.n	8001074 <HAL_Delay+0x28>
  {
  }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000010 	.word	0x20000010

08001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	@ (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	@ (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	@ (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	@ (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	@ 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	@ 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e04f      	b.n	8001364 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d008      	beq.n	80012e2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2204      	movs	r2, #4
 80012d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e040      	b.n	8001364 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 020e 	bic.w	r2, r2, #14
 80012f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001300:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0201 	bic.w	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f003 021c 	and.w	r2, r3, #28
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	2101      	movs	r1, #1
 8001320:	fa01 f202 	lsl.w	r2, r1, r2
 8001324:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800132e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00c      	beq.n	8001352 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001342:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001346:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001350:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d005      	beq.n	8001394 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2204      	movs	r2, #4
 800138c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e047      	b.n	8001424 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 020e 	bic.w	r2, r2, #14
 80013a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f022 0201 	bic.w	r2, r2, #1
 80013b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c8:	f003 021c 	and.w	r2, r3, #28
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	2101      	movs	r1, #1
 80013d2:	fa01 f202 	lsl.w	r2, r1, r2
 80013d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00c      	beq.n	8001404 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001402:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
    }
  }
  return status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	e14c      	b.n	80016da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	4013      	ands	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 813e 	beq.w	80016d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	2b01      	cmp	r3, #1
 8001462:	d005      	beq.n	8001470 <HAL_GPIO_Init+0x40>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d130      	bne.n	80014d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	2203      	movs	r2, #3
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014a6:	2201      	movs	r2, #1
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	091b      	lsrs	r3, r3, #4
 80014bc:	f003 0201 	and.w	r2, r3, #1
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d017      	beq.n	800150e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d123      	bne.n	8001562 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	691a      	ldr	r2, [r3, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	08da      	lsrs	r2, r3, #3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3208      	adds	r2, #8
 800155c:	6939      	ldr	r1, [r7, #16]
 800155e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 0203 	and.w	r2, r3, #3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8098 	beq.w	80016d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015a4:	4a54      	ldr	r2, [pc, #336]	@ (80016f8 <HAL_GPIO_Init+0x2c8>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	220f      	movs	r2, #15
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015ce:	d019      	beq.n	8001604 <HAL_GPIO_Init+0x1d4>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a4a      	ldr	r2, [pc, #296]	@ (80016fc <HAL_GPIO_Init+0x2cc>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d013      	beq.n	8001600 <HAL_GPIO_Init+0x1d0>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a49      	ldr	r2, [pc, #292]	@ (8001700 <HAL_GPIO_Init+0x2d0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00d      	beq.n	80015fc <HAL_GPIO_Init+0x1cc>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a48      	ldr	r2, [pc, #288]	@ (8001704 <HAL_GPIO_Init+0x2d4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d007      	beq.n	80015f8 <HAL_GPIO_Init+0x1c8>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a47      	ldr	r2, [pc, #284]	@ (8001708 <HAL_GPIO_Init+0x2d8>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d101      	bne.n	80015f4 <HAL_GPIO_Init+0x1c4>
 80015f0:	2304      	movs	r3, #4
 80015f2:	e008      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015f4:	2307      	movs	r3, #7
 80015f6:	e006      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015f8:	2303      	movs	r3, #3
 80015fa:	e004      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e002      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <HAL_GPIO_Init+0x1d6>
 8001604:	2300      	movs	r3, #0
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	f002 0203 	and.w	r2, r2, #3
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	4093      	lsls	r3, r2
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001616:	4938      	ldr	r1, [pc, #224]	@ (80016f8 <HAL_GPIO_Init+0x2c8>)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	089b      	lsrs	r3, r3, #2
 800161c:	3302      	adds	r3, #2
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001624:	4b39      	ldr	r3, [pc, #228]	@ (800170c <HAL_GPIO_Init+0x2dc>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4313      	orrs	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001648:	4a30      	ldr	r2, [pc, #192]	@ (800170c <HAL_GPIO_Init+0x2dc>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800164e:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <HAL_GPIO_Init+0x2dc>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001672:	4a26      	ldr	r2, [pc, #152]	@ (800170c <HAL_GPIO_Init+0x2dc>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001678:	4b24      	ldr	r3, [pc, #144]	@ (800170c <HAL_GPIO_Init+0x2dc>)
 800167a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169e:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <HAL_GPIO_Init+0x2dc>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_GPIO_Init+0x2dc>)
 80016a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016cc:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <HAL_GPIO_Init+0x2dc>)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f47f aeab 	bne.w	8001440 <HAL_GPIO_Init+0x10>
  }
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40010000 	.word	0x40010000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800
 8001704:	48000c00 	.word	0x48000c00
 8001708:	48001000 	.word	0x48001000
 800170c:	58000800 	.word	0x58000800

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800172c:	e002      	b.n	8001734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001744:	4b05      	ldr	r3, [pc, #20]	@ (800175c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	58000400 	.word	0x58000400

08001760 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <HAL_PWREx_GetVoltageRange+0x18>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	58000400 	.word	0x58000400

0800177c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800178e:	d101      	bne.n	8001794 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001790:	2301      	movs	r3, #1
 8001792:	e000      	b.n	8001796 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80017c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80017e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80017ee:	d101      	bne.n	80017f4 <LL_RCC_HSE_IsReady+0x18>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <LL_RCC_HSE_IsReady+0x1a>
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800180e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800182c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001830:	6013      	str	r3, [r2, #0]
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800184a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800184e:	d101      	bne.n	8001854 <LL_RCC_HSI_IsReady+0x18>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <LL_RCC_HSI_IsReady+0x1a>
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800187a:	4313      	orrs	r3, r2
 800187c:	604b      	str	r3, [r1, #4]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800188e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001892:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800189a:	f043 0301 	orr.w	r3, r3, #1
 800189e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018bc:	f023 0301 	bic.w	r3, r3, #1
 80018c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80018d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d101      	bne.n	80018e6 <LL_RCC_HSI48_IsReady+0x18>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <LL_RCC_HSI48_IsReady+0x1a>
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001920:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001964:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001968:	f023 0304 	bic.w	r3, r3, #4
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d101      	bne.n	8001992 <LL_RCC_LSE_IsReady+0x18>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_RCC_LSE_IsReady+0x1a>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80019e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d101      	bne.n	80019fa <LL_RCC_LSI1_IsReady+0x18>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_RCC_LSI1_IsReady+0x1a>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d101      	bne.n	8001a62 <LL_RCC_LSI2_IsReady+0x18>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <LL_RCC_LSI2_IsReady+0x1a>
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	021b      	lsls	r3, r3, #8
 8001a86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	6013      	str	r3, [r2, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d101      	bne.n	8001aee <LL_RCC_MSI_IsReady+0x16>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <LL_RCC_MSI_IsReady+0x18>
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_RCC_MSI_DisablePLLMode>:
  *       the Clock Security System on LSE detects a LSE failure
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_DisablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_DisablePLLMode(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b50:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2bb0      	cmp	r3, #176	@ 0xb0
 8001b56:	d901      	bls.n	8001b5c <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001b58:	23b0      	movs	r3, #176	@ 0xb0
 8001b5a:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c08:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c34:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001c38:	f023 020f 	bic.w	r2, r3, #15
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c44:	4313      	orrs	r3, r2
 8001c46:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d58:	d101      	bne.n	8001d5e <LL_RCC_PLL_IsReady+0x18>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_RCC_PLL_IsReady+0x1a>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <LL_RCC_PLLSAI1_IsReady>:
  * @brief  Check if PLLSAI1 Ready
  * @rmtoll CR           PLLSAI1RDY    LL_RCC_PLLSAI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI1_IsReady(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001dc6:	d101      	bne.n	8001dcc <LL_RCC_PLLSAI1_IsReady+0x18>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <LL_RCC_PLLSAI1_IsReady+0x1a>
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	f003 0303 	and.w	r3, r3, #3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e02:	d101      	bne.n	8001e08 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e28:	d101      	bne.n	8001e2e <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e42:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e4e:	d101      	bne.n	8001e54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e72:	d101      	bne.n	8001e78 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001e96:	d101      	bne.n	8001e9c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_RCC_DeInit>:
  *           - Peripheral clocks
  *           - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001eae:	f7ff f8b5 	bl	800101c <HAL_GetTick>
 8001eb2:	6078      	str	r0, [r7, #4]

  /* MSI PLL OFF */
  LL_RCC_MSI_DisablePLLMode();
 8001eb4:	f7ff fe21 	bl	8001afa <LL_RCC_MSI_DisablePLLMode>

  /* Set MSION bit */
  LL_RCC_MSI_Enable();
 8001eb8:	f7ff fdf0 	bl	8001a9c <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() == 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_DeInit+0x28>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ebe:	f7ff f8ad 	bl	800101c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_DeInit+0x28>
    {
      return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e078      	b.n	8001fc2 <HAL_RCC_DeInit+0x11a>
  while (LL_RCC_MSI_IsReady() == 0U)
 8001ed0:	f7ff fe02 	bl	8001ad8 <LL_RCC_MSI_IsReady>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f1      	beq.n	8001ebe <HAL_RCC_DeInit+0x16>
    }
  }

  /* Set MSIRANGE default value */
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8001eda:	2060      	movs	r0, #96	@ 0x60
 8001edc:	f7ff fe1c 	bl	8001b18 <LL_RCC_MSI_SetRange>

  /* Set MSITRIM bits to the reset value*/
  LL_RCC_MSI_SetCalibTrimming(0);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fe42 	bl	8001b6a <LL_RCC_MSI_SetCalibTrimming>

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x40U);
 8001ee6:	2040      	movs	r0, #64	@ 0x40
 8001ee8:	f7ff fcba 	bl	8001860 <LL_RCC_HSI_SetCalibTrimming>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001eec:	f7ff f896 	bl	800101c <HAL_GetTick>
 8001ef0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8001ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]

  /* Wait till MSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001efa:	e00a      	b.n	8001f12 <HAL_RCC_DeInit+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efc:	f7ff f88e 	bl	800101c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_DeInit+0x6a>
    {
      return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e057      	b.n	8001fc2 <HAL_RCC_DeInit+0x11a>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 030c 	and.w	r3, r3, #12
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ed      	bne.n	8001efc <HAL_RCC_DeInit+0x54>
    }
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, PLLON, PLLSAI11ON, HSEPRE bits */
#if defined(SAI1)
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSIKERON | RCC_CR_HSIASFS | RCC_CR_HSEON | RCC_CR_HSEPRE | RCC_CR_PLLON |
 8001f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_RCC_DeInit+0x124>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	600b      	str	r3, [r1, #0]
#else
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSIKERON | RCC_CR_HSIASFS | RCC_CR_HSEON | RCC_CR_HSEPRE | RCC_CR_PLLON);
#endif /* SAI1 */

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f30:	f7ff f874 	bl	800101c <HAL_GetTick>
 8001f34:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 0U)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_DeInit+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f38:	f7ff f870 	bl	800101c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_DeInit+0xa2>
    {
      return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e03b      	b.n	8001fc2 <HAL_RCC_DeInit+0x11a>
  while (LL_RCC_PLL_IsReady() != 0U)
 8001f4a:	f7ff fefc 	bl	8001d46 <LL_RCC_PLL_IsReady>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f1      	bne.n	8001f38 <HAL_RCC_DeInit+0x90>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLP_1 | RCC_PLLCFGR_PLLN_0);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f58:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd0 <HAL_RCC_DeInit+0x128>)
 8001f5a:	60da      	str	r2, [r3, #12]

#if defined(SAI1)
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f5c:	f7ff f85e 	bl	800101c <HAL_GetTick>
 8001f60:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is ready */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_DeInit+0xce>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f64:	f7ff f85a 	bl	800101c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_DeInit+0xce>
    {
      return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e025      	b.n	8001fc2 <HAL_RCC_DeInit+0x11a>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001f76:	f7ff ff1d 	bl	8001db4 <LL_RCC_PLLSAI1_IsReady>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1f1      	bne.n	8001f64 <HAL_RCC_DeInit+0xbc>
    }
  }
  /* once PLLSAI1 is OFF, reset PLLSAI1CFGR register to default value */
  WRITE_REG(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLR_0 | RCC_PLLSAI1CFGR_PLLQ_0 |
 8001f80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f84:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <HAL_RCC_DeInit+0x128>)
 8001f86:	611a      	str	r2, [r3, #16]
            RCC_PLLSAI1CFGR_PLLP_1 | RCC_PLLSAI1CFGR_PLLN_0);
#endif /* SAI1 */

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f98:	621a      	str	r2, [r3, #32]

  /* EXTCFGR reset*/
  LL_RCC_WriteReg(EXTCFGR, 0x00030000U);
 8001f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f9e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001fa2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_RCC_DeInit+0x12c>)
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd8 <HAL_RCC_DeInit+0x130>)
 8001faa:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_DeInit+0x134>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe ffe5 	bl	8000f80 <HAL_InitTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_DeInit+0x118>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_DeInit+0x11a>
  }
  else
  {
    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
  }
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	faeef4ff 	.word	0xfaeef4ff
 8001fd0:	22040100 	.word	0x22040100
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	003d0900 	.word	0x003d0900
 8001fdc:	2000000c 	.word	0x2000000c

08001fe0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b08d      	sub	sp, #52	@ 0x34
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e363      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 808d 	beq.w	800211a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002000:	f7ff fddc 	bl	8001bbc <LL_RCC_GetSysClkSource>
 8002004:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002006:	f7ff fee7 	bl	8001dd8 <LL_RCC_PLL_GetMainSource>
 800200a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800200c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_RCC_OscConfig+0x3e>
 8002012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d147      	bne.n	80020a8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201a:	2b01      	cmp	r3, #1
 800201c:	d144      	bne.n	80020a8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e347      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800202e:	f7ff fd87 	bl	8001b40 <LL_RCC_MSI_GetRange>
 8002032:	4603      	mov	r3, r0
 8002034:	429c      	cmp	r4, r3
 8002036:	d914      	bls.n	8002062 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fd2f 	bl	8002aa0 <RCC_SetFlashLatencyFromMSIRange>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e336      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fd61 	bl	8001b18 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fd85 	bl	8001b6a <LL_RCC_MSI_SetCalibTrimming>
 8002060:	e013      	b.n	800208a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fd56 	bl	8001b18 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fd7a 	bl	8001b6a <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fd10 	bl	8002aa0 <RCC_SetFlashLatencyFromMSIRange>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e317      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800208a:	f000 fcc9 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 800208e:	4603      	mov	r3, r0
 8002090:	4aa4      	ldr	r2, [pc, #656]	@ (8002324 <HAL_RCC_OscConfig+0x344>)
 8002092:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002094:	4ba4      	ldr	r3, [pc, #656]	@ (8002328 <HAL_RCC_OscConfig+0x348>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe ff71 	bl	8000f80 <HAL_InitTick>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d039      	beq.n	8002118 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e308      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01e      	beq.n	80020ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020b0:	f7ff fcf4 	bl	8001a9c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b4:	f7fe ffb2 	bl	800101c <HAL_GetTick>
 80020b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020bc:	f7fe ffae 	bl	800101c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e2f5      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80020ce:	f7ff fd03 	bl	8001ad8 <LL_RCC_MSI_IsReady>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f1      	beq.n	80020bc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fd1b 	bl	8001b18 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fd3f 	bl	8001b6a <LL_RCC_MSI_SetCalibTrimming>
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020ee:	f7ff fce4 	bl	8001aba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020f2:	f7fe ff93 	bl	800101c <HAL_GetTick>
 80020f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020fa:	f7fe ff8f 	bl	800101c <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e2d6      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800210c:	f7ff fce4 	bl	8001ad8 <LL_RCC_MSI_IsReady>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f1      	bne.n	80020fa <HAL_RCC_OscConfig+0x11a>
 8002116:	e000      	b.n	800211a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002118:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d047      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002126:	f7ff fd49 	bl	8001bbc <LL_RCC_GetSysClkSource>
 800212a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800212c:	f7ff fe54 	bl	8001dd8 <LL_RCC_PLL_GetMainSource>
 8002130:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d005      	beq.n	8002144 <HAL_RCC_OscConfig+0x164>
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d108      	bne.n	8002150 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	2b03      	cmp	r3, #3
 8002142:	d105      	bne.n	8002150 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d134      	bne.n	80021b6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e2b4      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002158:	d102      	bne.n	8002160 <HAL_RCC_OscConfig+0x180>
 800215a:	f7ff fb21 	bl	80017a0 <LL_RCC_HSE_Enable>
 800215e:	e001      	b.n	8002164 <HAL_RCC_OscConfig+0x184>
 8002160:	f7ff fb2d 	bl	80017be <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d012      	beq.n	8002192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe ff56 	bl	800101c <HAL_GetTick>
 8002170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002174:	f7fe ff52 	bl	800101c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	@ 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e299      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002186:	f7ff fb29 	bl	80017dc <LL_RCC_HSE_IsReady>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f1      	beq.n	8002174 <HAL_RCC_OscConfig+0x194>
 8002190:	e011      	b.n	80021b6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002192:	f7fe ff43 	bl	800101c <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800219a:	f7fe ff3f 	bl	800101c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	@ 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e286      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80021ac:	f7ff fb16 	bl	80017dc <LL_RCC_HSE_IsReady>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f1      	bne.n	800219a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d04c      	beq.n	800225c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c2:	f7ff fcfb 	bl	8001bbc <LL_RCC_GetSysClkSource>
 80021c6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021c8:	f7ff fe06 	bl	8001dd8 <LL_RCC_PLL_GetMainSource>
 80021cc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_OscConfig+0x200>
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d10e      	bne.n	80021f8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d10b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e266      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb35 	bl	8001860 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021f6:	e031      	b.n	800225c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d019      	beq.n	8002234 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002200:	f7ff fafe 	bl	8001800 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe ff0a 	bl	800101c <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800220c:	f7fe ff06 	bl	800101c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e24d      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800221e:	f7ff fb0d 	bl	800183c <LL_RCC_HSI_IsReady>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f1      	beq.n	800220c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff fb17 	bl	8001860 <LL_RCC_HSI_SetCalibTrimming>
 8002232:	e013      	b.n	800225c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002234:	f7ff faf3 	bl	800181e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe fef0 	bl	800101c <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7fe feec 	bl	800101c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e233      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002252:	f7ff faf3 	bl	800183c <LL_RCC_HSI_IsReady>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f1      	bne.n	8002240 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80a3 	beq.w	80023bc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d076      	beq.n	800236c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d046      	beq.n	8002318 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800228a:	f7ff fbaa 	bl	80019e2 <LL_RCC_LSI1_IsReady>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d113      	bne.n	80022bc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002294:	f7ff fb83 	bl	800199e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002298:	f7fe fec0 	bl	800101c <HAL_GetTick>
 800229c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022a0:	f7fe febc 	bl	800101c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e203      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80022b2:	f7ff fb96 	bl	80019e2 <LL_RCC_LSI1_IsReady>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f1      	beq.n	80022a0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80022bc:	f7ff fba3 	bl	8001a06 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe feac 	bl	800101c <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80022c8:	f7fe fea8 	bl	800101c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1ef      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80022da:	f7ff fbb6 	bl	8001a4a <LL_RCC_LSI2_IsReady>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f1      	beq.n	80022c8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fbc0 	bl	8001a6e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80022ee:	f7ff fb67 	bl	80019c0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f2:	f7fe fe93 	bl	800101c <HAL_GetTick>
 80022f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022fa:	f7fe fe8f 	bl	800101c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e1d6      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800230c:	f7ff fb69 	bl	80019e2 <LL_RCC_LSI1_IsReady>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f1      	bne.n	80022fa <HAL_RCC_OscConfig+0x31a>
 8002316:	e051      	b.n	80023bc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002318:	f7ff fb41 	bl	800199e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fe7e 	bl	800101c <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002322:	e00c      	b.n	800233e <HAL_RCC_OscConfig+0x35e>
 8002324:	20000008 	.word	0x20000008
 8002328:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800232c:	f7fe fe76 	bl	800101c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1bd      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800233e:	f7ff fb50 	bl	80019e2 <LL_RCC_LSI1_IsReady>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f1      	beq.n	800232c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002348:	f7ff fb6e 	bl	8001a28 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800234e:	f7fe fe65 	bl	800101c <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e1ac      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002360:	f7ff fb73 	bl	8001a4a <LL_RCC_LSI2_IsReady>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1f1      	bne.n	800234e <HAL_RCC_OscConfig+0x36e>
 800236a:	e027      	b.n	80023bc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800236c:	f7ff fb5c 	bl	8001a28 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002370:	f7fe fe54 	bl	800101c <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002378:	f7fe fe50 	bl	800101c <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b03      	cmp	r3, #3
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e197      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800238a:	f7ff fb5e 	bl	8001a4a <LL_RCC_LSI2_IsReady>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f1      	bne.n	8002378 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002394:	f7ff fb14 	bl	80019c0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002398:	f7fe fe40 	bl	800101c <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80023a0:	f7fe fe3c 	bl	800101c <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e183      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80023b2:	f7ff fb16 	bl	80019e2 <LL_RCC_LSI1_IsReady>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f1      	bne.n	80023a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05b      	beq.n	8002480 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c8:	4ba7      	ldr	r3, [pc, #668]	@ (8002668 <HAL_RCC_OscConfig+0x688>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d114      	bne.n	80023fe <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80023d4:	f7ff f9b4 	bl	8001740 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d8:	f7fe fe20 	bl	800101c <HAL_GetTick>
 80023dc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e0:	f7fe fe1c 	bl	800101c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e163      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f2:	4b9d      	ldr	r3, [pc, #628]	@ (8002668 <HAL_RCC_OscConfig+0x688>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0x42c>
 8002406:	f7ff fa74 	bl	80018f2 <LL_RCC_LSE_Enable>
 800240a:	e00c      	b.n	8002426 <HAL_RCC_OscConfig+0x446>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d104      	bne.n	800241e <HAL_RCC_OscConfig+0x43e>
 8002414:	f7ff fa8f 	bl	8001936 <LL_RCC_LSE_EnableBypass>
 8002418:	f7ff fa6b 	bl	80018f2 <LL_RCC_LSE_Enable>
 800241c:	e003      	b.n	8002426 <HAL_RCC_OscConfig+0x446>
 800241e:	f7ff fa79 	bl	8001914 <LL_RCC_LSE_Disable>
 8002422:	f7ff fa99 	bl	8001958 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d014      	beq.n	8002458 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242e:	f7fe fdf5 	bl	800101c <HAL_GetTick>
 8002432:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fdf1 	bl	800101c <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e136      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800244c:	f7ff fa95 	bl	800197a <LL_RCC_LSE_IsReady>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ef      	beq.n	8002436 <HAL_RCC_OscConfig+0x456>
 8002456:	e013      	b.n	8002480 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002458:	f7fe fde0 	bl	800101c <HAL_GetTick>
 800245c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe fddc 	bl	800101c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e121      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002476:	f7ff fa80 	bl	800197a <LL_RCC_LSE_IsReady>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1ef      	bne.n	8002460 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02c      	beq.n	80024e6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002490:	2b00      	cmp	r3, #0
 8002492:	d014      	beq.n	80024be <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002494:	f7ff f9f9 	bl	800188a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002498:	f7fe fdc0 	bl	800101c <HAL_GetTick>
 800249c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a0:	f7fe fdbc 	bl	800101c <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e103      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80024b2:	f7ff fa0c 	bl	80018ce <LL_RCC_HSI48_IsReady>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f1      	beq.n	80024a0 <HAL_RCC_OscConfig+0x4c0>
 80024bc:	e013      	b.n	80024e6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024be:	f7ff f9f5 	bl	80018ac <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c2:	f7fe fdab 	bl	800101c <HAL_GetTick>
 80024c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ca:	f7fe fda7 	bl	800101c <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0ee      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80024dc:	f7ff f9f7 	bl	80018ce <LL_RCC_HSI48_IsReady>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f1      	bne.n	80024ca <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80e4 	beq.w	80026b8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f0:	f7ff fb64 	bl	8001bbc <LL_RCC_GetSysClkSource>
 80024f4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80024f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	2b02      	cmp	r3, #2
 8002504:	f040 80b4 	bne.w	8002670 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	429a      	cmp	r2, r3
 8002514:	d123      	bne.n	800255e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d11c      	bne.n	800255e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002530:	429a      	cmp	r2, r3
 8002532:	d114      	bne.n	800255e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d10d      	bne.n	800255e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d106      	bne.n	800255e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d05d      	beq.n	800261a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b0c      	cmp	r3, #12
 8002562:	d058      	beq.n	8002616 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0a1      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002576:	f7ff fbd7 	bl	8001d28 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800257a:	f7fe fd4f 	bl	800101c <HAL_GetTick>
 800257e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002582:	f7fe fd4b 	bl	800101c <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e092      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ef      	bne.n	8002582 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	4b30      	ldr	r3, [pc, #192]	@ (800266c <HAL_RCC_OscConfig+0x68c>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025ba:	0212      	lsls	r2, r2, #8
 80025bc:	4311      	orrs	r1, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025c8:	4311      	orrs	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025ce:	430a      	orrs	r2, r1
 80025d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025d4:	4313      	orrs	r3, r2
 80025d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025d8:	f7ff fb97 	bl	8001d0a <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025ec:	f7fe fd16 	bl	800101c <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fd12 	bl	800101c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e059      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ef      	beq.n	80025f4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002614:	e050      	b.n	80026b8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e04f      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d147      	bne.n	80026b8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002628:	f7ff fb6f 	bl	8001d0a <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800263a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800263c:	f7fe fcee 	bl	800101c <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7fe fcea 	bl	800101c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e031      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ef      	beq.n	8002644 <HAL_RCC_OscConfig+0x664>
 8002664:	e028      	b.n	80026b8 <HAL_RCC_OscConfig+0x6d8>
 8002666:	bf00      	nop
 8002668:	58000400 	.word	0x58000400
 800266c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d01e      	beq.n	80026b4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002676:	f7ff fb57 	bl	8001d28 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fccf 	bl	800101c <HAL_GetTick>
 800267e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe fccb 	bl	800101c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e012      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1ef      	bne.n	8002682 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80026a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026ac:	4b05      	ldr	r3, [pc, #20]	@ (80026c4 <HAL_RCC_OscConfig+0x6e4>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	60cb      	str	r3, [r1, #12]
 80026b2:	e001      	b.n	80026b8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3734      	adds	r7, #52	@ 0x34
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
 80026c2:	bf00      	nop
 80026c4:	eefefffc 	.word	0xeefefffc

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e12d      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b98      	ldr	r3, [pc, #608]	@ (8002940 <HAL_RCC_ClockConfig+0x278>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d91b      	bls.n	8002722 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b95      	ldr	r3, [pc, #596]	@ (8002940 <HAL_RCC_ClockConfig+0x278>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4993      	ldr	r1, [pc, #588]	@ (8002940 <HAL_RCC_ClockConfig+0x278>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026fa:	f7fe fc8f 	bl	800101c <HAL_GetTick>
 80026fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002700:	e008      	b.n	8002714 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002702:	f7fe fc8b 	bl	800101c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e111      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002714:	4b8a      	ldr	r3, [pc, #552]	@ (8002940 <HAL_RCC_ClockConfig+0x278>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d1ef      	bne.n	8002702 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fa4e 	bl	8001bd4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002738:	f7fe fc70 	bl	800101c <HAL_GetTick>
 800273c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002740:	f7fe fc6c 	bl	800101c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e0f2      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002752:	f7ff fb4d 	bl	8001df0 <LL_RCC_IsActiveFlag_HPRE>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f1      	beq.n	8002740 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0320 	and.w	r3, r3, #32
 8002764:	2b00      	cmp	r3, #0
 8002766:	d016      	beq.n	8002796 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fa45 	bl	8001bfc <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002772:	f7fe fc53 	bl	800101c <HAL_GetTick>
 8002776:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800277a:	f7fe fc4f 	bl	800101c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0d5      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800278c:	f7ff fb42 	bl	8001e14 <LL_RCC_IsActiveFlag_C2HPRE>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f1      	beq.n	800277a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fa3e 	bl	8001c28 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027ac:	f7fe fc36 	bl	800101c <HAL_GetTick>
 80027b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027b4:	f7fe fc32 	bl	800101c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0b8      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80027c6:	f7ff fb38 	bl	8001e3a <LL_RCC_IsActiveFlag_SHDHPRE>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f1      	beq.n	80027b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d016      	beq.n	800280a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fa38 	bl	8001c56 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027e6:	f7fe fc19 	bl	800101c <HAL_GetTick>
 80027ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027ee:	f7fe fc15 	bl	800101c <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e09b      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002800:	f7ff fb2e 	bl	8001e60 <LL_RCC_IsActiveFlag_PPRE1>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f1      	beq.n	80027ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d017      	beq.n	8002846 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fa2e 	bl	8001c7e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002822:	f7fe fbfb 	bl	800101c <HAL_GetTick>
 8002826:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800282a:	f7fe fbf7 	bl	800101c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e07d      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800283c:	f7ff fb22 	bl	8001e84 <LL_RCC_IsActiveFlag_PPRE2>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f1      	beq.n	800282a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	d043      	beq.n	80028da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d106      	bne.n	8002868 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800285a:	f7fe ffbf 	bl	80017dc <LL_RCC_HSE_IsReady>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d11e      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e067      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d106      	bne.n	800287e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002870:	f7ff fa69 	bl	8001d46 <LL_RCC_PLL_IsReady>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d113      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e05c      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002886:	f7ff f927 	bl	8001ad8 <LL_RCC_MSI_IsReady>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d108      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e051      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002894:	f7fe ffd2 	bl	800183c <LL_RCC_HSI_IsReady>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e04a      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff f974 	bl	8001b94 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028ac:	f7fe fbb6 	bl	800101c <HAL_GetTick>
 80028b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b4:	f7fe fbb2 	bl	800101c <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e036      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	f7ff f977 	bl	8001bbc <LL_RCC_GetSysClkSource>
 80028ce:	4602      	mov	r2, r0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d1ec      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028da:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_RCC_ClockConfig+0x278>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d21b      	bcs.n	8002920 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e8:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_RCC_ClockConfig+0x278>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 0207 	bic.w	r2, r3, #7
 80028f0:	4913      	ldr	r1, [pc, #76]	@ (8002940 <HAL_RCC_ClockConfig+0x278>)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f8:	f7fe fb90 	bl	800101c <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002900:	f7fe fb8c 	bl	800101c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e012      	b.n	8002938 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_ClockConfig+0x278>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d1ef      	bne.n	8002900 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002920:	f000 f87e 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002924:	4603      	mov	r3, r0
 8002926:	4a07      	ldr	r2, [pc, #28]	@ (8002944 <HAL_RCC_ClockConfig+0x27c>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800292a:	f7fe fb83 	bl	8001034 <HAL_GetTickPrio>
 800292e:	4603      	mov	r3, r0
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fb25 	bl	8000f80 <HAL_InitTick>
 8002936:	4603      	mov	r3, r0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	58004000 	.word	0x58004000
 8002944:	20000008 	.word	0x20000008

08002948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294e:	f7ff f935 	bl	8001bbc <LL_RCC_GetSysClkSource>
 8002952:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800295a:	f7ff f8f1 	bl	8001b40 <LL_RCC_MSI_GetRange>
 800295e:	4603      	mov	r3, r0
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	4a2b      	ldr	r2, [pc, #172]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	e04b      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b04      	cmp	r3, #4
 8002974:	d102      	bne.n	800297c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002976:	4b28      	ldr	r3, [pc, #160]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e045      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b08      	cmp	r3, #8
 8002980:	d10a      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002982:	f7fe fefb 	bl	800177c <LL_RCC_HSE_IsEnabledDiv2>
 8002986:	4603      	mov	r3, r0
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800298c:	4b22      	ldr	r3, [pc, #136]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0xd0>)
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e03a      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002992:	4b22      	ldr	r3, [pc, #136]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e037      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002998:	f7ff fa1e 	bl	8001dd8 <LL_RCC_PLL_GetMainSource>
 800299c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d003      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x64>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d003      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x6a>
 80029aa:	e00d      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029ae:	60bb      	str	r3, [r7, #8]
        break;
 80029b0:	e015      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80029b2:	f7fe fee3 	bl	800177c <LL_RCC_HSE_IsEnabledDiv2>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80029bc:	4b16      	ldr	r3, [pc, #88]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0xd0>)
 80029be:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80029c0:	e00d      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80029c2:	4b16      	ldr	r3, [pc, #88]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0xd4>)
 80029c4:	60bb      	str	r3, [r7, #8]
        break;
 80029c6:	e00a      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80029c8:	f7ff f8ba 	bl	8001b40 <LL_RCC_MSI_GetRange>
 80029cc:	4603      	mov	r3, r0
 80029ce:	091b      	lsrs	r3, r3, #4
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0xcc>)
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	60bb      	str	r3, [r7, #8]
        break;
 80029dc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80029de:	f7ff f9c4 	bl	8001d6a <LL_RCC_PLL_GetN>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	fb03 f402 	mul.w	r4, r3, r2
 80029ea:	f7ff f9d7 	bl	8001d9c <LL_RCC_PLL_GetDivider>
 80029ee:	4603      	mov	r3, r0
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	3301      	adds	r3, #1
 80029f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80029f8:	f7ff f9c4 	bl	8001d84 <LL_RCC_PLL_GetR>
 80029fc:	4603      	mov	r3, r0
 80029fe:	0f5b      	lsrs	r3, r3, #29
 8002a00:	3301      	adds	r3, #1
 8002a02:	fbb4 f3f3 	udiv	r3, r4, r3
 8002a06:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd90      	pop	{r4, r7, pc}
 8002a12:	bf00      	nop
 8002a14:	08005884 	.word	0x08005884
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	01e84800 	.word	0x01e84800

08002a20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b598      	push	{r3, r4, r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002a24:	f7ff ff90 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8002a28:	4604      	mov	r4, r0
 8002a2a:	f7ff f93c 	bl	8001ca6 <LL_RCC_GetAHBPrescaler>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	4a03      	ldr	r2, [pc, #12]	@ (8002a44 <HAL_RCC_GetHCLKFreq+0x24>)
 8002a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd98      	pop	{r3, r4, r7, pc}
 8002a44:	08005824 	.word	0x08005824

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b598      	push	{r3, r4, r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a4c:	f7ff ffe8 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a50:	4604      	mov	r4, r0
 8002a52:	f7ff f942 	bl	8001cda <LL_RCC_GetAPB1Prescaler>
 8002a56:	4603      	mov	r3, r0
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd98      	pop	{r3, r4, r7, pc}
 8002a70:	08005864 	.word	0x08005864

08002a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a74:	b598      	push	{r3, r4, r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a78:	f7ff ffd2 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	f7ff f938 	bl	8001cf2 <LL_RCC_GetAPB2Prescaler>
 8002a82:	4603      	mov	r3, r0
 8002a84:	0adb      	lsrs	r3, r3, #11
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd98      	pop	{r3, r4, r7, pc}
 8002a9c:	08005864 	.word	0x08005864

08002aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2bb0      	cmp	r3, #176	@ 0xb0
 8002aac:	d903      	bls.n	8002ab6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e007      	b.n	8002ac6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002ac6:	f7ff f8fa 	bl	8001cbe <LL_RCC_GetAHB4Prescaler>
 8002aca:	4603      	mov	r3, r0
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	0c9c      	lsrs	r4, r3, #18
 8002aea:	f7fe fe39 	bl	8001760 <HAL_PWREx_GetVoltageRange>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f000 f80c 	bl	8002b10 <RCC_SetFlashLatency>
 8002af8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	08005884 	.word	0x08005884
 8002b08:	08005824 	.word	0x08005824
 8002b0c:	431bde83 	.word	0x431bde83

08002b10 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b093      	sub	sp, #76	@ 0x4c
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002b1a:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <RCC_SetFlashLatency+0xe8>)
 8002b1c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002b20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002b26:	4a35      	ldr	r2, [pc, #212]	@ (8002bfc <RCC_SetFlashLatency+0xec>)
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002b32:	4b33      	ldr	r3, [pc, #204]	@ (8002c00 <RCC_SetFlashLatency+0xf0>)
 8002b34:	f107 040c 	add.w	r4, r7, #12
 8002b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002b3e:	2300      	movs	r3, #0
 8002b40:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b48:	d11a      	bne.n	8002b80 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b4e:	e013      	b.n	8002b78 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	3348      	adds	r3, #72	@ 0x48
 8002b56:	443b      	add	r3, r7
 8002b58:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d807      	bhi.n	8002b72 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	3348      	adds	r3, #72	@ 0x48
 8002b68:	443b      	add	r3, r7
 8002b6a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b6e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002b70:	e020      	b.n	8002bb4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b74:	3301      	adds	r3, #1
 8002b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d9e8      	bls.n	8002b50 <RCC_SetFlashLatency+0x40>
 8002b7e:	e019      	b.n	8002bb4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b80:	2300      	movs	r3, #0
 8002b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b84:	e013      	b.n	8002bae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	3348      	adds	r3, #72	@ 0x48
 8002b8c:	443b      	add	r3, r7
 8002b8e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d807      	bhi.n	8002ba8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3348      	adds	r3, #72	@ 0x48
 8002b9e:	443b      	add	r3, r7
 8002ba0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8002ba6:	e005      	b.n	8002bb4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002baa:	3301      	adds	r3, #1
 8002bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d9e8      	bls.n	8002b86 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002bb4:	4b13      	ldr	r3, [pc, #76]	@ (8002c04 <RCC_SetFlashLatency+0xf4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 0207 	bic.w	r2, r3, #7
 8002bbc:	4911      	ldr	r1, [pc, #68]	@ (8002c04 <RCC_SetFlashLatency+0xf4>)
 8002bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002bc4:	f7fe fa2a 	bl	800101c <HAL_GetTick>
 8002bc8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bca:	e008      	b.n	8002bde <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002bcc:	f7fe fa26 	bl	800101c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e007      	b.n	8002bee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002bde:	4b09      	ldr	r3, [pc, #36]	@ (8002c04 <RCC_SetFlashLatency+0xf4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1ef      	bne.n	8002bcc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	374c      	adds	r7, #76	@ 0x4c
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	080057f8 	.word	0x080057f8
 8002bfc:	08005808 	.word	0x08005808
 8002c00:	08005814 	.word	0x08005814
 8002c04:	58004000 	.word	0x58004000

08002c08 <LL_RCC_LSE_IsEnabled>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <LL_RCC_LSE_IsEnabled+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_RCC_LSE_IsEnabled+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_RCC_LSE_IsReady>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d101      	bne.n	8002c44 <LL_RCC_LSE_IsReady+0x18>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <LL_RCC_LSE_IsReady+0x1a>
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_RCC_SetRFWKPClockSource>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <LL_RCC_SetSMPSClockSource>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	f023 0203 	bic.w	r2, r3, #3
 8002c8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_RCC_SetSMPSPrescaler>:
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_SetUSARTClockSource>:
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cdc:	f023 0203 	bic.w	r2, r3, #3
 8002ce0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_SetLPUARTClockSource>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_SetI2CClockSource>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	401a      	ands	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_SetLPTIMClockSource>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	041b      	lsls	r3, r3, #16
 8002d74:	43db      	mvns	r3, r3
 8002d76:	401a      	ands	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	041b      	lsls	r3, r3, #16
 8002d7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <LL_RCC_SetSAIClockSource>:
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_SetRNGClockSource>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_RCC_SetCLK48ClockSource>:
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002df2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_RCC_SetUSBClockSource>:
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ffe3 	bl	8002dea <LL_RCC_SetCLK48ClockSource>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <LL_RCC_SetADCClockSource>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_SetRTCClockSource>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_GetRTCClockSource>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_RCC_ForceBackupDomainReset>:
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002eb6:	bf00      	nop
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_PLLSAI1_Enable>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ef0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ef4:	6013      	str	r3, [r2, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_RCC_PLLSAI1_Disable>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_RCC_PLLSAI1_IsReady>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f30:	d101      	bne.n	8002f36 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b088      	sub	sp, #32
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f4e:	2300      	movs	r3, #0
 8002f50:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d034      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f66:	d021      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002f68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f6c:	d81b      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f72:	d01d      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002f74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f78:	d815      	bhi.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002f7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f82:	d110      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f92:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f94:	e00d      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f947 	bl	800322e <RCCEx_PLLSAI1_ConfigNP>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002fa4:	e005      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	77fb      	strb	r3, [r7, #31]
        break;
 8002faa:	e002      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fac:	bf00      	nop
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb2:	7ffb      	ldrb	r3, [r7, #31]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fee8 	bl	8002d92 <LL_RCC_SetSAIClockSource>
 8002fc2:	e001      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
 8002fc6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d046      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002fd4:	f7ff ff56 	bl	8002e84 <LL_RCC_GetRTCClockSource>
 8002fd8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d03c      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fe4:	f7fe fbac 	bl	8001740 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d105      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff ff30 	bl	8002e58 <LL_RCC_SetRTCClockSource>
 8002ff8:	e02e      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003002:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003004:	f7ff ff4b 	bl	8002e9e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003008:	f7ff ff5a 	bl	8002ec0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003024:	f7ff fdf0 	bl	8002c08 <LL_RCC_LSE_IsEnabled>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d114      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800302e:	f7fd fff5 	bl	800101c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003034:	e00b      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fd fff1 	bl	800101c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d902      	bls.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	77fb      	strb	r3, [r7, #31]
              break;
 800304c:	e004      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800304e:	f7ff fded 	bl	8002c2c <LL_RCC_LSE_IsReady>
 8003052:	4603      	mov	r3, r0
 8003054:	2b01      	cmp	r3, #1
 8003056:	d1ee      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003058:	7ffb      	ldrb	r3, [r7, #31]
 800305a:	77bb      	strb	r3, [r7, #30]
 800305c:	e001      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305e:	7ffb      	ldrb	r3, [r7, #31]
 8003060:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d004      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fe2a 	bl	8002ccc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d004      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fe35 	bl	8002cf8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d004      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fe5d 	bl	8002d5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fe52 	bl	8002d5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fe2a 	bl	8002d24 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff fe1f 	bl	8002d24 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d022      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fe8d 	bl	8002e16 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003100:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003104:	d107      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003110:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003114:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800311e:	d10b      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f8dd 	bl	80032e4 <RCCEx_PLLSAI1_ConfigNQ>
 800312a:	4603      	mov	r3, r0
 800312c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800312e:	7ffb      	ldrb	r3, [r7, #31]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003134:	7ffb      	ldrb	r3, [r7, #31]
 8003136:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02b      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314c:	d008      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003152:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003156:	d003      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fe2a 	bl	8002dbe <LL_RCC_SetRNGClockSource>
 800316a:	e00a      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	2000      	movs	r0, #0
 8003178:	f7ff fe21 	bl	8002dbe <LL_RCC_SetRNGClockSource>
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f7ff fe34 	bl	8002dea <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003186:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800318a:	d107      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d022      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fe3d 	bl	8002e2c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ba:	d107      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ca:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031d4:	d10b      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 f8dd 	bl	800339a <RCCEx_PLLSAI1_ConfigNR>
 80031e0:	4603      	mov	r3, r0
 80031e2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031e4:	7ffb      	ldrb	r3, [r7, #31]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80031ea:	7ffb      	ldrb	r3, [r7, #31]
 80031ec:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d004      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fd26 	bl	8002c50 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fd45 	bl	8002ca4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff fd2c 	bl	8002c7c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003224:	7fbb      	ldrb	r3, [r7, #30]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800323a:	f7ff fe61 	bl	8002f00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800323e:	f7fd feed 	bl	800101c <HAL_GetTick>
 8003242:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003244:	e009      	b.n	800325a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003246:	f7fd fee9 	bl	800101c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d902      	bls.n	800325a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	73fb      	strb	r3, [r7, #15]
      break;
 8003258:	e004      	b.n	8003264 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800325a:	f7ff fe60 	bl	8002f1e <LL_RCC_PLLSAI1_IsReady>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d137      	bne.n	80032da <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800327e:	4313      	orrs	r3, r2
 8003280:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003294:	4313      	orrs	r3, r2
 8003296:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003298:	f7ff fe23 	bl	8002ee2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800329c:	f7fd febe 	bl	800101c <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032a2:	e009      	b.n	80032b8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032a4:	f7fd feba 	bl	800101c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d902      	bls.n	80032b8 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	73fb      	strb	r3, [r7, #15]
        break;
 80032b6:	e004      	b.n	80032c2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032b8:	f7ff fe31 	bl	8002f1e <LL_RCC_PLLSAI1_IsReady>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d1f0      	bne.n	80032a4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d108      	bne.n	80032da <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032d6:	4313      	orrs	r3, r2
 80032d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032f0:	f7ff fe06 	bl	8002f00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032f4:	f7fd fe92 	bl	800101c <HAL_GetTick>
 80032f8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032fa:	e009      	b.n	8003310 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032fc:	f7fd fe8e 	bl	800101c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d902      	bls.n	8003310 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	73fb      	strb	r3, [r7, #15]
      break;
 800330e:	e004      	b.n	800331a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003310:	f7ff fe05 	bl	8002f1e <LL_RCC_PLLSAI1_IsReady>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800331a:	7bfb      	ldrb	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d137      	bne.n	8003390 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003334:	4313      	orrs	r3, r2
 8003336:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800334a:	4313      	orrs	r3, r2
 800334c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800334e:	f7ff fdc8 	bl	8002ee2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003352:	f7fd fe63 	bl	800101c <HAL_GetTick>
 8003356:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003358:	e009      	b.n	800336e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800335a:	f7fd fe5f 	bl	800101c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d902      	bls.n	800336e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	73fb      	strb	r3, [r7, #15]
        break;
 800336c:	e004      	b.n	8003378 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800336e:	f7ff fdd6 	bl	8002f1e <LL_RCC_PLLSAI1_IsReady>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d1f0      	bne.n	800335a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800338c:	4313      	orrs	r3, r2
 800338e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80033a6:	f7ff fdab 	bl	8002f00 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80033aa:	f7fd fe37 	bl	800101c <HAL_GetTick>
 80033ae:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033b0:	e009      	b.n	80033c6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033b2:	f7fd fe33 	bl	800101c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d902      	bls.n	80033c6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	73fb      	strb	r3, [r7, #15]
      break;
 80033c4:	e004      	b.n	80033d0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80033c6:	f7ff fdaa 	bl	8002f1e <LL_RCC_PLLSAI1_IsReady>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1f0      	bne.n	80033b2 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d137      	bne.n	8003446 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80033d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033ea:	4313      	orrs	r3, r2
 80033ec:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003400:	4313      	orrs	r3, r2
 8003402:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003404:	f7ff fd6d 	bl	8002ee2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003408:	f7fd fe08 	bl	800101c <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800340e:	e009      	b.n	8003424 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003410:	f7fd fe04 	bl	800101c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d902      	bls.n	8003424 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	73fb      	strb	r3, [r7, #15]
        break;
 8003422:	e004      	b.n	800342e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003424:	f7ff fd7b 	bl	8002f1e <LL_RCC_PLLSAI1_IsReady>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	d1f0      	bne.n	8003410 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d108      	bne.n	8003446 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003442:	4313      	orrs	r3, r2
 8003444:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003446:	7bfb      	ldrb	r3, [r7, #15]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <LL_RCC_GetUSARTClockSource>:
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003458:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800345c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4013      	ands	r3, r2
}
 8003464:	4618      	mov	r0, r3
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <LL_RCC_GetLPUARTClockSource>:
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800347c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4013      	ands	r3, r2
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e042      	b.n	8003528 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fd fa3f 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2224      	movs	r2, #36	@ 0x24
 80034be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0201 	bic.w	r2, r2, #1
 80034d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fe40 	bl	8004160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fc15 	bl	8003d10 <UART_SetConfig>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e01b      	b.n	8003528 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800350e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 febf 	bl	80042a4 <UART_CheckIdleState>
 8003526:	4603      	mov	r3, r0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003546:	2b20      	cmp	r3, #32
 8003548:	d17b      	bne.n	8003642 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_UART_Transmit+0x26>
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e074      	b.n	8003644 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2221      	movs	r2, #33	@ 0x21
 8003566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800356a:	f7fd fd57 	bl	800101c <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	88fa      	ldrh	r2, [r7, #6]
 8003574:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	88fa      	ldrh	r2, [r7, #6]
 800357c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003588:	d108      	bne.n	800359c <HAL_UART_Transmit+0x6c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d104      	bne.n	800359c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e003      	b.n	80035a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035a4:	e030      	b.n	8003608 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	@ 0x80
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 ff21 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e03d      	b.n	8003644 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	3302      	adds	r3, #2
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	e007      	b.n	80035f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	781a      	ldrb	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	3301      	adds	r3, #1
 80035f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1c8      	bne.n	80035a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	2140      	movs	r1, #64	@ 0x40
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 feea 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e006      	b.n	8003644 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3720      	adds	r7, #32
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b0ba      	sub	sp, #232	@ 0xe8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003672:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003676:	f640 030f 	movw	r3, #2063	@ 0x80f
 800367a:	4013      	ands	r3, r2
 800367c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d11b      	bne.n	80036c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800368c:	f003 0320 	and.w	r3, r3, #32
 8003690:	2b00      	cmp	r3, #0
 8003692:	d015      	beq.n	80036c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d009      	beq.n	80036c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 8300 	beq.w	8003cb6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	4798      	blx	r3
      }
      return;
 80036be:	e2fa      	b.n	8003cb6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80036c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8123 	beq.w	8003910 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80036ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80036ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003904 <HAL_UART_IRQHandler+0x2b8>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80036d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80036da:	4b8b      	ldr	r3, [pc, #556]	@ (8003908 <HAL_UART_IRQHandler+0x2bc>)
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8116 	beq.w	8003910 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d011      	beq.n	8003714 <HAL_UART_IRQHandler+0xc8>
 80036f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370a:	f043 0201 	orr.w	r2, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d011      	beq.n	8003744 <HAL_UART_IRQHandler+0xf8>
 8003720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2202      	movs	r2, #2
 8003732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800373a:	f043 0204 	orr.w	r2, r3, #4
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d011      	beq.n	8003774 <HAL_UART_IRQHandler+0x128>
 8003750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2204      	movs	r2, #4
 8003762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800376a:	f043 0202 	orr.w	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d017      	beq.n	80037b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d105      	bne.n	8003798 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800378c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003790:	4b5c      	ldr	r3, [pc, #368]	@ (8003904 <HAL_UART_IRQHandler+0x2b8>)
 8003792:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2208      	movs	r2, #8
 800379e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a6:	f043 0208 	orr.w	r2, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d012      	beq.n	80037e2 <HAL_UART_IRQHandler+0x196>
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00c      	beq.n	80037e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 8266 	beq.w	8003cba <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d013      	beq.n	8003822 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d105      	bne.n	8003812 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800380a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003836:	2b40      	cmp	r3, #64	@ 0x40
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800383a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800383e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003842:	2b00      	cmp	r3, #0
 8003844:	d054      	beq.n	80038f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fe43 	bl	80044d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003856:	2b40      	cmp	r3, #64	@ 0x40
 8003858:	d146      	bne.n	80038e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3308      	adds	r3, #8
 8003860:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003870:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3308      	adds	r3, #8
 8003882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003886:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800388a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800389e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1d9      	bne.n	800385a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b6:	4a15      	ldr	r2, [pc, #84]	@ (800390c <HAL_UART_IRQHandler+0x2c0>)
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fd fd55 	bl	8001370 <HAL_DMA_Abort_IT>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d019      	beq.n	8003900 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80038da:	4610      	mov	r0, r2
 80038dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038de:	e00f      	b.n	8003900 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f9ff 	bl	8003ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e6:	e00b      	b.n	8003900 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f9fb 	bl	8003ce4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ee:	e007      	b.n	8003900 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f9f7 	bl	8003ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80038fe:	e1dc      	b.n	8003cba <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	bf00      	nop
    return;
 8003902:	e1da      	b.n	8003cba <HAL_UART_IRQHandler+0x66e>
 8003904:	10000001 	.word	0x10000001
 8003908:	04000120 	.word	0x04000120
 800390c:	0800459f 	.word	0x0800459f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 8170 	bne.w	8003bfa <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800391a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 8169 	beq.w	8003bfa <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8162 	beq.w	8003bfa <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2210      	movs	r2, #16
 800393c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003948:	2b40      	cmp	r3, #64	@ 0x40
 800394a:	f040 80d8 	bne.w	8003afe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800395c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80af 	beq.w	8003ac4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800396c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003970:	429a      	cmp	r2, r3
 8003972:	f080 80a7 	bcs.w	8003ac4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800397c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	f040 8087 	bne.w	8003aa2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80039a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80039ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	461a      	mov	r2, r3
 80039ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80039be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80039c2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039ce:	e841 2300 	strex	r3, r2, [r1]
 80039d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1da      	bne.n	8003994 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039e8:	e853 3f00 	ldrex	r3, [r3]
 80039ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3308      	adds	r3, #8
 80039fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1e1      	bne.n	80039de <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3308      	adds	r3, #8
 8003a20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a24:	e853 3f00 	ldrex	r3, [r3]
 8003a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a46:	e841 2300 	strex	r3, r2, [r1]
 8003a4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1e3      	bne.n	8003a1a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a70:	f023 0310 	bic.w	r3, r3, #16
 8003a74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e4      	bne.n	8003a60 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd fc08 	bl	80012b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4619      	mov	r1, r3
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f91b 	bl	8003cf8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003ac2:	e0fc      	b.n	8003cbe <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	f040 80f5 	bne.w	8003cbe <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	f040 80eb 	bne.w	8003cbe <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003af4:	4619      	mov	r1, r3
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8fe 	bl	8003cf8 <HAL_UARTEx_RxEventCallback>
      return;
 8003afc:	e0df      	b.n	8003cbe <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 80d1 	beq.w	8003cc2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8003b20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80cc 	beq.w	8003cc2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b54:	e841 2300 	strex	r3, r2, [r1]
 8003b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e4      	bne.n	8003b2a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3308      	adds	r3, #8
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b76:	f023 0301 	bic.w	r3, r3, #1
 8003b7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b88:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e1      	bne.n	8003b60 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f023 0310 	bic.w	r3, r3, #16
 8003bc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	617b      	str	r3, [r7, #20]
   return(result);
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e4      	bne.n	8003bb0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f880 	bl	8003cf8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bf8:	e063      	b.n	8003cc2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <HAL_UART_IRQHandler+0x5d8>
 8003c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fcfb 	bl	8004618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c22:	e051      	b.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d014      	beq.n	8003c5a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d105      	bne.n	8003c48 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03a      	beq.n	8003cc6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
    }
    return;
 8003c58:	e035      	b.n	8003cc6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_UART_IRQHandler+0x62e>
 8003c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fca5 	bl	80045c2 <UART_EndTransmit_IT>
    return;
 8003c78:	e026      	b.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_UART_IRQHandler+0x64e>
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c8a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fcd4 	bl	8004640 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c98:	e016      	b.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d010      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
 8003ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da0c      	bge.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fcbc 	bl	800462c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cb4:	e008      	b.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8003cb6:	bf00      	nop
 8003cb8:	e006      	b.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
    return;
 8003cba:	bf00      	nop
 8003cbc:	e004      	b.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8003cbe:	bf00      	nop
 8003cc0:	e002      	b.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
      return;
 8003cc2:	bf00      	nop
 8003cc4:	e000      	b.n	8003cc8 <HAL_UART_IRQHandler+0x67c>
    return;
 8003cc6:	bf00      	nop
  }
}
 8003cc8:	37e8      	adds	r7, #232	@ 0xe8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop

08003cd0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b08c      	sub	sp, #48	@ 0x30
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4baf      	ldr	r3, [pc, #700]	@ (8003ffc <UART_SetConfig+0x2ec>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	6812      	ldr	r2, [r2, #0]
 8003d46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d48:	430b      	orrs	r3, r1
 8003d4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4aa4      	ldr	r2, [pc, #656]	@ (8004000 <UART_SetConfig+0x2f0>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003d86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	f023 010f 	bic.w	r1, r3, #15
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a95      	ldr	r2, [pc, #596]	@ (8004004 <UART_SetConfig+0x2f4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d125      	bne.n	8003e00 <UART_SetConfig+0xf0>
 8003db4:	2003      	movs	r0, #3
 8003db6:	f7ff fb4b 	bl	8003450 <LL_RCC_GetUSARTClockSource>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d81b      	bhi.n	8003df8 <UART_SetConfig+0xe8>
 8003dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc8 <UART_SetConfig+0xb8>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003dd9 	.word	0x08003dd9
 8003dcc:	08003de9 	.word	0x08003de9
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003df1 	.word	0x08003df1
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dde:	e042      	b.n	8003e66 <UART_SetConfig+0x156>
 8003de0:	2302      	movs	r3, #2
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003de6:	e03e      	b.n	8003e66 <UART_SetConfig+0x156>
 8003de8:	2304      	movs	r3, #4
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dee:	e03a      	b.n	8003e66 <UART_SetConfig+0x156>
 8003df0:	2308      	movs	r3, #8
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003df6:	e036      	b.n	8003e66 <UART_SetConfig+0x156>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dfe:	e032      	b.n	8003e66 <UART_SetConfig+0x156>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a7e      	ldr	r2, [pc, #504]	@ (8004000 <UART_SetConfig+0x2f0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d12a      	bne.n	8003e60 <UART_SetConfig+0x150>
 8003e0a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8003e0e:	f7ff fb2f 	bl	8003470 <LL_RCC_GetLPUARTClockSource>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e18:	d01a      	beq.n	8003e50 <UART_SetConfig+0x140>
 8003e1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e1e:	d81b      	bhi.n	8003e58 <UART_SetConfig+0x148>
 8003e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e24:	d00c      	beq.n	8003e40 <UART_SetConfig+0x130>
 8003e26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e2a:	d815      	bhi.n	8003e58 <UART_SetConfig+0x148>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <UART_SetConfig+0x128>
 8003e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e34:	d008      	beq.n	8003e48 <UART_SetConfig+0x138>
 8003e36:	e00f      	b.n	8003e58 <UART_SetConfig+0x148>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e3e:	e012      	b.n	8003e66 <UART_SetConfig+0x156>
 8003e40:	2302      	movs	r3, #2
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e46:	e00e      	b.n	8003e66 <UART_SetConfig+0x156>
 8003e48:	2304      	movs	r3, #4
 8003e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e4e:	e00a      	b.n	8003e66 <UART_SetConfig+0x156>
 8003e50:	2308      	movs	r3, #8
 8003e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e56:	e006      	b.n	8003e66 <UART_SetConfig+0x156>
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e5e:	e002      	b.n	8003e66 <UART_SetConfig+0x156>
 8003e60:	2310      	movs	r3, #16
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a65      	ldr	r2, [pc, #404]	@ (8004000 <UART_SetConfig+0x2f0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	f040 8097 	bne.w	8003fa0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d823      	bhi.n	8003ec2 <UART_SetConfig+0x1b2>
 8003e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e80 <UART_SetConfig+0x170>)
 8003e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003ead 	.word	0x08003ead
 8003e8c:	08003ec3 	.word	0x08003ec3
 8003e90:	08003eb3 	.word	0x08003eb3
 8003e94:	08003ec3 	.word	0x08003ec3
 8003e98:	08003ec3 	.word	0x08003ec3
 8003e9c:	08003ec3 	.word	0x08003ec3
 8003ea0:	08003ebb 	.word	0x08003ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea4:	f7fe fdd0 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eaa:	e010      	b.n	8003ece <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003eac:	4b56      	ldr	r3, [pc, #344]	@ (8004008 <UART_SetConfig+0x2f8>)
 8003eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003eb0:	e00d      	b.n	8003ece <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eb2:	f7fe fd49 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8003eb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eb8:	e009      	b.n	8003ece <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ec0:	e005      	b.n	8003ece <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ecc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 812b 	beq.w	800412c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	4a4c      	ldr	r2, [pc, #304]	@ (800400c <UART_SetConfig+0x2fc>)
 8003edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	4413      	add	r3, r2
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d305      	bcc.n	8003f06 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d903      	bls.n	8003f0e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f0c:	e10e      	b.n	800412c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	2200      	movs	r2, #0
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	60fa      	str	r2, [r7, #12]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	4a3c      	ldr	r2, [pc, #240]	@ (800400c <UART_SetConfig+0x2fc>)
 8003f1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2200      	movs	r2, #0
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f30:	f7fc f976 	bl	8000220 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	020b      	lsls	r3, r1, #8
 8003f46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f4a:	0202      	lsls	r2, r0, #8
 8003f4c:	6979      	ldr	r1, [r7, #20]
 8003f4e:	6849      	ldr	r1, [r1, #4]
 8003f50:	0849      	lsrs	r1, r1, #1
 8003f52:	2000      	movs	r0, #0
 8003f54:	460c      	mov	r4, r1
 8003f56:	4605      	mov	r5, r0
 8003f58:	eb12 0804 	adds.w	r8, r2, r4
 8003f5c:	eb43 0905 	adc.w	r9, r3, r5
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	469a      	mov	sl, r3
 8003f68:	4693      	mov	fp, r2
 8003f6a:	4652      	mov	r2, sl
 8003f6c:	465b      	mov	r3, fp
 8003f6e:	4640      	mov	r0, r8
 8003f70:	4649      	mov	r1, r9
 8003f72:	f7fc f955 	bl	8000220 <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f84:	d308      	bcc.n	8003f98 <UART_SetConfig+0x288>
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f8c:	d204      	bcs.n	8003f98 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	6a3a      	ldr	r2, [r7, #32]
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	e0c9      	b.n	800412c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f9e:	e0c5      	b.n	800412c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	69db      	ldr	r3, [r3, #28]
 8003fa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa8:	d16d      	bne.n	8004086 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003faa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	2b07      	cmp	r3, #7
 8003fb2:	d82d      	bhi.n	8004010 <UART_SetConfig+0x300>
 8003fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fbc <UART_SetConfig+0x2ac>)
 8003fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fba:	bf00      	nop
 8003fbc:	08003fdd 	.word	0x08003fdd
 8003fc0:	08003fe5 	.word	0x08003fe5
 8003fc4:	08004011 	.word	0x08004011
 8003fc8:	08003feb 	.word	0x08003feb
 8003fcc:	08004011 	.word	0x08004011
 8003fd0:	08004011 	.word	0x08004011
 8003fd4:	08004011 	.word	0x08004011
 8003fd8:	08003ff3 	.word	0x08003ff3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7fe fd4a 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 8003fe0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fe2:	e01b      	b.n	800401c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe4:	4b08      	ldr	r3, [pc, #32]	@ (8004008 <UART_SetConfig+0x2f8>)
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fe8:	e018      	b.n	800401c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fea:	f7fe fcad 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8003fee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ff0:	e014      	b.n	800401c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ff8:	e010      	b.n	800401c <UART_SetConfig+0x30c>
 8003ffa:	bf00      	nop
 8003ffc:	cfff69f3 	.word	0xcfff69f3
 8004000:	40008000 	.word	0x40008000
 8004004:	40013800 	.word	0x40013800
 8004008:	00f42400 	.word	0x00f42400
 800400c:	080058c4 	.word	0x080058c4
      default:
        pclk = 0U;
 8004010:	2300      	movs	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800401a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8084 	beq.w	800412c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	4a4b      	ldr	r2, [pc, #300]	@ (8004158 <UART_SetConfig+0x448>)
 800402a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800402e:	461a      	mov	r2, r3
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	fbb3 f3f2 	udiv	r3, r3, r2
 8004036:	005a      	lsls	r2, r3, #1
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	085b      	lsrs	r3, r3, #1
 800403e:	441a      	add	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	2b0f      	cmp	r3, #15
 800404e:	d916      	bls.n	800407e <UART_SetConfig+0x36e>
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004056:	d212      	bcs.n	800407e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	b29b      	uxth	r3, r3
 800405c:	f023 030f 	bic.w	r3, r3, #15
 8004060:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	085b      	lsrs	r3, r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	b29a      	uxth	r2, r3
 800406e:	8bfb      	ldrh	r3, [r7, #30]
 8004070:	4313      	orrs	r3, r2
 8004072:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	8bfa      	ldrh	r2, [r7, #30]
 800407a:	60da      	str	r2, [r3, #12]
 800407c:	e056      	b.n	800412c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004084:	e052      	b.n	800412c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004086:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800408a:	3b01      	subs	r3, #1
 800408c:	2b07      	cmp	r3, #7
 800408e:	d822      	bhi.n	80040d6 <UART_SetConfig+0x3c6>
 8004090:	a201      	add	r2, pc, #4	@ (adr r2, 8004098 <UART_SetConfig+0x388>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040b9 	.word	0x080040b9
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040d7 	.word	0x080040d7
 80040a4:	080040c7 	.word	0x080040c7
 80040a8:	080040d7 	.word	0x080040d7
 80040ac:	080040d7 	.word	0x080040d7
 80040b0:	080040d7 	.word	0x080040d7
 80040b4:	080040cf 	.word	0x080040cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040b8:	f7fe fcdc 	bl	8002a74 <HAL_RCC_GetPCLK2Freq>
 80040bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040be:	e010      	b.n	80040e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040c0:	4b26      	ldr	r3, [pc, #152]	@ (800415c <UART_SetConfig+0x44c>)
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040c4:	e00d      	b.n	80040e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c6:	f7fe fc3f 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 80040ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80040cc:	e009      	b.n	80040e2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040d4:	e005      	b.n	80040e2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040e0:	bf00      	nop
    }

    if (pclk != 0U)
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d021      	beq.n	800412c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004158 <UART_SetConfig+0x448>)
 80040ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040f2:	461a      	mov	r2, r3
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	441a      	add	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	fbb2 f3f3 	udiv	r3, r2, r3
 800410a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	d909      	bls.n	8004126 <UART_SetConfig+0x416>
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004118:	d205      	bcs.n	8004126 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	b29a      	uxth	r2, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	e002      	b.n	800412c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2201      	movs	r2, #1
 8004130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2201      	movs	r2, #1
 8004138:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2200      	movs	r2, #0
 8004140:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2200      	movs	r2, #0
 8004146:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004148:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800414c:	4618      	mov	r0, r3
 800414e:	3730      	adds	r7, #48	@ 0x30
 8004150:	46bd      	mov	sp, r7
 8004152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004156:	bf00      	nop
 8004158:	080058c4 	.word	0x080058c4
 800415c:	00f42400 	.word	0x00f42400

08004160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004216:	f003 0320 	and.w	r3, r3, #32
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01a      	beq.n	8004276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800425e:	d10a      	bne.n	8004276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	605a      	str	r2, [r3, #4]
  }
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b098      	sub	sp, #96	@ 0x60
 80042a8:	af02      	add	r7, sp, #8
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042b4:	f7fc feb2 	bl	800101c <HAL_GetTick>
 80042b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d12f      	bne.n	8004328 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f88e 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d022      	beq.n	8004328 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004300:	647b      	str	r3, [r7, #68]	@ 0x44
 8004302:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800430e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e6      	bne.n	80042e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e063      	b.n	80043f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b04      	cmp	r3, #4
 8004334:	d149      	bne.n	80043ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004336:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433e:	2200      	movs	r2, #0
 8004340:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f857 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d03c      	beq.n	80043ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	623b      	str	r3, [r7, #32]
   return(result);
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800436e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004370:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004374:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e6      	bne.n	8004350 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	3308      	adds	r3, #8
 8004388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	60fb      	str	r3, [r7, #12]
   return(result);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	64bb      	str	r3, [r7, #72]	@ 0x48
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3308      	adds	r3, #8
 80043a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043a2:	61fa      	str	r2, [r7, #28]
 80043a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	69b9      	ldr	r1, [r7, #24]
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	617b      	str	r3, [r7, #20]
   return(result);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e5      	bne.n	8004382 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e012      	b.n	80043f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3758      	adds	r7, #88	@ 0x58
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004408:	e04f      	b.n	80044aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004410:	d04b      	beq.n	80044aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004412:	f7fc fe03 	bl	800101c <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <UART_WaitOnFlagUntilTimeout+0x30>
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e04e      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d037      	beq.n	80044aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b80      	cmp	r3, #128	@ 0x80
 800443e:	d034      	beq.n	80044aa <UART_WaitOnFlagUntilTimeout+0xb2>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d031      	beq.n	80044aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d110      	bne.n	8004476 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2208      	movs	r2, #8
 800445a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f838 	bl	80044d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2208      	movs	r2, #8
 8004466:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e029      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004480:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004484:	d111      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800448e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f81e 	bl	80044d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e00f      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69da      	ldr	r2, [r3, #28]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4013      	ands	r3, r2
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	bf0c      	ite	eq
 80044ba:	2301      	moveq	r3, #1
 80044bc:	2300      	movne	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	79fb      	ldrb	r3, [r7, #7]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d0a0      	beq.n	800440a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b095      	sub	sp, #84	@ 0x54
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3308      	adds	r3, #8
 8004512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	61fb      	str	r3, [r7, #28]
   return(result);
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004522:	f023 0301 	bic.w	r3, r3, #1
 8004526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3308      	adds	r3, #8
 800452e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004530:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800453e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e3      	bne.n	800450c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d118      	bne.n	800457e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	60bb      	str	r3, [r7, #8]
   return(result);
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	f023 0310 	bic.w	r3, r3, #16
 8004560:	647b      	str	r3, [r7, #68]	@ 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456e:	6979      	ldr	r1, [r7, #20]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	613b      	str	r3, [r7, #16]
   return(result);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1e6      	bne.n	800454c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004592:	bf00      	nop
 8004594:	3754      	adds	r7, #84	@ 0x54
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f7ff fb95 	bl	8003ce4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b088      	sub	sp, #32
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	461a      	mov	r2, r3
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6979      	ldr	r1, [r7, #20]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	613b      	str	r3, [r7, #16]
   return(result);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e6      	bne.n	80045ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fb60 	bl	8003cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004610:	bf00      	nop
 8004612:	3720      	adds	r7, #32
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_UARTEx_DisableFifoMode+0x16>
 8004666:	2302      	movs	r3, #2
 8004668:	e027      	b.n	80046ba <HAL_UARTEx_DisableFifoMode+0x66>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2224      	movs	r2, #36	@ 0x24
 8004676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004698:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2220      	movs	r2, #32
 80046ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
 80046ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046da:	2302      	movs	r3, #2
 80046dc:	e02d      	b.n	800473a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2224      	movs	r2, #36	@ 0x24
 80046ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0201 	bic.w	r2, r2, #1
 8004704:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f850 	bl	80047c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004756:	2302      	movs	r3, #2
 8004758:	e02d      	b.n	80047b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2224      	movs	r2, #36	@ 0x24
 8004766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f812 	bl	80047c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d108      	bne.n	80047e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047e0:	e031      	b.n	8004846 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047e2:	2308      	movs	r3, #8
 80047e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047e6:	2308      	movs	r3, #8
 80047e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	0e5b      	lsrs	r3, r3, #25
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	0f5b      	lsrs	r3, r3, #29
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800480a:	7bbb      	ldrb	r3, [r7, #14]
 800480c:	7b3a      	ldrb	r2, [r7, #12]
 800480e:	4911      	ldr	r1, [pc, #68]	@ (8004854 <UARTEx_SetNbDataToProcess+0x94>)
 8004810:	5c8a      	ldrb	r2, [r1, r2]
 8004812:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004816:	7b3a      	ldrb	r2, [r7, #12]
 8004818:	490f      	ldr	r1, [pc, #60]	@ (8004858 <UARTEx_SetNbDataToProcess+0x98>)
 800481a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800481c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004828:	7bfb      	ldrb	r3, [r7, #15]
 800482a:	7b7a      	ldrb	r2, [r7, #13]
 800482c:	4909      	ldr	r1, [pc, #36]	@ (8004854 <UARTEx_SetNbDataToProcess+0x94>)
 800482e:	5c8a      	ldrb	r2, [r1, r2]
 8004830:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004834:	7b7a      	ldrb	r2, [r7, #13]
 8004836:	4908      	ldr	r1, [pc, #32]	@ (8004858 <UARTEx_SetNbDataToProcess+0x98>)
 8004838:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800483a:	fb93 f3f2 	sdiv	r3, r3, r2
 800483e:	b29a      	uxth	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004846:	bf00      	nop
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	080058dc 	.word	0x080058dc
 8004858:	080058e4 	.word	0x080058e4

0800485c <std>:
 800485c:	2300      	movs	r3, #0
 800485e:	b510      	push	{r4, lr}
 8004860:	4604      	mov	r4, r0
 8004862:	e9c0 3300 	strd	r3, r3, [r0]
 8004866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800486a:	6083      	str	r3, [r0, #8]
 800486c:	8181      	strh	r1, [r0, #12]
 800486e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004870:	81c2      	strh	r2, [r0, #14]
 8004872:	6183      	str	r3, [r0, #24]
 8004874:	4619      	mov	r1, r3
 8004876:	2208      	movs	r2, #8
 8004878:	305c      	adds	r0, #92	@ 0x5c
 800487a:	f000 f9f9 	bl	8004c70 <memset>
 800487e:	4b0d      	ldr	r3, [pc, #52]	@ (80048b4 <std+0x58>)
 8004880:	6263      	str	r3, [r4, #36]	@ 0x24
 8004882:	4b0d      	ldr	r3, [pc, #52]	@ (80048b8 <std+0x5c>)
 8004884:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004886:	4b0d      	ldr	r3, [pc, #52]	@ (80048bc <std+0x60>)
 8004888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800488a:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <std+0x64>)
 800488c:	6323      	str	r3, [r4, #48]	@ 0x30
 800488e:	4b0d      	ldr	r3, [pc, #52]	@ (80048c4 <std+0x68>)
 8004890:	6224      	str	r4, [r4, #32]
 8004892:	429c      	cmp	r4, r3
 8004894:	d006      	beq.n	80048a4 <std+0x48>
 8004896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800489a:	4294      	cmp	r4, r2
 800489c:	d002      	beq.n	80048a4 <std+0x48>
 800489e:	33d0      	adds	r3, #208	@ 0xd0
 80048a0:	429c      	cmp	r4, r3
 80048a2:	d105      	bne.n	80048b0 <std+0x54>
 80048a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048ac:	f000 ba58 	b.w	8004d60 <__retarget_lock_init_recursive>
 80048b0:	bd10      	pop	{r4, pc}
 80048b2:	bf00      	nop
 80048b4:	08004ac1 	.word	0x08004ac1
 80048b8:	08004ae3 	.word	0x08004ae3
 80048bc:	08004b1b 	.word	0x08004b1b
 80048c0:	08004b3f 	.word	0x08004b3f
 80048c4:	20000128 	.word	0x20000128

080048c8 <stdio_exit_handler>:
 80048c8:	4a02      	ldr	r2, [pc, #8]	@ (80048d4 <stdio_exit_handler+0xc>)
 80048ca:	4903      	ldr	r1, [pc, #12]	@ (80048d8 <stdio_exit_handler+0x10>)
 80048cc:	4803      	ldr	r0, [pc, #12]	@ (80048dc <stdio_exit_handler+0x14>)
 80048ce:	f000 b869 	b.w	80049a4 <_fwalk_sglue>
 80048d2:	bf00      	nop
 80048d4:	20000014 	.word	0x20000014
 80048d8:	080055fd 	.word	0x080055fd
 80048dc:	20000024 	.word	0x20000024

080048e0 <cleanup_stdio>:
 80048e0:	6841      	ldr	r1, [r0, #4]
 80048e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004914 <cleanup_stdio+0x34>)
 80048e4:	4299      	cmp	r1, r3
 80048e6:	b510      	push	{r4, lr}
 80048e8:	4604      	mov	r4, r0
 80048ea:	d001      	beq.n	80048f0 <cleanup_stdio+0x10>
 80048ec:	f000 fe86 	bl	80055fc <_fflush_r>
 80048f0:	68a1      	ldr	r1, [r4, #8]
 80048f2:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <cleanup_stdio+0x38>)
 80048f4:	4299      	cmp	r1, r3
 80048f6:	d002      	beq.n	80048fe <cleanup_stdio+0x1e>
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 fe7f 	bl	80055fc <_fflush_r>
 80048fe:	68e1      	ldr	r1, [r4, #12]
 8004900:	4b06      	ldr	r3, [pc, #24]	@ (800491c <cleanup_stdio+0x3c>)
 8004902:	4299      	cmp	r1, r3
 8004904:	d004      	beq.n	8004910 <cleanup_stdio+0x30>
 8004906:	4620      	mov	r0, r4
 8004908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800490c:	f000 be76 	b.w	80055fc <_fflush_r>
 8004910:	bd10      	pop	{r4, pc}
 8004912:	bf00      	nop
 8004914:	20000128 	.word	0x20000128
 8004918:	20000190 	.word	0x20000190
 800491c:	200001f8 	.word	0x200001f8

08004920 <global_stdio_init.part.0>:
 8004920:	b510      	push	{r4, lr}
 8004922:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <global_stdio_init.part.0+0x30>)
 8004924:	4c0b      	ldr	r4, [pc, #44]	@ (8004954 <global_stdio_init.part.0+0x34>)
 8004926:	4a0c      	ldr	r2, [pc, #48]	@ (8004958 <global_stdio_init.part.0+0x38>)
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	4620      	mov	r0, r4
 800492c:	2200      	movs	r2, #0
 800492e:	2104      	movs	r1, #4
 8004930:	f7ff ff94 	bl	800485c <std>
 8004934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004938:	2201      	movs	r2, #1
 800493a:	2109      	movs	r1, #9
 800493c:	f7ff ff8e 	bl	800485c <std>
 8004940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004944:	2202      	movs	r2, #2
 8004946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494a:	2112      	movs	r1, #18
 800494c:	f7ff bf86 	b.w	800485c <std>
 8004950:	20000260 	.word	0x20000260
 8004954:	20000128 	.word	0x20000128
 8004958:	080048c9 	.word	0x080048c9

0800495c <__sfp_lock_acquire>:
 800495c:	4801      	ldr	r0, [pc, #4]	@ (8004964 <__sfp_lock_acquire+0x8>)
 800495e:	f000 ba00 	b.w	8004d62 <__retarget_lock_acquire_recursive>
 8004962:	bf00      	nop
 8004964:	20000269 	.word	0x20000269

08004968 <__sfp_lock_release>:
 8004968:	4801      	ldr	r0, [pc, #4]	@ (8004970 <__sfp_lock_release+0x8>)
 800496a:	f000 b9fb 	b.w	8004d64 <__retarget_lock_release_recursive>
 800496e:	bf00      	nop
 8004970:	20000269 	.word	0x20000269

08004974 <__sinit>:
 8004974:	b510      	push	{r4, lr}
 8004976:	4604      	mov	r4, r0
 8004978:	f7ff fff0 	bl	800495c <__sfp_lock_acquire>
 800497c:	6a23      	ldr	r3, [r4, #32]
 800497e:	b11b      	cbz	r3, 8004988 <__sinit+0x14>
 8004980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004984:	f7ff bff0 	b.w	8004968 <__sfp_lock_release>
 8004988:	4b04      	ldr	r3, [pc, #16]	@ (800499c <__sinit+0x28>)
 800498a:	6223      	str	r3, [r4, #32]
 800498c:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <__sinit+0x2c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f5      	bne.n	8004980 <__sinit+0xc>
 8004994:	f7ff ffc4 	bl	8004920 <global_stdio_init.part.0>
 8004998:	e7f2      	b.n	8004980 <__sinit+0xc>
 800499a:	bf00      	nop
 800499c:	080048e1 	.word	0x080048e1
 80049a0:	20000260 	.word	0x20000260

080049a4 <_fwalk_sglue>:
 80049a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a8:	4607      	mov	r7, r0
 80049aa:	4688      	mov	r8, r1
 80049ac:	4614      	mov	r4, r2
 80049ae:	2600      	movs	r6, #0
 80049b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049b4:	f1b9 0901 	subs.w	r9, r9, #1
 80049b8:	d505      	bpl.n	80049c6 <_fwalk_sglue+0x22>
 80049ba:	6824      	ldr	r4, [r4, #0]
 80049bc:	2c00      	cmp	r4, #0
 80049be:	d1f7      	bne.n	80049b0 <_fwalk_sglue+0xc>
 80049c0:	4630      	mov	r0, r6
 80049c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c6:	89ab      	ldrh	r3, [r5, #12]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d907      	bls.n	80049dc <_fwalk_sglue+0x38>
 80049cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049d0:	3301      	adds	r3, #1
 80049d2:	d003      	beq.n	80049dc <_fwalk_sglue+0x38>
 80049d4:	4629      	mov	r1, r5
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c0      	blx	r8
 80049da:	4306      	orrs	r6, r0
 80049dc:	3568      	adds	r5, #104	@ 0x68
 80049de:	e7e9      	b.n	80049b4 <_fwalk_sglue+0x10>

080049e0 <iprintf>:
 80049e0:	b40f      	push	{r0, r1, r2, r3}
 80049e2:	b507      	push	{r0, r1, r2, lr}
 80049e4:	4906      	ldr	r1, [pc, #24]	@ (8004a00 <iprintf+0x20>)
 80049e6:	ab04      	add	r3, sp, #16
 80049e8:	6808      	ldr	r0, [r1, #0]
 80049ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80049ee:	6881      	ldr	r1, [r0, #8]
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	f000 fadb 	bl	8004fac <_vfiprintf_r>
 80049f6:	b003      	add	sp, #12
 80049f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049fc:	b004      	add	sp, #16
 80049fe:	4770      	bx	lr
 8004a00:	20000020 	.word	0x20000020

08004a04 <_puts_r>:
 8004a04:	6a03      	ldr	r3, [r0, #32]
 8004a06:	b570      	push	{r4, r5, r6, lr}
 8004a08:	6884      	ldr	r4, [r0, #8]
 8004a0a:	4605      	mov	r5, r0
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	b90b      	cbnz	r3, 8004a14 <_puts_r+0x10>
 8004a10:	f7ff ffb0 	bl	8004974 <__sinit>
 8004a14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a16:	07db      	lsls	r3, r3, #31
 8004a18:	d405      	bmi.n	8004a26 <_puts_r+0x22>
 8004a1a:	89a3      	ldrh	r3, [r4, #12]
 8004a1c:	0598      	lsls	r0, r3, #22
 8004a1e:	d402      	bmi.n	8004a26 <_puts_r+0x22>
 8004a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a22:	f000 f99e 	bl	8004d62 <__retarget_lock_acquire_recursive>
 8004a26:	89a3      	ldrh	r3, [r4, #12]
 8004a28:	0719      	lsls	r1, r3, #28
 8004a2a:	d502      	bpl.n	8004a32 <_puts_r+0x2e>
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d135      	bne.n	8004a9e <_puts_r+0x9a>
 8004a32:	4621      	mov	r1, r4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 f8c5 	bl	8004bc4 <__swsetup_r>
 8004a3a:	b380      	cbz	r0, 8004a9e <_puts_r+0x9a>
 8004a3c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a42:	07da      	lsls	r2, r3, #31
 8004a44:	d405      	bmi.n	8004a52 <_puts_r+0x4e>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	059b      	lsls	r3, r3, #22
 8004a4a:	d402      	bmi.n	8004a52 <_puts_r+0x4e>
 8004a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a4e:	f000 f989 	bl	8004d64 <__retarget_lock_release_recursive>
 8004a52:	4628      	mov	r0, r5
 8004a54:	bd70      	pop	{r4, r5, r6, pc}
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da04      	bge.n	8004a64 <_puts_r+0x60>
 8004a5a:	69a2      	ldr	r2, [r4, #24]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	dc17      	bgt.n	8004a90 <_puts_r+0x8c>
 8004a60:	290a      	cmp	r1, #10
 8004a62:	d015      	beq.n	8004a90 <_puts_r+0x8c>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	6022      	str	r2, [r4, #0]
 8004a6a:	7019      	strb	r1, [r3, #0]
 8004a6c:	68a3      	ldr	r3, [r4, #8]
 8004a6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a72:	3b01      	subs	r3, #1
 8004a74:	60a3      	str	r3, [r4, #8]
 8004a76:	2900      	cmp	r1, #0
 8004a78:	d1ed      	bne.n	8004a56 <_puts_r+0x52>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	da11      	bge.n	8004aa2 <_puts_r+0x9e>
 8004a7e:	4622      	mov	r2, r4
 8004a80:	210a      	movs	r1, #10
 8004a82:	4628      	mov	r0, r5
 8004a84:	f000 f85f 	bl	8004b46 <__swbuf_r>
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d0d7      	beq.n	8004a3c <_puts_r+0x38>
 8004a8c:	250a      	movs	r5, #10
 8004a8e:	e7d7      	b.n	8004a40 <_puts_r+0x3c>
 8004a90:	4622      	mov	r2, r4
 8004a92:	4628      	mov	r0, r5
 8004a94:	f000 f857 	bl	8004b46 <__swbuf_r>
 8004a98:	3001      	adds	r0, #1
 8004a9a:	d1e7      	bne.n	8004a6c <_puts_r+0x68>
 8004a9c:	e7ce      	b.n	8004a3c <_puts_r+0x38>
 8004a9e:	3e01      	subs	r6, #1
 8004aa0:	e7e4      	b.n	8004a6c <_puts_r+0x68>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	6022      	str	r2, [r4, #0]
 8004aa8:	220a      	movs	r2, #10
 8004aaa:	701a      	strb	r2, [r3, #0]
 8004aac:	e7ee      	b.n	8004a8c <_puts_r+0x88>
	...

08004ab0 <puts>:
 8004ab0:	4b02      	ldr	r3, [pc, #8]	@ (8004abc <puts+0xc>)
 8004ab2:	4601      	mov	r1, r0
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	f7ff bfa5 	b.w	8004a04 <_puts_r>
 8004aba:	bf00      	nop
 8004abc:	20000020 	.word	0x20000020

08004ac0 <__sread>:
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac8:	f000 f8fc 	bl	8004cc4 <_read_r>
 8004acc:	2800      	cmp	r0, #0
 8004ace:	bfab      	itete	ge
 8004ad0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004ad2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ad4:	181b      	addge	r3, r3, r0
 8004ad6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ada:	bfac      	ite	ge
 8004adc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ade:	81a3      	strhlt	r3, [r4, #12]
 8004ae0:	bd10      	pop	{r4, pc}

08004ae2 <__swrite>:
 8004ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae6:	461f      	mov	r7, r3
 8004ae8:	898b      	ldrh	r3, [r1, #12]
 8004aea:	05db      	lsls	r3, r3, #23
 8004aec:	4605      	mov	r5, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	4616      	mov	r6, r2
 8004af2:	d505      	bpl.n	8004b00 <__swrite+0x1e>
 8004af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af8:	2302      	movs	r3, #2
 8004afa:	2200      	movs	r2, #0
 8004afc:	f000 f8d0 	bl	8004ca0 <_lseek_r>
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	4632      	mov	r2, r6
 8004b0e:	463b      	mov	r3, r7
 8004b10:	4628      	mov	r0, r5
 8004b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b16:	f000 b8e7 	b.w	8004ce8 <_write_r>

08004b1a <__sseek>:
 8004b1a:	b510      	push	{r4, lr}
 8004b1c:	460c      	mov	r4, r1
 8004b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b22:	f000 f8bd 	bl	8004ca0 <_lseek_r>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	bf15      	itete	ne
 8004b2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b36:	81a3      	strheq	r3, [r4, #12]
 8004b38:	bf18      	it	ne
 8004b3a:	81a3      	strhne	r3, [r4, #12]
 8004b3c:	bd10      	pop	{r4, pc}

08004b3e <__sclose>:
 8004b3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b42:	f000 b89d 	b.w	8004c80 <_close_r>

08004b46 <__swbuf_r>:
 8004b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b48:	460e      	mov	r6, r1
 8004b4a:	4614      	mov	r4, r2
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	b118      	cbz	r0, 8004b58 <__swbuf_r+0x12>
 8004b50:	6a03      	ldr	r3, [r0, #32]
 8004b52:	b90b      	cbnz	r3, 8004b58 <__swbuf_r+0x12>
 8004b54:	f7ff ff0e 	bl	8004974 <__sinit>
 8004b58:	69a3      	ldr	r3, [r4, #24]
 8004b5a:	60a3      	str	r3, [r4, #8]
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	071a      	lsls	r2, r3, #28
 8004b60:	d501      	bpl.n	8004b66 <__swbuf_r+0x20>
 8004b62:	6923      	ldr	r3, [r4, #16]
 8004b64:	b943      	cbnz	r3, 8004b78 <__swbuf_r+0x32>
 8004b66:	4621      	mov	r1, r4
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f000 f82b 	bl	8004bc4 <__swsetup_r>
 8004b6e:	b118      	cbz	r0, 8004b78 <__swbuf_r+0x32>
 8004b70:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004b74:	4638      	mov	r0, r7
 8004b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	6922      	ldr	r2, [r4, #16]
 8004b7c:	1a98      	subs	r0, r3, r2
 8004b7e:	6963      	ldr	r3, [r4, #20]
 8004b80:	b2f6      	uxtb	r6, r6
 8004b82:	4283      	cmp	r3, r0
 8004b84:	4637      	mov	r7, r6
 8004b86:	dc05      	bgt.n	8004b94 <__swbuf_r+0x4e>
 8004b88:	4621      	mov	r1, r4
 8004b8a:	4628      	mov	r0, r5
 8004b8c:	f000 fd36 	bl	80055fc <_fflush_r>
 8004b90:	2800      	cmp	r0, #0
 8004b92:	d1ed      	bne.n	8004b70 <__swbuf_r+0x2a>
 8004b94:	68a3      	ldr	r3, [r4, #8]
 8004b96:	3b01      	subs	r3, #1
 8004b98:	60a3      	str	r3, [r4, #8]
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	6022      	str	r2, [r4, #0]
 8004ba0:	701e      	strb	r6, [r3, #0]
 8004ba2:	6962      	ldr	r2, [r4, #20]
 8004ba4:	1c43      	adds	r3, r0, #1
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d004      	beq.n	8004bb4 <__swbuf_r+0x6e>
 8004baa:	89a3      	ldrh	r3, [r4, #12]
 8004bac:	07db      	lsls	r3, r3, #31
 8004bae:	d5e1      	bpl.n	8004b74 <__swbuf_r+0x2e>
 8004bb0:	2e0a      	cmp	r6, #10
 8004bb2:	d1df      	bne.n	8004b74 <__swbuf_r+0x2e>
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f000 fd20 	bl	80055fc <_fflush_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d0d9      	beq.n	8004b74 <__swbuf_r+0x2e>
 8004bc0:	e7d6      	b.n	8004b70 <__swbuf_r+0x2a>
	...

08004bc4 <__swsetup_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4b29      	ldr	r3, [pc, #164]	@ (8004c6c <__swsetup_r+0xa8>)
 8004bc8:	4605      	mov	r5, r0
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	460c      	mov	r4, r1
 8004bce:	b118      	cbz	r0, 8004bd8 <__swsetup_r+0x14>
 8004bd0:	6a03      	ldr	r3, [r0, #32]
 8004bd2:	b90b      	cbnz	r3, 8004bd8 <__swsetup_r+0x14>
 8004bd4:	f7ff fece 	bl	8004974 <__sinit>
 8004bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bdc:	0719      	lsls	r1, r3, #28
 8004bde:	d422      	bmi.n	8004c26 <__swsetup_r+0x62>
 8004be0:	06da      	lsls	r2, r3, #27
 8004be2:	d407      	bmi.n	8004bf4 <__swsetup_r+0x30>
 8004be4:	2209      	movs	r2, #9
 8004be6:	602a      	str	r2, [r5, #0]
 8004be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bec:	81a3      	strh	r3, [r4, #12]
 8004bee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bf2:	e033      	b.n	8004c5c <__swsetup_r+0x98>
 8004bf4:	0758      	lsls	r0, r3, #29
 8004bf6:	d512      	bpl.n	8004c1e <__swsetup_r+0x5a>
 8004bf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bfa:	b141      	cbz	r1, 8004c0e <__swsetup_r+0x4a>
 8004bfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d002      	beq.n	8004c0a <__swsetup_r+0x46>
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 f8af 	bl	8004d68 <_free_r>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c0e:	89a3      	ldrh	r3, [r4, #12]
 8004c10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004c14:	81a3      	strh	r3, [r4, #12]
 8004c16:	2300      	movs	r3, #0
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	f043 0308 	orr.w	r3, r3, #8
 8004c24:	81a3      	strh	r3, [r4, #12]
 8004c26:	6923      	ldr	r3, [r4, #16]
 8004c28:	b94b      	cbnz	r3, 8004c3e <__swsetup_r+0x7a>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c34:	d003      	beq.n	8004c3e <__swsetup_r+0x7a>
 8004c36:	4621      	mov	r1, r4
 8004c38:	4628      	mov	r0, r5
 8004c3a:	f000 fd2d 	bl	8005698 <__smakebuf_r>
 8004c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c42:	f013 0201 	ands.w	r2, r3, #1
 8004c46:	d00a      	beq.n	8004c5e <__swsetup_r+0x9a>
 8004c48:	2200      	movs	r2, #0
 8004c4a:	60a2      	str	r2, [r4, #8]
 8004c4c:	6962      	ldr	r2, [r4, #20]
 8004c4e:	4252      	negs	r2, r2
 8004c50:	61a2      	str	r2, [r4, #24]
 8004c52:	6922      	ldr	r2, [r4, #16]
 8004c54:	b942      	cbnz	r2, 8004c68 <__swsetup_r+0xa4>
 8004c56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004c5a:	d1c5      	bne.n	8004be8 <__swsetup_r+0x24>
 8004c5c:	bd38      	pop	{r3, r4, r5, pc}
 8004c5e:	0799      	lsls	r1, r3, #30
 8004c60:	bf58      	it	pl
 8004c62:	6962      	ldrpl	r2, [r4, #20]
 8004c64:	60a2      	str	r2, [r4, #8]
 8004c66:	e7f4      	b.n	8004c52 <__swsetup_r+0x8e>
 8004c68:	2000      	movs	r0, #0
 8004c6a:	e7f7      	b.n	8004c5c <__swsetup_r+0x98>
 8004c6c:	20000020 	.word	0x20000020

08004c70 <memset>:
 8004c70:	4402      	add	r2, r0
 8004c72:	4603      	mov	r3, r0
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d100      	bne.n	8004c7a <memset+0xa>
 8004c78:	4770      	bx	lr
 8004c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7e:	e7f9      	b.n	8004c74 <memset+0x4>

08004c80 <_close_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	4d06      	ldr	r5, [pc, #24]	@ (8004c9c <_close_r+0x1c>)
 8004c84:	2300      	movs	r3, #0
 8004c86:	4604      	mov	r4, r0
 8004c88:	4608      	mov	r0, r1
 8004c8a:	602b      	str	r3, [r5, #0]
 8004c8c:	f7fb ff15 	bl	8000aba <_close>
 8004c90:	1c43      	adds	r3, r0, #1
 8004c92:	d102      	bne.n	8004c9a <_close_r+0x1a>
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	b103      	cbz	r3, 8004c9a <_close_r+0x1a>
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	bd38      	pop	{r3, r4, r5, pc}
 8004c9c:	20000264 	.word	0x20000264

08004ca0 <_lseek_r>:
 8004ca0:	b538      	push	{r3, r4, r5, lr}
 8004ca2:	4d07      	ldr	r5, [pc, #28]	@ (8004cc0 <_lseek_r+0x20>)
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	4608      	mov	r0, r1
 8004ca8:	4611      	mov	r1, r2
 8004caa:	2200      	movs	r2, #0
 8004cac:	602a      	str	r2, [r5, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f7fb ff2a 	bl	8000b08 <_lseek>
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d102      	bne.n	8004cbe <_lseek_r+0x1e>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	b103      	cbz	r3, 8004cbe <_lseek_r+0x1e>
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
 8004cc0:	20000264 	.word	0x20000264

08004cc4 <_read_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4d07      	ldr	r5, [pc, #28]	@ (8004ce4 <_read_r+0x20>)
 8004cc8:	4604      	mov	r4, r0
 8004cca:	4608      	mov	r0, r1
 8004ccc:	4611      	mov	r1, r2
 8004cce:	2200      	movs	r2, #0
 8004cd0:	602a      	str	r2, [r5, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f7fb feb8 	bl	8000a48 <_read>
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d102      	bne.n	8004ce2 <_read_r+0x1e>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	b103      	cbz	r3, 8004ce2 <_read_r+0x1e>
 8004ce0:	6023      	str	r3, [r4, #0]
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000264 	.word	0x20000264

08004ce8 <_write_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4d07      	ldr	r5, [pc, #28]	@ (8004d08 <_write_r+0x20>)
 8004cec:	4604      	mov	r4, r0
 8004cee:	4608      	mov	r0, r1
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	602a      	str	r2, [r5, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fb fec3 	bl	8000a82 <_write>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_write_r+0x1e>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_write_r+0x1e>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	20000264 	.word	0x20000264

08004d0c <__errno>:
 8004d0c:	4b01      	ldr	r3, [pc, #4]	@ (8004d14 <__errno+0x8>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	20000020 	.word	0x20000020

08004d18 <__libc_init_array>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004d50 <__libc_init_array+0x38>)
 8004d1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004d54 <__libc_init_array+0x3c>)
 8004d1e:	1b64      	subs	r4, r4, r5
 8004d20:	10a4      	asrs	r4, r4, #2
 8004d22:	2600      	movs	r6, #0
 8004d24:	42a6      	cmp	r6, r4
 8004d26:	d109      	bne.n	8004d3c <__libc_init_array+0x24>
 8004d28:	4d0b      	ldr	r5, [pc, #44]	@ (8004d58 <__libc_init_array+0x40>)
 8004d2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004d5c <__libc_init_array+0x44>)
 8004d2c:	f000 fd22 	bl	8005774 <_init>
 8004d30:	1b64      	subs	r4, r4, r5
 8004d32:	10a4      	asrs	r4, r4, #2
 8004d34:	2600      	movs	r6, #0
 8004d36:	42a6      	cmp	r6, r4
 8004d38:	d105      	bne.n	8004d46 <__libc_init_array+0x2e>
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d40:	4798      	blx	r3
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7ee      	b.n	8004d24 <__libc_init_array+0xc>
 8004d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4a:	4798      	blx	r3
 8004d4c:	3601      	adds	r6, #1
 8004d4e:	e7f2      	b.n	8004d36 <__libc_init_array+0x1e>
 8004d50:	08005928 	.word	0x08005928
 8004d54:	08005928 	.word	0x08005928
 8004d58:	08005928 	.word	0x08005928
 8004d5c:	0800592c 	.word	0x0800592c

08004d60 <__retarget_lock_init_recursive>:
 8004d60:	4770      	bx	lr

08004d62 <__retarget_lock_acquire_recursive>:
 8004d62:	4770      	bx	lr

08004d64 <__retarget_lock_release_recursive>:
 8004d64:	4770      	bx	lr
	...

08004d68 <_free_r>:
 8004d68:	b538      	push	{r3, r4, r5, lr}
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	2900      	cmp	r1, #0
 8004d6e:	d041      	beq.n	8004df4 <_free_r+0x8c>
 8004d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d74:	1f0c      	subs	r4, r1, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bfb8      	it	lt
 8004d7a:	18e4      	addlt	r4, r4, r3
 8004d7c:	f000 f8e0 	bl	8004f40 <__malloc_lock>
 8004d80:	4a1d      	ldr	r2, [pc, #116]	@ (8004df8 <_free_r+0x90>)
 8004d82:	6813      	ldr	r3, [r2, #0]
 8004d84:	b933      	cbnz	r3, 8004d94 <_free_r+0x2c>
 8004d86:	6063      	str	r3, [r4, #4]
 8004d88:	6014      	str	r4, [r2, #0]
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d90:	f000 b8dc 	b.w	8004f4c <__malloc_unlock>
 8004d94:	42a3      	cmp	r3, r4
 8004d96:	d908      	bls.n	8004daa <_free_r+0x42>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	1821      	adds	r1, r4, r0
 8004d9c:	428b      	cmp	r3, r1
 8004d9e:	bf01      	itttt	eq
 8004da0:	6819      	ldreq	r1, [r3, #0]
 8004da2:	685b      	ldreq	r3, [r3, #4]
 8004da4:	1809      	addeq	r1, r1, r0
 8004da6:	6021      	streq	r1, [r4, #0]
 8004da8:	e7ed      	b.n	8004d86 <_free_r+0x1e>
 8004daa:	461a      	mov	r2, r3
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	b10b      	cbz	r3, 8004db4 <_free_r+0x4c>
 8004db0:	42a3      	cmp	r3, r4
 8004db2:	d9fa      	bls.n	8004daa <_free_r+0x42>
 8004db4:	6811      	ldr	r1, [r2, #0]
 8004db6:	1850      	adds	r0, r2, r1
 8004db8:	42a0      	cmp	r0, r4
 8004dba:	d10b      	bne.n	8004dd4 <_free_r+0x6c>
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	4401      	add	r1, r0
 8004dc0:	1850      	adds	r0, r2, r1
 8004dc2:	4283      	cmp	r3, r0
 8004dc4:	6011      	str	r1, [r2, #0]
 8004dc6:	d1e0      	bne.n	8004d8a <_free_r+0x22>
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	6053      	str	r3, [r2, #4]
 8004dce:	4408      	add	r0, r1
 8004dd0:	6010      	str	r0, [r2, #0]
 8004dd2:	e7da      	b.n	8004d8a <_free_r+0x22>
 8004dd4:	d902      	bls.n	8004ddc <_free_r+0x74>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	e7d6      	b.n	8004d8a <_free_r+0x22>
 8004ddc:	6820      	ldr	r0, [r4, #0]
 8004dde:	1821      	adds	r1, r4, r0
 8004de0:	428b      	cmp	r3, r1
 8004de2:	bf04      	itt	eq
 8004de4:	6819      	ldreq	r1, [r3, #0]
 8004de6:	685b      	ldreq	r3, [r3, #4]
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	bf04      	itt	eq
 8004dec:	1809      	addeq	r1, r1, r0
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	6054      	str	r4, [r2, #4]
 8004df2:	e7ca      	b.n	8004d8a <_free_r+0x22>
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
 8004df6:	bf00      	nop
 8004df8:	20000270 	.word	0x20000270

08004dfc <sbrk_aligned>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8004e3c <sbrk_aligned+0x40>)
 8004e00:	460c      	mov	r4, r1
 8004e02:	6831      	ldr	r1, [r6, #0]
 8004e04:	4605      	mov	r5, r0
 8004e06:	b911      	cbnz	r1, 8004e0e <sbrk_aligned+0x12>
 8004e08:	f000 fca4 	bl	8005754 <_sbrk_r>
 8004e0c:	6030      	str	r0, [r6, #0]
 8004e0e:	4621      	mov	r1, r4
 8004e10:	4628      	mov	r0, r5
 8004e12:	f000 fc9f 	bl	8005754 <_sbrk_r>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d103      	bne.n	8004e22 <sbrk_aligned+0x26>
 8004e1a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e1e:	4620      	mov	r0, r4
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
 8004e22:	1cc4      	adds	r4, r0, #3
 8004e24:	f024 0403 	bic.w	r4, r4, #3
 8004e28:	42a0      	cmp	r0, r4
 8004e2a:	d0f8      	beq.n	8004e1e <sbrk_aligned+0x22>
 8004e2c:	1a21      	subs	r1, r4, r0
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f000 fc90 	bl	8005754 <_sbrk_r>
 8004e34:	3001      	adds	r0, #1
 8004e36:	d1f2      	bne.n	8004e1e <sbrk_aligned+0x22>
 8004e38:	e7ef      	b.n	8004e1a <sbrk_aligned+0x1e>
 8004e3a:	bf00      	nop
 8004e3c:	2000026c 	.word	0x2000026c

08004e40 <_malloc_r>:
 8004e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e44:	1ccd      	adds	r5, r1, #3
 8004e46:	f025 0503 	bic.w	r5, r5, #3
 8004e4a:	3508      	adds	r5, #8
 8004e4c:	2d0c      	cmp	r5, #12
 8004e4e:	bf38      	it	cc
 8004e50:	250c      	movcc	r5, #12
 8004e52:	2d00      	cmp	r5, #0
 8004e54:	4606      	mov	r6, r0
 8004e56:	db01      	blt.n	8004e5c <_malloc_r+0x1c>
 8004e58:	42a9      	cmp	r1, r5
 8004e5a:	d904      	bls.n	8004e66 <_malloc_r+0x26>
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	6033      	str	r3, [r6, #0]
 8004e60:	2000      	movs	r0, #0
 8004e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f3c <_malloc_r+0xfc>
 8004e6a:	f000 f869 	bl	8004f40 <__malloc_lock>
 8004e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e72:	461c      	mov	r4, r3
 8004e74:	bb44      	cbnz	r4, 8004ec8 <_malloc_r+0x88>
 8004e76:	4629      	mov	r1, r5
 8004e78:	4630      	mov	r0, r6
 8004e7a:	f7ff ffbf 	bl	8004dfc <sbrk_aligned>
 8004e7e:	1c43      	adds	r3, r0, #1
 8004e80:	4604      	mov	r4, r0
 8004e82:	d158      	bne.n	8004f36 <_malloc_r+0xf6>
 8004e84:	f8d8 4000 	ldr.w	r4, [r8]
 8004e88:	4627      	mov	r7, r4
 8004e8a:	2f00      	cmp	r7, #0
 8004e8c:	d143      	bne.n	8004f16 <_malloc_r+0xd6>
 8004e8e:	2c00      	cmp	r4, #0
 8004e90:	d04b      	beq.n	8004f2a <_malloc_r+0xea>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	4639      	mov	r1, r7
 8004e96:	4630      	mov	r0, r6
 8004e98:	eb04 0903 	add.w	r9, r4, r3
 8004e9c:	f000 fc5a 	bl	8005754 <_sbrk_r>
 8004ea0:	4581      	cmp	r9, r0
 8004ea2:	d142      	bne.n	8004f2a <_malloc_r+0xea>
 8004ea4:	6821      	ldr	r1, [r4, #0]
 8004ea6:	1a6d      	subs	r5, r5, r1
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	4630      	mov	r0, r6
 8004eac:	f7ff ffa6 	bl	8004dfc <sbrk_aligned>
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d03a      	beq.n	8004f2a <_malloc_r+0xea>
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	442b      	add	r3, r5
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	f8d8 3000 	ldr.w	r3, [r8]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	bb62      	cbnz	r2, 8004f1c <_malloc_r+0xdc>
 8004ec2:	f8c8 7000 	str.w	r7, [r8]
 8004ec6:	e00f      	b.n	8004ee8 <_malloc_r+0xa8>
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	1b52      	subs	r2, r2, r5
 8004ecc:	d420      	bmi.n	8004f10 <_malloc_r+0xd0>
 8004ece:	2a0b      	cmp	r2, #11
 8004ed0:	d917      	bls.n	8004f02 <_malloc_r+0xc2>
 8004ed2:	1961      	adds	r1, r4, r5
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	6025      	str	r5, [r4, #0]
 8004ed8:	bf18      	it	ne
 8004eda:	6059      	strne	r1, [r3, #4]
 8004edc:	6863      	ldr	r3, [r4, #4]
 8004ede:	bf08      	it	eq
 8004ee0:	f8c8 1000 	streq.w	r1, [r8]
 8004ee4:	5162      	str	r2, [r4, r5]
 8004ee6:	604b      	str	r3, [r1, #4]
 8004ee8:	4630      	mov	r0, r6
 8004eea:	f000 f82f 	bl	8004f4c <__malloc_unlock>
 8004eee:	f104 000b 	add.w	r0, r4, #11
 8004ef2:	1d23      	adds	r3, r4, #4
 8004ef4:	f020 0007 	bic.w	r0, r0, #7
 8004ef8:	1ac2      	subs	r2, r0, r3
 8004efa:	bf1c      	itt	ne
 8004efc:	1a1b      	subne	r3, r3, r0
 8004efe:	50a3      	strne	r3, [r4, r2]
 8004f00:	e7af      	b.n	8004e62 <_malloc_r+0x22>
 8004f02:	6862      	ldr	r2, [r4, #4]
 8004f04:	42a3      	cmp	r3, r4
 8004f06:	bf0c      	ite	eq
 8004f08:	f8c8 2000 	streq.w	r2, [r8]
 8004f0c:	605a      	strne	r2, [r3, #4]
 8004f0e:	e7eb      	b.n	8004ee8 <_malloc_r+0xa8>
 8004f10:	4623      	mov	r3, r4
 8004f12:	6864      	ldr	r4, [r4, #4]
 8004f14:	e7ae      	b.n	8004e74 <_malloc_r+0x34>
 8004f16:	463c      	mov	r4, r7
 8004f18:	687f      	ldr	r7, [r7, #4]
 8004f1a:	e7b6      	b.n	8004e8a <_malloc_r+0x4a>
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	d1fb      	bne.n	8004f1c <_malloc_r+0xdc>
 8004f24:	2300      	movs	r3, #0
 8004f26:	6053      	str	r3, [r2, #4]
 8004f28:	e7de      	b.n	8004ee8 <_malloc_r+0xa8>
 8004f2a:	230c      	movs	r3, #12
 8004f2c:	6033      	str	r3, [r6, #0]
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 f80c 	bl	8004f4c <__malloc_unlock>
 8004f34:	e794      	b.n	8004e60 <_malloc_r+0x20>
 8004f36:	6005      	str	r5, [r0, #0]
 8004f38:	e7d6      	b.n	8004ee8 <_malloc_r+0xa8>
 8004f3a:	bf00      	nop
 8004f3c:	20000270 	.word	0x20000270

08004f40 <__malloc_lock>:
 8004f40:	4801      	ldr	r0, [pc, #4]	@ (8004f48 <__malloc_lock+0x8>)
 8004f42:	f7ff bf0e 	b.w	8004d62 <__retarget_lock_acquire_recursive>
 8004f46:	bf00      	nop
 8004f48:	20000268 	.word	0x20000268

08004f4c <__malloc_unlock>:
 8004f4c:	4801      	ldr	r0, [pc, #4]	@ (8004f54 <__malloc_unlock+0x8>)
 8004f4e:	f7ff bf09 	b.w	8004d64 <__retarget_lock_release_recursive>
 8004f52:	bf00      	nop
 8004f54:	20000268 	.word	0x20000268

08004f58 <__sfputc_r>:
 8004f58:	6893      	ldr	r3, [r2, #8]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	b410      	push	{r4}
 8004f60:	6093      	str	r3, [r2, #8]
 8004f62:	da08      	bge.n	8004f76 <__sfputc_r+0x1e>
 8004f64:	6994      	ldr	r4, [r2, #24]
 8004f66:	42a3      	cmp	r3, r4
 8004f68:	db01      	blt.n	8004f6e <__sfputc_r+0x16>
 8004f6a:	290a      	cmp	r1, #10
 8004f6c:	d103      	bne.n	8004f76 <__sfputc_r+0x1e>
 8004f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f72:	f7ff bde8 	b.w	8004b46 <__swbuf_r>
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	1c58      	adds	r0, r3, #1
 8004f7a:	6010      	str	r0, [r2, #0]
 8004f7c:	7019      	strb	r1, [r3, #0]
 8004f7e:	4608      	mov	r0, r1
 8004f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <__sfputs_r>:
 8004f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f88:	4606      	mov	r6, r0
 8004f8a:	460f      	mov	r7, r1
 8004f8c:	4614      	mov	r4, r2
 8004f8e:	18d5      	adds	r5, r2, r3
 8004f90:	42ac      	cmp	r4, r5
 8004f92:	d101      	bne.n	8004f98 <__sfputs_r+0x12>
 8004f94:	2000      	movs	r0, #0
 8004f96:	e007      	b.n	8004fa8 <__sfputs_r+0x22>
 8004f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f9c:	463a      	mov	r2, r7
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	f7ff ffda 	bl	8004f58 <__sfputc_r>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d1f3      	bne.n	8004f90 <__sfputs_r+0xa>
 8004fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fac <_vfiprintf_r>:
 8004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb0:	460d      	mov	r5, r1
 8004fb2:	b09d      	sub	sp, #116	@ 0x74
 8004fb4:	4614      	mov	r4, r2
 8004fb6:	4698      	mov	r8, r3
 8004fb8:	4606      	mov	r6, r0
 8004fba:	b118      	cbz	r0, 8004fc4 <_vfiprintf_r+0x18>
 8004fbc:	6a03      	ldr	r3, [r0, #32]
 8004fbe:	b90b      	cbnz	r3, 8004fc4 <_vfiprintf_r+0x18>
 8004fc0:	f7ff fcd8 	bl	8004974 <__sinit>
 8004fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fc6:	07d9      	lsls	r1, r3, #31
 8004fc8:	d405      	bmi.n	8004fd6 <_vfiprintf_r+0x2a>
 8004fca:	89ab      	ldrh	r3, [r5, #12]
 8004fcc:	059a      	lsls	r2, r3, #22
 8004fce:	d402      	bmi.n	8004fd6 <_vfiprintf_r+0x2a>
 8004fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fd2:	f7ff fec6 	bl	8004d62 <__retarget_lock_acquire_recursive>
 8004fd6:	89ab      	ldrh	r3, [r5, #12]
 8004fd8:	071b      	lsls	r3, r3, #28
 8004fda:	d501      	bpl.n	8004fe0 <_vfiprintf_r+0x34>
 8004fdc:	692b      	ldr	r3, [r5, #16]
 8004fde:	b99b      	cbnz	r3, 8005008 <_vfiprintf_r+0x5c>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f7ff fdee 	bl	8004bc4 <__swsetup_r>
 8004fe8:	b170      	cbz	r0, 8005008 <_vfiprintf_r+0x5c>
 8004fea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fec:	07dc      	lsls	r4, r3, #31
 8004fee:	d504      	bpl.n	8004ffa <_vfiprintf_r+0x4e>
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ff4:	b01d      	add	sp, #116	@ 0x74
 8004ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffa:	89ab      	ldrh	r3, [r5, #12]
 8004ffc:	0598      	lsls	r0, r3, #22
 8004ffe:	d4f7      	bmi.n	8004ff0 <_vfiprintf_r+0x44>
 8005000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005002:	f7ff feaf 	bl	8004d64 <__retarget_lock_release_recursive>
 8005006:	e7f3      	b.n	8004ff0 <_vfiprintf_r+0x44>
 8005008:	2300      	movs	r3, #0
 800500a:	9309      	str	r3, [sp, #36]	@ 0x24
 800500c:	2320      	movs	r3, #32
 800500e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005012:	f8cd 800c 	str.w	r8, [sp, #12]
 8005016:	2330      	movs	r3, #48	@ 0x30
 8005018:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051c8 <_vfiprintf_r+0x21c>
 800501c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005020:	f04f 0901 	mov.w	r9, #1
 8005024:	4623      	mov	r3, r4
 8005026:	469a      	mov	sl, r3
 8005028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800502c:	b10a      	cbz	r2, 8005032 <_vfiprintf_r+0x86>
 800502e:	2a25      	cmp	r2, #37	@ 0x25
 8005030:	d1f9      	bne.n	8005026 <_vfiprintf_r+0x7a>
 8005032:	ebba 0b04 	subs.w	fp, sl, r4
 8005036:	d00b      	beq.n	8005050 <_vfiprintf_r+0xa4>
 8005038:	465b      	mov	r3, fp
 800503a:	4622      	mov	r2, r4
 800503c:	4629      	mov	r1, r5
 800503e:	4630      	mov	r0, r6
 8005040:	f7ff ffa1 	bl	8004f86 <__sfputs_r>
 8005044:	3001      	adds	r0, #1
 8005046:	f000 80a7 	beq.w	8005198 <_vfiprintf_r+0x1ec>
 800504a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800504c:	445a      	add	r2, fp
 800504e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005050:	f89a 3000 	ldrb.w	r3, [sl]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 809f 	beq.w	8005198 <_vfiprintf_r+0x1ec>
 800505a:	2300      	movs	r3, #0
 800505c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005064:	f10a 0a01 	add.w	sl, sl, #1
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	9307      	str	r3, [sp, #28]
 800506c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005070:	931a      	str	r3, [sp, #104]	@ 0x68
 8005072:	4654      	mov	r4, sl
 8005074:	2205      	movs	r2, #5
 8005076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800507a:	4853      	ldr	r0, [pc, #332]	@ (80051c8 <_vfiprintf_r+0x21c>)
 800507c:	f7fb f880 	bl	8000180 <memchr>
 8005080:	9a04      	ldr	r2, [sp, #16]
 8005082:	b9d8      	cbnz	r0, 80050bc <_vfiprintf_r+0x110>
 8005084:	06d1      	lsls	r1, r2, #27
 8005086:	bf44      	itt	mi
 8005088:	2320      	movmi	r3, #32
 800508a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800508e:	0713      	lsls	r3, r2, #28
 8005090:	bf44      	itt	mi
 8005092:	232b      	movmi	r3, #43	@ 0x2b
 8005094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005098:	f89a 3000 	ldrb.w	r3, [sl]
 800509c:	2b2a      	cmp	r3, #42	@ 0x2a
 800509e:	d015      	beq.n	80050cc <_vfiprintf_r+0x120>
 80050a0:	9a07      	ldr	r2, [sp, #28]
 80050a2:	4654      	mov	r4, sl
 80050a4:	2000      	movs	r0, #0
 80050a6:	f04f 0c0a 	mov.w	ip, #10
 80050aa:	4621      	mov	r1, r4
 80050ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050b0:	3b30      	subs	r3, #48	@ 0x30
 80050b2:	2b09      	cmp	r3, #9
 80050b4:	d94b      	bls.n	800514e <_vfiprintf_r+0x1a2>
 80050b6:	b1b0      	cbz	r0, 80050e6 <_vfiprintf_r+0x13a>
 80050b8:	9207      	str	r2, [sp, #28]
 80050ba:	e014      	b.n	80050e6 <_vfiprintf_r+0x13a>
 80050bc:	eba0 0308 	sub.w	r3, r0, r8
 80050c0:	fa09 f303 	lsl.w	r3, r9, r3
 80050c4:	4313      	orrs	r3, r2
 80050c6:	9304      	str	r3, [sp, #16]
 80050c8:	46a2      	mov	sl, r4
 80050ca:	e7d2      	b.n	8005072 <_vfiprintf_r+0xc6>
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	1d19      	adds	r1, r3, #4
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	9103      	str	r1, [sp, #12]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bfbb      	ittet	lt
 80050d8:	425b      	neglt	r3, r3
 80050da:	f042 0202 	orrlt.w	r2, r2, #2
 80050de:	9307      	strge	r3, [sp, #28]
 80050e0:	9307      	strlt	r3, [sp, #28]
 80050e2:	bfb8      	it	lt
 80050e4:	9204      	strlt	r2, [sp, #16]
 80050e6:	7823      	ldrb	r3, [r4, #0]
 80050e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80050ea:	d10a      	bne.n	8005102 <_vfiprintf_r+0x156>
 80050ec:	7863      	ldrb	r3, [r4, #1]
 80050ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80050f0:	d132      	bne.n	8005158 <_vfiprintf_r+0x1ac>
 80050f2:	9b03      	ldr	r3, [sp, #12]
 80050f4:	1d1a      	adds	r2, r3, #4
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	9203      	str	r2, [sp, #12]
 80050fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050fe:	3402      	adds	r4, #2
 8005100:	9305      	str	r3, [sp, #20]
 8005102:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051d8 <_vfiprintf_r+0x22c>
 8005106:	7821      	ldrb	r1, [r4, #0]
 8005108:	2203      	movs	r2, #3
 800510a:	4650      	mov	r0, sl
 800510c:	f7fb f838 	bl	8000180 <memchr>
 8005110:	b138      	cbz	r0, 8005122 <_vfiprintf_r+0x176>
 8005112:	9b04      	ldr	r3, [sp, #16]
 8005114:	eba0 000a 	sub.w	r0, r0, sl
 8005118:	2240      	movs	r2, #64	@ 0x40
 800511a:	4082      	lsls	r2, r0
 800511c:	4313      	orrs	r3, r2
 800511e:	3401      	adds	r4, #1
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005126:	4829      	ldr	r0, [pc, #164]	@ (80051cc <_vfiprintf_r+0x220>)
 8005128:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800512c:	2206      	movs	r2, #6
 800512e:	f7fb f827 	bl	8000180 <memchr>
 8005132:	2800      	cmp	r0, #0
 8005134:	d03f      	beq.n	80051b6 <_vfiprintf_r+0x20a>
 8005136:	4b26      	ldr	r3, [pc, #152]	@ (80051d0 <_vfiprintf_r+0x224>)
 8005138:	bb1b      	cbnz	r3, 8005182 <_vfiprintf_r+0x1d6>
 800513a:	9b03      	ldr	r3, [sp, #12]
 800513c:	3307      	adds	r3, #7
 800513e:	f023 0307 	bic.w	r3, r3, #7
 8005142:	3308      	adds	r3, #8
 8005144:	9303      	str	r3, [sp, #12]
 8005146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005148:	443b      	add	r3, r7
 800514a:	9309      	str	r3, [sp, #36]	@ 0x24
 800514c:	e76a      	b.n	8005024 <_vfiprintf_r+0x78>
 800514e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005152:	460c      	mov	r4, r1
 8005154:	2001      	movs	r0, #1
 8005156:	e7a8      	b.n	80050aa <_vfiprintf_r+0xfe>
 8005158:	2300      	movs	r3, #0
 800515a:	3401      	adds	r4, #1
 800515c:	9305      	str	r3, [sp, #20]
 800515e:	4619      	mov	r1, r3
 8005160:	f04f 0c0a 	mov.w	ip, #10
 8005164:	4620      	mov	r0, r4
 8005166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800516a:	3a30      	subs	r2, #48	@ 0x30
 800516c:	2a09      	cmp	r2, #9
 800516e:	d903      	bls.n	8005178 <_vfiprintf_r+0x1cc>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0c6      	beq.n	8005102 <_vfiprintf_r+0x156>
 8005174:	9105      	str	r1, [sp, #20]
 8005176:	e7c4      	b.n	8005102 <_vfiprintf_r+0x156>
 8005178:	fb0c 2101 	mla	r1, ip, r1, r2
 800517c:	4604      	mov	r4, r0
 800517e:	2301      	movs	r3, #1
 8005180:	e7f0      	b.n	8005164 <_vfiprintf_r+0x1b8>
 8005182:	ab03      	add	r3, sp, #12
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	462a      	mov	r2, r5
 8005188:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <_vfiprintf_r+0x228>)
 800518a:	a904      	add	r1, sp, #16
 800518c:	4630      	mov	r0, r6
 800518e:	f3af 8000 	nop.w
 8005192:	4607      	mov	r7, r0
 8005194:	1c78      	adds	r0, r7, #1
 8005196:	d1d6      	bne.n	8005146 <_vfiprintf_r+0x19a>
 8005198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800519a:	07d9      	lsls	r1, r3, #31
 800519c:	d405      	bmi.n	80051aa <_vfiprintf_r+0x1fe>
 800519e:	89ab      	ldrh	r3, [r5, #12]
 80051a0:	059a      	lsls	r2, r3, #22
 80051a2:	d402      	bmi.n	80051aa <_vfiprintf_r+0x1fe>
 80051a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051a6:	f7ff fddd 	bl	8004d64 <__retarget_lock_release_recursive>
 80051aa:	89ab      	ldrh	r3, [r5, #12]
 80051ac:	065b      	lsls	r3, r3, #25
 80051ae:	f53f af1f 	bmi.w	8004ff0 <_vfiprintf_r+0x44>
 80051b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051b4:	e71e      	b.n	8004ff4 <_vfiprintf_r+0x48>
 80051b6:	ab03      	add	r3, sp, #12
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	462a      	mov	r2, r5
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <_vfiprintf_r+0x228>)
 80051be:	a904      	add	r1, sp, #16
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f879 	bl	80052b8 <_printf_i>
 80051c6:	e7e4      	b.n	8005192 <_vfiprintf_r+0x1e6>
 80051c8:	080058ec 	.word	0x080058ec
 80051cc:	080058f6 	.word	0x080058f6
 80051d0:	00000000 	.word	0x00000000
 80051d4:	08004f87 	.word	0x08004f87
 80051d8:	080058f2 	.word	0x080058f2

080051dc <_printf_common>:
 80051dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e0:	4616      	mov	r6, r2
 80051e2:	4698      	mov	r8, r3
 80051e4:	688a      	ldr	r2, [r1, #8]
 80051e6:	690b      	ldr	r3, [r1, #16]
 80051e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051ec:	4293      	cmp	r3, r2
 80051ee:	bfb8      	it	lt
 80051f0:	4613      	movlt	r3, r2
 80051f2:	6033      	str	r3, [r6, #0]
 80051f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051f8:	4607      	mov	r7, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	b10a      	cbz	r2, 8005202 <_printf_common+0x26>
 80051fe:	3301      	adds	r3, #1
 8005200:	6033      	str	r3, [r6, #0]
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	0699      	lsls	r1, r3, #26
 8005206:	bf42      	ittt	mi
 8005208:	6833      	ldrmi	r3, [r6, #0]
 800520a:	3302      	addmi	r3, #2
 800520c:	6033      	strmi	r3, [r6, #0]
 800520e:	6825      	ldr	r5, [r4, #0]
 8005210:	f015 0506 	ands.w	r5, r5, #6
 8005214:	d106      	bne.n	8005224 <_printf_common+0x48>
 8005216:	f104 0a19 	add.w	sl, r4, #25
 800521a:	68e3      	ldr	r3, [r4, #12]
 800521c:	6832      	ldr	r2, [r6, #0]
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	42ab      	cmp	r3, r5
 8005222:	dc26      	bgt.n	8005272 <_printf_common+0x96>
 8005224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	3b00      	subs	r3, #0
 800522c:	bf18      	it	ne
 800522e:	2301      	movne	r3, #1
 8005230:	0692      	lsls	r2, r2, #26
 8005232:	d42b      	bmi.n	800528c <_printf_common+0xb0>
 8005234:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005238:	4641      	mov	r1, r8
 800523a:	4638      	mov	r0, r7
 800523c:	47c8      	blx	r9
 800523e:	3001      	adds	r0, #1
 8005240:	d01e      	beq.n	8005280 <_printf_common+0xa4>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	6922      	ldr	r2, [r4, #16]
 8005246:	f003 0306 	and.w	r3, r3, #6
 800524a:	2b04      	cmp	r3, #4
 800524c:	bf02      	ittt	eq
 800524e:	68e5      	ldreq	r5, [r4, #12]
 8005250:	6833      	ldreq	r3, [r6, #0]
 8005252:	1aed      	subeq	r5, r5, r3
 8005254:	68a3      	ldr	r3, [r4, #8]
 8005256:	bf0c      	ite	eq
 8005258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800525c:	2500      	movne	r5, #0
 800525e:	4293      	cmp	r3, r2
 8005260:	bfc4      	itt	gt
 8005262:	1a9b      	subgt	r3, r3, r2
 8005264:	18ed      	addgt	r5, r5, r3
 8005266:	2600      	movs	r6, #0
 8005268:	341a      	adds	r4, #26
 800526a:	42b5      	cmp	r5, r6
 800526c:	d11a      	bne.n	80052a4 <_printf_common+0xc8>
 800526e:	2000      	movs	r0, #0
 8005270:	e008      	b.n	8005284 <_printf_common+0xa8>
 8005272:	2301      	movs	r3, #1
 8005274:	4652      	mov	r2, sl
 8005276:	4641      	mov	r1, r8
 8005278:	4638      	mov	r0, r7
 800527a:	47c8      	blx	r9
 800527c:	3001      	adds	r0, #1
 800527e:	d103      	bne.n	8005288 <_printf_common+0xac>
 8005280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005288:	3501      	adds	r5, #1
 800528a:	e7c6      	b.n	800521a <_printf_common+0x3e>
 800528c:	18e1      	adds	r1, r4, r3
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	2030      	movs	r0, #48	@ 0x30
 8005292:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005296:	4422      	add	r2, r4
 8005298:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800529c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052a0:	3302      	adds	r3, #2
 80052a2:	e7c7      	b.n	8005234 <_printf_common+0x58>
 80052a4:	2301      	movs	r3, #1
 80052a6:	4622      	mov	r2, r4
 80052a8:	4641      	mov	r1, r8
 80052aa:	4638      	mov	r0, r7
 80052ac:	47c8      	blx	r9
 80052ae:	3001      	adds	r0, #1
 80052b0:	d0e6      	beq.n	8005280 <_printf_common+0xa4>
 80052b2:	3601      	adds	r6, #1
 80052b4:	e7d9      	b.n	800526a <_printf_common+0x8e>
	...

080052b8 <_printf_i>:
 80052b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	7e0f      	ldrb	r7, [r1, #24]
 80052be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052c0:	2f78      	cmp	r7, #120	@ 0x78
 80052c2:	4691      	mov	r9, r2
 80052c4:	4680      	mov	r8, r0
 80052c6:	460c      	mov	r4, r1
 80052c8:	469a      	mov	sl, r3
 80052ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052ce:	d807      	bhi.n	80052e0 <_printf_i+0x28>
 80052d0:	2f62      	cmp	r7, #98	@ 0x62
 80052d2:	d80a      	bhi.n	80052ea <_printf_i+0x32>
 80052d4:	2f00      	cmp	r7, #0
 80052d6:	f000 80d1 	beq.w	800547c <_printf_i+0x1c4>
 80052da:	2f58      	cmp	r7, #88	@ 0x58
 80052dc:	f000 80b8 	beq.w	8005450 <_printf_i+0x198>
 80052e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052e8:	e03a      	b.n	8005360 <_printf_i+0xa8>
 80052ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052ee:	2b15      	cmp	r3, #21
 80052f0:	d8f6      	bhi.n	80052e0 <_printf_i+0x28>
 80052f2:	a101      	add	r1, pc, #4	@ (adr r1, 80052f8 <_printf_i+0x40>)
 80052f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052f8:	08005351 	.word	0x08005351
 80052fc:	08005365 	.word	0x08005365
 8005300:	080052e1 	.word	0x080052e1
 8005304:	080052e1 	.word	0x080052e1
 8005308:	080052e1 	.word	0x080052e1
 800530c:	080052e1 	.word	0x080052e1
 8005310:	08005365 	.word	0x08005365
 8005314:	080052e1 	.word	0x080052e1
 8005318:	080052e1 	.word	0x080052e1
 800531c:	080052e1 	.word	0x080052e1
 8005320:	080052e1 	.word	0x080052e1
 8005324:	08005463 	.word	0x08005463
 8005328:	0800538f 	.word	0x0800538f
 800532c:	0800541d 	.word	0x0800541d
 8005330:	080052e1 	.word	0x080052e1
 8005334:	080052e1 	.word	0x080052e1
 8005338:	08005485 	.word	0x08005485
 800533c:	080052e1 	.word	0x080052e1
 8005340:	0800538f 	.word	0x0800538f
 8005344:	080052e1 	.word	0x080052e1
 8005348:	080052e1 	.word	0x080052e1
 800534c:	08005425 	.word	0x08005425
 8005350:	6833      	ldr	r3, [r6, #0]
 8005352:	1d1a      	adds	r2, r3, #4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6032      	str	r2, [r6, #0]
 8005358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800535c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005360:	2301      	movs	r3, #1
 8005362:	e09c      	b.n	800549e <_printf_i+0x1e6>
 8005364:	6833      	ldr	r3, [r6, #0]
 8005366:	6820      	ldr	r0, [r4, #0]
 8005368:	1d19      	adds	r1, r3, #4
 800536a:	6031      	str	r1, [r6, #0]
 800536c:	0606      	lsls	r6, r0, #24
 800536e:	d501      	bpl.n	8005374 <_printf_i+0xbc>
 8005370:	681d      	ldr	r5, [r3, #0]
 8005372:	e003      	b.n	800537c <_printf_i+0xc4>
 8005374:	0645      	lsls	r5, r0, #25
 8005376:	d5fb      	bpl.n	8005370 <_printf_i+0xb8>
 8005378:	f9b3 5000 	ldrsh.w	r5, [r3]
 800537c:	2d00      	cmp	r5, #0
 800537e:	da03      	bge.n	8005388 <_printf_i+0xd0>
 8005380:	232d      	movs	r3, #45	@ 0x2d
 8005382:	426d      	negs	r5, r5
 8005384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005388:	4858      	ldr	r0, [pc, #352]	@ (80054ec <_printf_i+0x234>)
 800538a:	230a      	movs	r3, #10
 800538c:	e011      	b.n	80053b2 <_printf_i+0xfa>
 800538e:	6821      	ldr	r1, [r4, #0]
 8005390:	6833      	ldr	r3, [r6, #0]
 8005392:	0608      	lsls	r0, r1, #24
 8005394:	f853 5b04 	ldr.w	r5, [r3], #4
 8005398:	d402      	bmi.n	80053a0 <_printf_i+0xe8>
 800539a:	0649      	lsls	r1, r1, #25
 800539c:	bf48      	it	mi
 800539e:	b2ad      	uxthmi	r5, r5
 80053a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80053a2:	4852      	ldr	r0, [pc, #328]	@ (80054ec <_printf_i+0x234>)
 80053a4:	6033      	str	r3, [r6, #0]
 80053a6:	bf14      	ite	ne
 80053a8:	230a      	movne	r3, #10
 80053aa:	2308      	moveq	r3, #8
 80053ac:	2100      	movs	r1, #0
 80053ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053b2:	6866      	ldr	r6, [r4, #4]
 80053b4:	60a6      	str	r6, [r4, #8]
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	db05      	blt.n	80053c6 <_printf_i+0x10e>
 80053ba:	6821      	ldr	r1, [r4, #0]
 80053bc:	432e      	orrs	r6, r5
 80053be:	f021 0104 	bic.w	r1, r1, #4
 80053c2:	6021      	str	r1, [r4, #0]
 80053c4:	d04b      	beq.n	800545e <_printf_i+0x1a6>
 80053c6:	4616      	mov	r6, r2
 80053c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80053cc:	fb03 5711 	mls	r7, r3, r1, r5
 80053d0:	5dc7      	ldrb	r7, [r0, r7]
 80053d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053d6:	462f      	mov	r7, r5
 80053d8:	42bb      	cmp	r3, r7
 80053da:	460d      	mov	r5, r1
 80053dc:	d9f4      	bls.n	80053c8 <_printf_i+0x110>
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d10b      	bne.n	80053fa <_printf_i+0x142>
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	07df      	lsls	r7, r3, #31
 80053e6:	d508      	bpl.n	80053fa <_printf_i+0x142>
 80053e8:	6923      	ldr	r3, [r4, #16]
 80053ea:	6861      	ldr	r1, [r4, #4]
 80053ec:	4299      	cmp	r1, r3
 80053ee:	bfde      	ittt	le
 80053f0:	2330      	movle	r3, #48	@ 0x30
 80053f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053f6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80053fa:	1b92      	subs	r2, r2, r6
 80053fc:	6122      	str	r2, [r4, #16]
 80053fe:	f8cd a000 	str.w	sl, [sp]
 8005402:	464b      	mov	r3, r9
 8005404:	aa03      	add	r2, sp, #12
 8005406:	4621      	mov	r1, r4
 8005408:	4640      	mov	r0, r8
 800540a:	f7ff fee7 	bl	80051dc <_printf_common>
 800540e:	3001      	adds	r0, #1
 8005410:	d14a      	bne.n	80054a8 <_printf_i+0x1f0>
 8005412:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005416:	b004      	add	sp, #16
 8005418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	f043 0320 	orr.w	r3, r3, #32
 8005422:	6023      	str	r3, [r4, #0]
 8005424:	4832      	ldr	r0, [pc, #200]	@ (80054f0 <_printf_i+0x238>)
 8005426:	2778      	movs	r7, #120	@ 0x78
 8005428:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800542c:	6823      	ldr	r3, [r4, #0]
 800542e:	6831      	ldr	r1, [r6, #0]
 8005430:	061f      	lsls	r7, r3, #24
 8005432:	f851 5b04 	ldr.w	r5, [r1], #4
 8005436:	d402      	bmi.n	800543e <_printf_i+0x186>
 8005438:	065f      	lsls	r7, r3, #25
 800543a:	bf48      	it	mi
 800543c:	b2ad      	uxthmi	r5, r5
 800543e:	6031      	str	r1, [r6, #0]
 8005440:	07d9      	lsls	r1, r3, #31
 8005442:	bf44      	itt	mi
 8005444:	f043 0320 	orrmi.w	r3, r3, #32
 8005448:	6023      	strmi	r3, [r4, #0]
 800544a:	b11d      	cbz	r5, 8005454 <_printf_i+0x19c>
 800544c:	2310      	movs	r3, #16
 800544e:	e7ad      	b.n	80053ac <_printf_i+0xf4>
 8005450:	4826      	ldr	r0, [pc, #152]	@ (80054ec <_printf_i+0x234>)
 8005452:	e7e9      	b.n	8005428 <_printf_i+0x170>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	f023 0320 	bic.w	r3, r3, #32
 800545a:	6023      	str	r3, [r4, #0]
 800545c:	e7f6      	b.n	800544c <_printf_i+0x194>
 800545e:	4616      	mov	r6, r2
 8005460:	e7bd      	b.n	80053de <_printf_i+0x126>
 8005462:	6833      	ldr	r3, [r6, #0]
 8005464:	6825      	ldr	r5, [r4, #0]
 8005466:	6961      	ldr	r1, [r4, #20]
 8005468:	1d18      	adds	r0, r3, #4
 800546a:	6030      	str	r0, [r6, #0]
 800546c:	062e      	lsls	r6, r5, #24
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	d501      	bpl.n	8005476 <_printf_i+0x1be>
 8005472:	6019      	str	r1, [r3, #0]
 8005474:	e002      	b.n	800547c <_printf_i+0x1c4>
 8005476:	0668      	lsls	r0, r5, #25
 8005478:	d5fb      	bpl.n	8005472 <_printf_i+0x1ba>
 800547a:	8019      	strh	r1, [r3, #0]
 800547c:	2300      	movs	r3, #0
 800547e:	6123      	str	r3, [r4, #16]
 8005480:	4616      	mov	r6, r2
 8005482:	e7bc      	b.n	80053fe <_printf_i+0x146>
 8005484:	6833      	ldr	r3, [r6, #0]
 8005486:	1d1a      	adds	r2, r3, #4
 8005488:	6032      	str	r2, [r6, #0]
 800548a:	681e      	ldr	r6, [r3, #0]
 800548c:	6862      	ldr	r2, [r4, #4]
 800548e:	2100      	movs	r1, #0
 8005490:	4630      	mov	r0, r6
 8005492:	f7fa fe75 	bl	8000180 <memchr>
 8005496:	b108      	cbz	r0, 800549c <_printf_i+0x1e4>
 8005498:	1b80      	subs	r0, r0, r6
 800549a:	6060      	str	r0, [r4, #4]
 800549c:	6863      	ldr	r3, [r4, #4]
 800549e:	6123      	str	r3, [r4, #16]
 80054a0:	2300      	movs	r3, #0
 80054a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054a6:	e7aa      	b.n	80053fe <_printf_i+0x146>
 80054a8:	6923      	ldr	r3, [r4, #16]
 80054aa:	4632      	mov	r2, r6
 80054ac:	4649      	mov	r1, r9
 80054ae:	4640      	mov	r0, r8
 80054b0:	47d0      	blx	sl
 80054b2:	3001      	adds	r0, #1
 80054b4:	d0ad      	beq.n	8005412 <_printf_i+0x15a>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	079b      	lsls	r3, r3, #30
 80054ba:	d413      	bmi.n	80054e4 <_printf_i+0x22c>
 80054bc:	68e0      	ldr	r0, [r4, #12]
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	4298      	cmp	r0, r3
 80054c2:	bfb8      	it	lt
 80054c4:	4618      	movlt	r0, r3
 80054c6:	e7a6      	b.n	8005416 <_printf_i+0x15e>
 80054c8:	2301      	movs	r3, #1
 80054ca:	4632      	mov	r2, r6
 80054cc:	4649      	mov	r1, r9
 80054ce:	4640      	mov	r0, r8
 80054d0:	47d0      	blx	sl
 80054d2:	3001      	adds	r0, #1
 80054d4:	d09d      	beq.n	8005412 <_printf_i+0x15a>
 80054d6:	3501      	adds	r5, #1
 80054d8:	68e3      	ldr	r3, [r4, #12]
 80054da:	9903      	ldr	r1, [sp, #12]
 80054dc:	1a5b      	subs	r3, r3, r1
 80054de:	42ab      	cmp	r3, r5
 80054e0:	dcf2      	bgt.n	80054c8 <_printf_i+0x210>
 80054e2:	e7eb      	b.n	80054bc <_printf_i+0x204>
 80054e4:	2500      	movs	r5, #0
 80054e6:	f104 0619 	add.w	r6, r4, #25
 80054ea:	e7f5      	b.n	80054d8 <_printf_i+0x220>
 80054ec:	080058fd 	.word	0x080058fd
 80054f0:	0800590e 	.word	0x0800590e

080054f4 <__sflush_r>:
 80054f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fc:	0716      	lsls	r6, r2, #28
 80054fe:	4605      	mov	r5, r0
 8005500:	460c      	mov	r4, r1
 8005502:	d454      	bmi.n	80055ae <__sflush_r+0xba>
 8005504:	684b      	ldr	r3, [r1, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	dc02      	bgt.n	8005510 <__sflush_r+0x1c>
 800550a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	dd48      	ble.n	80055a2 <__sflush_r+0xae>
 8005510:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005512:	2e00      	cmp	r6, #0
 8005514:	d045      	beq.n	80055a2 <__sflush_r+0xae>
 8005516:	2300      	movs	r3, #0
 8005518:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800551c:	682f      	ldr	r7, [r5, #0]
 800551e:	6a21      	ldr	r1, [r4, #32]
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	d030      	beq.n	8005586 <__sflush_r+0x92>
 8005524:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005526:	89a3      	ldrh	r3, [r4, #12]
 8005528:	0759      	lsls	r1, r3, #29
 800552a:	d505      	bpl.n	8005538 <__sflush_r+0x44>
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	1ad2      	subs	r2, r2, r3
 8005530:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005532:	b10b      	cbz	r3, 8005538 <__sflush_r+0x44>
 8005534:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005536:	1ad2      	subs	r2, r2, r3
 8005538:	2300      	movs	r3, #0
 800553a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800553c:	6a21      	ldr	r1, [r4, #32]
 800553e:	4628      	mov	r0, r5
 8005540:	47b0      	blx	r6
 8005542:	1c43      	adds	r3, r0, #1
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	d106      	bne.n	8005556 <__sflush_r+0x62>
 8005548:	6829      	ldr	r1, [r5, #0]
 800554a:	291d      	cmp	r1, #29
 800554c:	d82b      	bhi.n	80055a6 <__sflush_r+0xb2>
 800554e:	4a2a      	ldr	r2, [pc, #168]	@ (80055f8 <__sflush_r+0x104>)
 8005550:	40ca      	lsrs	r2, r1
 8005552:	07d6      	lsls	r6, r2, #31
 8005554:	d527      	bpl.n	80055a6 <__sflush_r+0xb2>
 8005556:	2200      	movs	r2, #0
 8005558:	6062      	str	r2, [r4, #4]
 800555a:	04d9      	lsls	r1, r3, #19
 800555c:	6922      	ldr	r2, [r4, #16]
 800555e:	6022      	str	r2, [r4, #0]
 8005560:	d504      	bpl.n	800556c <__sflush_r+0x78>
 8005562:	1c42      	adds	r2, r0, #1
 8005564:	d101      	bne.n	800556a <__sflush_r+0x76>
 8005566:	682b      	ldr	r3, [r5, #0]
 8005568:	b903      	cbnz	r3, 800556c <__sflush_r+0x78>
 800556a:	6560      	str	r0, [r4, #84]	@ 0x54
 800556c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800556e:	602f      	str	r7, [r5, #0]
 8005570:	b1b9      	cbz	r1, 80055a2 <__sflush_r+0xae>
 8005572:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005576:	4299      	cmp	r1, r3
 8005578:	d002      	beq.n	8005580 <__sflush_r+0x8c>
 800557a:	4628      	mov	r0, r5
 800557c:	f7ff fbf4 	bl	8004d68 <_free_r>
 8005580:	2300      	movs	r3, #0
 8005582:	6363      	str	r3, [r4, #52]	@ 0x34
 8005584:	e00d      	b.n	80055a2 <__sflush_r+0xae>
 8005586:	2301      	movs	r3, #1
 8005588:	4628      	mov	r0, r5
 800558a:	47b0      	blx	r6
 800558c:	4602      	mov	r2, r0
 800558e:	1c50      	adds	r0, r2, #1
 8005590:	d1c9      	bne.n	8005526 <__sflush_r+0x32>
 8005592:	682b      	ldr	r3, [r5, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0c6      	beq.n	8005526 <__sflush_r+0x32>
 8005598:	2b1d      	cmp	r3, #29
 800559a:	d001      	beq.n	80055a0 <__sflush_r+0xac>
 800559c:	2b16      	cmp	r3, #22
 800559e:	d11e      	bne.n	80055de <__sflush_r+0xea>
 80055a0:	602f      	str	r7, [r5, #0]
 80055a2:	2000      	movs	r0, #0
 80055a4:	e022      	b.n	80055ec <__sflush_r+0xf8>
 80055a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055aa:	b21b      	sxth	r3, r3
 80055ac:	e01b      	b.n	80055e6 <__sflush_r+0xf2>
 80055ae:	690f      	ldr	r7, [r1, #16]
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	d0f6      	beq.n	80055a2 <__sflush_r+0xae>
 80055b4:	0793      	lsls	r3, r2, #30
 80055b6:	680e      	ldr	r6, [r1, #0]
 80055b8:	bf08      	it	eq
 80055ba:	694b      	ldreq	r3, [r1, #20]
 80055bc:	600f      	str	r7, [r1, #0]
 80055be:	bf18      	it	ne
 80055c0:	2300      	movne	r3, #0
 80055c2:	eba6 0807 	sub.w	r8, r6, r7
 80055c6:	608b      	str	r3, [r1, #8]
 80055c8:	f1b8 0f00 	cmp.w	r8, #0
 80055cc:	dde9      	ble.n	80055a2 <__sflush_r+0xae>
 80055ce:	6a21      	ldr	r1, [r4, #32]
 80055d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80055d2:	4643      	mov	r3, r8
 80055d4:	463a      	mov	r2, r7
 80055d6:	4628      	mov	r0, r5
 80055d8:	47b0      	blx	r6
 80055da:	2800      	cmp	r0, #0
 80055dc:	dc08      	bgt.n	80055f0 <__sflush_r+0xfc>
 80055de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055e6:	81a3      	strh	r3, [r4, #12]
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055f0:	4407      	add	r7, r0
 80055f2:	eba8 0800 	sub.w	r8, r8, r0
 80055f6:	e7e7      	b.n	80055c8 <__sflush_r+0xd4>
 80055f8:	20400001 	.word	0x20400001

080055fc <_fflush_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	690b      	ldr	r3, [r1, #16]
 8005600:	4605      	mov	r5, r0
 8005602:	460c      	mov	r4, r1
 8005604:	b913      	cbnz	r3, 800560c <_fflush_r+0x10>
 8005606:	2500      	movs	r5, #0
 8005608:	4628      	mov	r0, r5
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	b118      	cbz	r0, 8005616 <_fflush_r+0x1a>
 800560e:	6a03      	ldr	r3, [r0, #32]
 8005610:	b90b      	cbnz	r3, 8005616 <_fflush_r+0x1a>
 8005612:	f7ff f9af 	bl	8004974 <__sinit>
 8005616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f3      	beq.n	8005606 <_fflush_r+0xa>
 800561e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005620:	07d0      	lsls	r0, r2, #31
 8005622:	d404      	bmi.n	800562e <_fflush_r+0x32>
 8005624:	0599      	lsls	r1, r3, #22
 8005626:	d402      	bmi.n	800562e <_fflush_r+0x32>
 8005628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800562a:	f7ff fb9a 	bl	8004d62 <__retarget_lock_acquire_recursive>
 800562e:	4628      	mov	r0, r5
 8005630:	4621      	mov	r1, r4
 8005632:	f7ff ff5f 	bl	80054f4 <__sflush_r>
 8005636:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005638:	07da      	lsls	r2, r3, #31
 800563a:	4605      	mov	r5, r0
 800563c:	d4e4      	bmi.n	8005608 <_fflush_r+0xc>
 800563e:	89a3      	ldrh	r3, [r4, #12]
 8005640:	059b      	lsls	r3, r3, #22
 8005642:	d4e1      	bmi.n	8005608 <_fflush_r+0xc>
 8005644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005646:	f7ff fb8d 	bl	8004d64 <__retarget_lock_release_recursive>
 800564a:	e7dd      	b.n	8005608 <_fflush_r+0xc>

0800564c <__swhatbuf_r>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	460c      	mov	r4, r1
 8005650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005654:	2900      	cmp	r1, #0
 8005656:	b096      	sub	sp, #88	@ 0x58
 8005658:	4615      	mov	r5, r2
 800565a:	461e      	mov	r6, r3
 800565c:	da0d      	bge.n	800567a <__swhatbuf_r+0x2e>
 800565e:	89a3      	ldrh	r3, [r4, #12]
 8005660:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005664:	f04f 0100 	mov.w	r1, #0
 8005668:	bf14      	ite	ne
 800566a:	2340      	movne	r3, #64	@ 0x40
 800566c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005670:	2000      	movs	r0, #0
 8005672:	6031      	str	r1, [r6, #0]
 8005674:	602b      	str	r3, [r5, #0]
 8005676:	b016      	add	sp, #88	@ 0x58
 8005678:	bd70      	pop	{r4, r5, r6, pc}
 800567a:	466a      	mov	r2, sp
 800567c:	f000 f848 	bl	8005710 <_fstat_r>
 8005680:	2800      	cmp	r0, #0
 8005682:	dbec      	blt.n	800565e <__swhatbuf_r+0x12>
 8005684:	9901      	ldr	r1, [sp, #4]
 8005686:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800568a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800568e:	4259      	negs	r1, r3
 8005690:	4159      	adcs	r1, r3
 8005692:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005696:	e7eb      	b.n	8005670 <__swhatbuf_r+0x24>

08005698 <__smakebuf_r>:
 8005698:	898b      	ldrh	r3, [r1, #12]
 800569a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800569c:	079d      	lsls	r5, r3, #30
 800569e:	4606      	mov	r6, r0
 80056a0:	460c      	mov	r4, r1
 80056a2:	d507      	bpl.n	80056b4 <__smakebuf_r+0x1c>
 80056a4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	2301      	movs	r3, #1
 80056ae:	6163      	str	r3, [r4, #20]
 80056b0:	b003      	add	sp, #12
 80056b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b4:	ab01      	add	r3, sp, #4
 80056b6:	466a      	mov	r2, sp
 80056b8:	f7ff ffc8 	bl	800564c <__swhatbuf_r>
 80056bc:	9f00      	ldr	r7, [sp, #0]
 80056be:	4605      	mov	r5, r0
 80056c0:	4639      	mov	r1, r7
 80056c2:	4630      	mov	r0, r6
 80056c4:	f7ff fbbc 	bl	8004e40 <_malloc_r>
 80056c8:	b948      	cbnz	r0, 80056de <__smakebuf_r+0x46>
 80056ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ce:	059a      	lsls	r2, r3, #22
 80056d0:	d4ee      	bmi.n	80056b0 <__smakebuf_r+0x18>
 80056d2:	f023 0303 	bic.w	r3, r3, #3
 80056d6:	f043 0302 	orr.w	r3, r3, #2
 80056da:	81a3      	strh	r3, [r4, #12]
 80056dc:	e7e2      	b.n	80056a4 <__smakebuf_r+0xc>
 80056de:	89a3      	ldrh	r3, [r4, #12]
 80056e0:	6020      	str	r0, [r4, #0]
 80056e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	9b01      	ldr	r3, [sp, #4]
 80056ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80056ee:	b15b      	cbz	r3, 8005708 <__smakebuf_r+0x70>
 80056f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 f81d 	bl	8005734 <_isatty_r>
 80056fa:	b128      	cbz	r0, 8005708 <__smakebuf_r+0x70>
 80056fc:	89a3      	ldrh	r3, [r4, #12]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	81a3      	strh	r3, [r4, #12]
 8005708:	89a3      	ldrh	r3, [r4, #12]
 800570a:	431d      	orrs	r5, r3
 800570c:	81a5      	strh	r5, [r4, #12]
 800570e:	e7cf      	b.n	80056b0 <__smakebuf_r+0x18>

08005710 <_fstat_r>:
 8005710:	b538      	push	{r3, r4, r5, lr}
 8005712:	4d07      	ldr	r5, [pc, #28]	@ (8005730 <_fstat_r+0x20>)
 8005714:	2300      	movs	r3, #0
 8005716:	4604      	mov	r4, r0
 8005718:	4608      	mov	r0, r1
 800571a:	4611      	mov	r1, r2
 800571c:	602b      	str	r3, [r5, #0]
 800571e:	f7fb f9d8 	bl	8000ad2 <_fstat>
 8005722:	1c43      	adds	r3, r0, #1
 8005724:	d102      	bne.n	800572c <_fstat_r+0x1c>
 8005726:	682b      	ldr	r3, [r5, #0]
 8005728:	b103      	cbz	r3, 800572c <_fstat_r+0x1c>
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	bd38      	pop	{r3, r4, r5, pc}
 800572e:	bf00      	nop
 8005730:	20000264 	.word	0x20000264

08005734 <_isatty_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d06      	ldr	r5, [pc, #24]	@ (8005750 <_isatty_r+0x1c>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	602b      	str	r3, [r5, #0]
 8005740:	f7fb f9d7 	bl	8000af2 <_isatty>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	d102      	bne.n	800574e <_isatty_r+0x1a>
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	b103      	cbz	r3, 800574e <_isatty_r+0x1a>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd38      	pop	{r3, r4, r5, pc}
 8005750:	20000264 	.word	0x20000264

08005754 <_sbrk_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d06      	ldr	r5, [pc, #24]	@ (8005770 <_sbrk_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	f7fb f9e0 	bl	8000b24 <_sbrk>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_sbrk_r+0x1a>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_sbrk_r+0x1a>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	20000264 	.word	0x20000264

08005774 <_init>:
 8005774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005776:	bf00      	nop
 8005778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800577a:	bc08      	pop	{r3}
 800577c:	469e      	mov	lr, r3
 800577e:	4770      	bx	lr

08005780 <_fini>:
 8005780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005782:	bf00      	nop
 8005784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005786:	bc08      	pop	{r3}
 8005788:	469e      	mov	lr, r3
 800578a:	4770      	bx	lr

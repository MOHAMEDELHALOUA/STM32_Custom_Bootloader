
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08020000  08020000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050f8  08020140  08020140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08025238  08025238  00006238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025398  08025398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080253a0  080253a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080253a4  080253a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000068  20000008  080253a8  00007008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  20000070  08025410  00007070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000274  08025410  00007274  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010f47  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002650  00000000  00000000  00017fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001308  00000000  00000000  0001a638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e72  00000000  00000000  0001b940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002250d  00000000  00000000  0001c7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fa64  00000000  00000000  0003ecbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d8914  00000000  00000000  0004e723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00127037  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005650  00000000  00000000  0012707c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  0012c6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08020140 <__do_global_dtors_aux>:
 8020140:	b510      	push	{r4, lr}
 8020142:	4c05      	ldr	r4, [pc, #20]	@ (8020158 <__do_global_dtors_aux+0x18>)
 8020144:	7823      	ldrb	r3, [r4, #0]
 8020146:	b933      	cbnz	r3, 8020156 <__do_global_dtors_aux+0x16>
 8020148:	4b04      	ldr	r3, [pc, #16]	@ (802015c <__do_global_dtors_aux+0x1c>)
 802014a:	b113      	cbz	r3, 8020152 <__do_global_dtors_aux+0x12>
 802014c:	4804      	ldr	r0, [pc, #16]	@ (8020160 <__do_global_dtors_aux+0x20>)
 802014e:	f3af 8000 	nop.w
 8020152:	2301      	movs	r3, #1
 8020154:	7023      	strb	r3, [r4, #0]
 8020156:	bd10      	pop	{r4, pc}
 8020158:	20000070 	.word	0x20000070
 802015c:	00000000 	.word	0x00000000
 8020160:	08025220 	.word	0x08025220

08020164 <frame_dummy>:
 8020164:	b508      	push	{r3, lr}
 8020166:	4b03      	ldr	r3, [pc, #12]	@ (8020174 <frame_dummy+0x10>)
 8020168:	b11b      	cbz	r3, 8020172 <frame_dummy+0xe>
 802016a:	4903      	ldr	r1, [pc, #12]	@ (8020178 <frame_dummy+0x14>)
 802016c:	4803      	ldr	r0, [pc, #12]	@ (802017c <frame_dummy+0x18>)
 802016e:	f3af 8000 	nop.w
 8020172:	bd08      	pop	{r3, pc}
 8020174:	00000000 	.word	0x00000000
 8020178:	20000074 	.word	0x20000074
 802017c:	08025220 	.word	0x08025220

08020180 <memchr>:
 8020180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8020184:	2a10      	cmp	r2, #16
 8020186:	db2b      	blt.n	80201e0 <memchr+0x60>
 8020188:	f010 0f07 	tst.w	r0, #7
 802018c:	d008      	beq.n	80201a0 <memchr+0x20>
 802018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020192:	3a01      	subs	r2, #1
 8020194:	428b      	cmp	r3, r1
 8020196:	d02d      	beq.n	80201f4 <memchr+0x74>
 8020198:	f010 0f07 	tst.w	r0, #7
 802019c:	b342      	cbz	r2, 80201f0 <memchr+0x70>
 802019e:	d1f6      	bne.n	802018e <memchr+0xe>
 80201a0:	b4f0      	push	{r4, r5, r6, r7}
 80201a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80201a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80201aa:	f022 0407 	bic.w	r4, r2, #7
 80201ae:	f07f 0700 	mvns.w	r7, #0
 80201b2:	2300      	movs	r3, #0
 80201b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80201b8:	3c08      	subs	r4, #8
 80201ba:	ea85 0501 	eor.w	r5, r5, r1
 80201be:	ea86 0601 	eor.w	r6, r6, r1
 80201c2:	fa85 f547 	uadd8	r5, r5, r7
 80201c6:	faa3 f587 	sel	r5, r3, r7
 80201ca:	fa86 f647 	uadd8	r6, r6, r7
 80201ce:	faa5 f687 	sel	r6, r5, r7
 80201d2:	b98e      	cbnz	r6, 80201f8 <memchr+0x78>
 80201d4:	d1ee      	bne.n	80201b4 <memchr+0x34>
 80201d6:	bcf0      	pop	{r4, r5, r6, r7}
 80201d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80201dc:	f002 0207 	and.w	r2, r2, #7
 80201e0:	b132      	cbz	r2, 80201f0 <memchr+0x70>
 80201e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80201e6:	3a01      	subs	r2, #1
 80201e8:	ea83 0301 	eor.w	r3, r3, r1
 80201ec:	b113      	cbz	r3, 80201f4 <memchr+0x74>
 80201ee:	d1f8      	bne.n	80201e2 <memchr+0x62>
 80201f0:	2000      	movs	r0, #0
 80201f2:	4770      	bx	lr
 80201f4:	3801      	subs	r0, #1
 80201f6:	4770      	bx	lr
 80201f8:	2d00      	cmp	r5, #0
 80201fa:	bf06      	itte	eq
 80201fc:	4635      	moveq	r5, r6
 80201fe:	3803      	subeq	r0, #3
 8020200:	3807      	subne	r0, #7
 8020202:	f015 0f01 	tst.w	r5, #1
 8020206:	d107      	bne.n	8020218 <memchr+0x98>
 8020208:	3001      	adds	r0, #1
 802020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 802020e:	bf02      	ittt	eq
 8020210:	3001      	addeq	r0, #1
 8020212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8020216:	3001      	addeq	r0, #1
 8020218:	bcf0      	pop	{r4, r5, r6, r7}
 802021a:	3801      	subs	r0, #1
 802021c:	4770      	bx	lr
 802021e:	bf00      	nop

08020220 <__aeabi_uldivmod>:
 8020220:	b953      	cbnz	r3, 8020238 <__aeabi_uldivmod+0x18>
 8020222:	b94a      	cbnz	r2, 8020238 <__aeabi_uldivmod+0x18>
 8020224:	2900      	cmp	r1, #0
 8020226:	bf08      	it	eq
 8020228:	2800      	cmpeq	r0, #0
 802022a:	bf1c      	itt	ne
 802022c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8020230:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8020234:	f000 b988 	b.w	8020548 <__aeabi_idiv0>
 8020238:	f1ad 0c08 	sub.w	ip, sp, #8
 802023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020240:	f000 f806 	bl	8020250 <__udivmoddi4>
 8020244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802024c:	b004      	add	sp, #16
 802024e:	4770      	bx	lr

08020250 <__udivmoddi4>:
 8020250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020254:	9d08      	ldr	r5, [sp, #32]
 8020256:	468e      	mov	lr, r1
 8020258:	4604      	mov	r4, r0
 802025a:	4688      	mov	r8, r1
 802025c:	2b00      	cmp	r3, #0
 802025e:	d14a      	bne.n	80202f6 <__udivmoddi4+0xa6>
 8020260:	428a      	cmp	r2, r1
 8020262:	4617      	mov	r7, r2
 8020264:	d962      	bls.n	802032c <__udivmoddi4+0xdc>
 8020266:	fab2 f682 	clz	r6, r2
 802026a:	b14e      	cbz	r6, 8020280 <__udivmoddi4+0x30>
 802026c:	f1c6 0320 	rsb	r3, r6, #32
 8020270:	fa01 f806 	lsl.w	r8, r1, r6
 8020274:	fa20 f303 	lsr.w	r3, r0, r3
 8020278:	40b7      	lsls	r7, r6
 802027a:	ea43 0808 	orr.w	r8, r3, r8
 802027e:	40b4      	lsls	r4, r6
 8020280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020284:	fa1f fc87 	uxth.w	ip, r7
 8020288:	fbb8 f1fe 	udiv	r1, r8, lr
 802028c:	0c23      	lsrs	r3, r4, #16
 802028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8020292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8020296:	fb01 f20c 	mul.w	r2, r1, ip
 802029a:	429a      	cmp	r2, r3
 802029c:	d909      	bls.n	80202b2 <__udivmoddi4+0x62>
 802029e:	18fb      	adds	r3, r7, r3
 80202a0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80202a4:	f080 80ea 	bcs.w	802047c <__udivmoddi4+0x22c>
 80202a8:	429a      	cmp	r2, r3
 80202aa:	f240 80e7 	bls.w	802047c <__udivmoddi4+0x22c>
 80202ae:	3902      	subs	r1, #2
 80202b0:	443b      	add	r3, r7
 80202b2:	1a9a      	subs	r2, r3, r2
 80202b4:	b2a3      	uxth	r3, r4
 80202b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80202ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80202be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80202c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80202c6:	459c      	cmp	ip, r3
 80202c8:	d909      	bls.n	80202de <__udivmoddi4+0x8e>
 80202ca:	18fb      	adds	r3, r7, r3
 80202cc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80202d0:	f080 80d6 	bcs.w	8020480 <__udivmoddi4+0x230>
 80202d4:	459c      	cmp	ip, r3
 80202d6:	f240 80d3 	bls.w	8020480 <__udivmoddi4+0x230>
 80202da:	443b      	add	r3, r7
 80202dc:	3802      	subs	r0, #2
 80202de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80202e2:	eba3 030c 	sub.w	r3, r3, ip
 80202e6:	2100      	movs	r1, #0
 80202e8:	b11d      	cbz	r5, 80202f2 <__udivmoddi4+0xa2>
 80202ea:	40f3      	lsrs	r3, r6
 80202ec:	2200      	movs	r2, #0
 80202ee:	e9c5 3200 	strd	r3, r2, [r5]
 80202f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202f6:	428b      	cmp	r3, r1
 80202f8:	d905      	bls.n	8020306 <__udivmoddi4+0xb6>
 80202fa:	b10d      	cbz	r5, 8020300 <__udivmoddi4+0xb0>
 80202fc:	e9c5 0100 	strd	r0, r1, [r5]
 8020300:	2100      	movs	r1, #0
 8020302:	4608      	mov	r0, r1
 8020304:	e7f5      	b.n	80202f2 <__udivmoddi4+0xa2>
 8020306:	fab3 f183 	clz	r1, r3
 802030a:	2900      	cmp	r1, #0
 802030c:	d146      	bne.n	802039c <__udivmoddi4+0x14c>
 802030e:	4573      	cmp	r3, lr
 8020310:	d302      	bcc.n	8020318 <__udivmoddi4+0xc8>
 8020312:	4282      	cmp	r2, r0
 8020314:	f200 8105 	bhi.w	8020522 <__udivmoddi4+0x2d2>
 8020318:	1a84      	subs	r4, r0, r2
 802031a:	eb6e 0203 	sbc.w	r2, lr, r3
 802031e:	2001      	movs	r0, #1
 8020320:	4690      	mov	r8, r2
 8020322:	2d00      	cmp	r5, #0
 8020324:	d0e5      	beq.n	80202f2 <__udivmoddi4+0xa2>
 8020326:	e9c5 4800 	strd	r4, r8, [r5]
 802032a:	e7e2      	b.n	80202f2 <__udivmoddi4+0xa2>
 802032c:	2a00      	cmp	r2, #0
 802032e:	f000 8090 	beq.w	8020452 <__udivmoddi4+0x202>
 8020332:	fab2 f682 	clz	r6, r2
 8020336:	2e00      	cmp	r6, #0
 8020338:	f040 80a4 	bne.w	8020484 <__udivmoddi4+0x234>
 802033c:	1a8a      	subs	r2, r1, r2
 802033e:	0c03      	lsrs	r3, r0, #16
 8020340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020344:	b280      	uxth	r0, r0
 8020346:	b2bc      	uxth	r4, r7
 8020348:	2101      	movs	r1, #1
 802034a:	fbb2 fcfe 	udiv	ip, r2, lr
 802034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8020352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020356:	fb04 f20c 	mul.w	r2, r4, ip
 802035a:	429a      	cmp	r2, r3
 802035c:	d907      	bls.n	802036e <__udivmoddi4+0x11e>
 802035e:	18fb      	adds	r3, r7, r3
 8020360:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8020364:	d202      	bcs.n	802036c <__udivmoddi4+0x11c>
 8020366:	429a      	cmp	r2, r3
 8020368:	f200 80e0 	bhi.w	802052c <__udivmoddi4+0x2dc>
 802036c:	46c4      	mov	ip, r8
 802036e:	1a9b      	subs	r3, r3, r2
 8020370:	fbb3 f2fe 	udiv	r2, r3, lr
 8020374:	fb0e 3312 	mls	r3, lr, r2, r3
 8020378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 802037c:	fb02 f404 	mul.w	r4, r2, r4
 8020380:	429c      	cmp	r4, r3
 8020382:	d907      	bls.n	8020394 <__udivmoddi4+0x144>
 8020384:	18fb      	adds	r3, r7, r3
 8020386:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 802038a:	d202      	bcs.n	8020392 <__udivmoddi4+0x142>
 802038c:	429c      	cmp	r4, r3
 802038e:	f200 80ca 	bhi.w	8020526 <__udivmoddi4+0x2d6>
 8020392:	4602      	mov	r2, r0
 8020394:	1b1b      	subs	r3, r3, r4
 8020396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 802039a:	e7a5      	b.n	80202e8 <__udivmoddi4+0x98>
 802039c:	f1c1 0620 	rsb	r6, r1, #32
 80203a0:	408b      	lsls	r3, r1
 80203a2:	fa22 f706 	lsr.w	r7, r2, r6
 80203a6:	431f      	orrs	r7, r3
 80203a8:	fa0e f401 	lsl.w	r4, lr, r1
 80203ac:	fa20 f306 	lsr.w	r3, r0, r6
 80203b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80203b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80203b8:	4323      	orrs	r3, r4
 80203ba:	fa00 f801 	lsl.w	r8, r0, r1
 80203be:	fa1f fc87 	uxth.w	ip, r7
 80203c2:	fbbe f0f9 	udiv	r0, lr, r9
 80203c6:	0c1c      	lsrs	r4, r3, #16
 80203c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80203cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80203d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80203d4:	45a6      	cmp	lr, r4
 80203d6:	fa02 f201 	lsl.w	r2, r2, r1
 80203da:	d909      	bls.n	80203f0 <__udivmoddi4+0x1a0>
 80203dc:	193c      	adds	r4, r7, r4
 80203de:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80203e2:	f080 809c 	bcs.w	802051e <__udivmoddi4+0x2ce>
 80203e6:	45a6      	cmp	lr, r4
 80203e8:	f240 8099 	bls.w	802051e <__udivmoddi4+0x2ce>
 80203ec:	3802      	subs	r0, #2
 80203ee:	443c      	add	r4, r7
 80203f0:	eba4 040e 	sub.w	r4, r4, lr
 80203f4:	fa1f fe83 	uxth.w	lr, r3
 80203f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80203fc:	fb09 4413 	mls	r4, r9, r3, r4
 8020400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8020404:	fb03 fc0c 	mul.w	ip, r3, ip
 8020408:	45a4      	cmp	ip, r4
 802040a:	d908      	bls.n	802041e <__udivmoddi4+0x1ce>
 802040c:	193c      	adds	r4, r7, r4
 802040e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8020412:	f080 8082 	bcs.w	802051a <__udivmoddi4+0x2ca>
 8020416:	45a4      	cmp	ip, r4
 8020418:	d97f      	bls.n	802051a <__udivmoddi4+0x2ca>
 802041a:	3b02      	subs	r3, #2
 802041c:	443c      	add	r4, r7
 802041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8020422:	eba4 040c 	sub.w	r4, r4, ip
 8020426:	fba0 ec02 	umull	lr, ip, r0, r2
 802042a:	4564      	cmp	r4, ip
 802042c:	4673      	mov	r3, lr
 802042e:	46e1      	mov	r9, ip
 8020430:	d362      	bcc.n	80204f8 <__udivmoddi4+0x2a8>
 8020432:	d05f      	beq.n	80204f4 <__udivmoddi4+0x2a4>
 8020434:	b15d      	cbz	r5, 802044e <__udivmoddi4+0x1fe>
 8020436:	ebb8 0203 	subs.w	r2, r8, r3
 802043a:	eb64 0409 	sbc.w	r4, r4, r9
 802043e:	fa04 f606 	lsl.w	r6, r4, r6
 8020442:	fa22 f301 	lsr.w	r3, r2, r1
 8020446:	431e      	orrs	r6, r3
 8020448:	40cc      	lsrs	r4, r1
 802044a:	e9c5 6400 	strd	r6, r4, [r5]
 802044e:	2100      	movs	r1, #0
 8020450:	e74f      	b.n	80202f2 <__udivmoddi4+0xa2>
 8020452:	fbb1 fcf2 	udiv	ip, r1, r2
 8020456:	0c01      	lsrs	r1, r0, #16
 8020458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 802045c:	b280      	uxth	r0, r0
 802045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8020462:	463b      	mov	r3, r7
 8020464:	4638      	mov	r0, r7
 8020466:	463c      	mov	r4, r7
 8020468:	46b8      	mov	r8, r7
 802046a:	46be      	mov	lr, r7
 802046c:	2620      	movs	r6, #32
 802046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8020472:	eba2 0208 	sub.w	r2, r2, r8
 8020476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 802047a:	e766      	b.n	802034a <__udivmoddi4+0xfa>
 802047c:	4601      	mov	r1, r0
 802047e:	e718      	b.n	80202b2 <__udivmoddi4+0x62>
 8020480:	4610      	mov	r0, r2
 8020482:	e72c      	b.n	80202de <__udivmoddi4+0x8e>
 8020484:	f1c6 0220 	rsb	r2, r6, #32
 8020488:	fa2e f302 	lsr.w	r3, lr, r2
 802048c:	40b7      	lsls	r7, r6
 802048e:	40b1      	lsls	r1, r6
 8020490:	fa20 f202 	lsr.w	r2, r0, r2
 8020494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8020498:	430a      	orrs	r2, r1
 802049a:	fbb3 f8fe 	udiv	r8, r3, lr
 802049e:	b2bc      	uxth	r4, r7
 80204a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80204a4:	0c11      	lsrs	r1, r2, #16
 80204a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80204aa:	fb08 f904 	mul.w	r9, r8, r4
 80204ae:	40b0      	lsls	r0, r6
 80204b0:	4589      	cmp	r9, r1
 80204b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80204b6:	b280      	uxth	r0, r0
 80204b8:	d93e      	bls.n	8020538 <__udivmoddi4+0x2e8>
 80204ba:	1879      	adds	r1, r7, r1
 80204bc:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80204c0:	d201      	bcs.n	80204c6 <__udivmoddi4+0x276>
 80204c2:	4589      	cmp	r9, r1
 80204c4:	d81f      	bhi.n	8020506 <__udivmoddi4+0x2b6>
 80204c6:	eba1 0109 	sub.w	r1, r1, r9
 80204ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80204ce:	fb09 f804 	mul.w	r8, r9, r4
 80204d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80204d6:	b292      	uxth	r2, r2
 80204d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80204dc:	4542      	cmp	r2, r8
 80204de:	d229      	bcs.n	8020534 <__udivmoddi4+0x2e4>
 80204e0:	18ba      	adds	r2, r7, r2
 80204e2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80204e6:	d2c4      	bcs.n	8020472 <__udivmoddi4+0x222>
 80204e8:	4542      	cmp	r2, r8
 80204ea:	d2c2      	bcs.n	8020472 <__udivmoddi4+0x222>
 80204ec:	f1a9 0102 	sub.w	r1, r9, #2
 80204f0:	443a      	add	r2, r7
 80204f2:	e7be      	b.n	8020472 <__udivmoddi4+0x222>
 80204f4:	45f0      	cmp	r8, lr
 80204f6:	d29d      	bcs.n	8020434 <__udivmoddi4+0x1e4>
 80204f8:	ebbe 0302 	subs.w	r3, lr, r2
 80204fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8020500:	3801      	subs	r0, #1
 8020502:	46e1      	mov	r9, ip
 8020504:	e796      	b.n	8020434 <__udivmoddi4+0x1e4>
 8020506:	eba7 0909 	sub.w	r9, r7, r9
 802050a:	4449      	add	r1, r9
 802050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8020510:	fbb1 f9fe 	udiv	r9, r1, lr
 8020514:	fb09 f804 	mul.w	r8, r9, r4
 8020518:	e7db      	b.n	80204d2 <__udivmoddi4+0x282>
 802051a:	4673      	mov	r3, lr
 802051c:	e77f      	b.n	802041e <__udivmoddi4+0x1ce>
 802051e:	4650      	mov	r0, sl
 8020520:	e766      	b.n	80203f0 <__udivmoddi4+0x1a0>
 8020522:	4608      	mov	r0, r1
 8020524:	e6fd      	b.n	8020322 <__udivmoddi4+0xd2>
 8020526:	443b      	add	r3, r7
 8020528:	3a02      	subs	r2, #2
 802052a:	e733      	b.n	8020394 <__udivmoddi4+0x144>
 802052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8020530:	443b      	add	r3, r7
 8020532:	e71c      	b.n	802036e <__udivmoddi4+0x11e>
 8020534:	4649      	mov	r1, r9
 8020536:	e79c      	b.n	8020472 <__udivmoddi4+0x222>
 8020538:	eba1 0109 	sub.w	r1, r1, r9
 802053c:	46c4      	mov	ip, r8
 802053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8020542:	fb09 f804 	mul.w	r8, r9, r4
 8020546:	e7c4      	b.n	80204d2 <__udivmoddi4+0x282>

08020548 <__aeabi_idiv0>:
 8020548:	4770      	bx	lr
 802054a:	bf00      	nop

0802054c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 802054c:	b480      	push	{r7}
 802054e:	b085      	sub	sp, #20
 8020550:	af00      	add	r7, sp, #0
 8020552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8020554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020558:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 802055a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802055e:	687b      	ldr	r3, [r7, #4]
 8020560:	4313      	orrs	r3, r2
 8020562:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8020564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	4013      	ands	r3, r2
 802056e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8020570:	68fb      	ldr	r3, [r7, #12]
}
 8020572:	bf00      	nop
 8020574:	3714      	adds	r7, #20
 8020576:	46bd      	mov	sp, r7
 8020578:	f85d 7b04 	ldr.w	r7, [sp], #4
 802057c:	4770      	bx	lr
	...

08020580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8020580:	b580      	push	{r7, lr}
 8020582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8020584:	f000 fb4c 	bl	8020c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8020588:	f000 f824 	bl	80205d4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 802058c:	f000 f87a 	bl	8020684 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8020590:	f000 f8e2 	bl	8020758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8020594:	f000 f894 	bl	80206c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application(%d.%d) [by: ELHALOUA MOHAMED]\r\n", APP_Version[0], APP_Version[1] );
 8020598:	2300      	movs	r3, #0
 802059a:	2201      	movs	r2, #1
 802059c:	4619      	mov	r1, r3
 802059e:	480b      	ldr	r0, [pc, #44]	@ (80205cc <main+0x4c>)
 80205a0:	f003 ffd2 	bl	8024548 <iprintf>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_1, GPIO_PIN_SET );
 80205a4:	2201      	movs	r2, #1
 80205a6:	2102      	movs	r1, #2
 80205a8:	4809      	ldr	r0, [pc, #36]	@ (80205d0 <main+0x50>)
 80205aa:	f000 ff21 	bl	80213f0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);    //1 Sec delay
 80205ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80205b2:	f000 fbbb 	bl	8020d2c <HAL_Delay>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_1, GPIO_PIN_RESET );
 80205b6:	2200      	movs	r2, #0
 80205b8:	2102      	movs	r1, #2
 80205ba:	4805      	ldr	r0, [pc, #20]	@ (80205d0 <main+0x50>)
 80205bc:	f000 ff18 	bl	80213f0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);  //1 Sec delay
 80205c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80205c4:	f000 fbb2 	bl	8020d2c <HAL_Delay>
	HAL_GPIO_WritePin( GPIOB, GPIO_PIN_1, GPIO_PIN_SET );
 80205c8:	bf00      	nop
 80205ca:	e7eb      	b.n	80205a4 <main+0x24>
 80205cc:	08025238 	.word	0x08025238
 80205d0:	48000400 	.word	0x48000400

080205d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80205d4:	b580      	push	{r7, lr}
 80205d6:	b09a      	sub	sp, #104	@ 0x68
 80205d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80205da:	f107 0320 	add.w	r3, r7, #32
 80205de:	2248      	movs	r2, #72	@ 0x48
 80205e0:	2100      	movs	r1, #0
 80205e2:	4618      	mov	r0, r3
 80205e4:	f004 f805 	bl	80245f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80205e8:	1d3b      	adds	r3, r7, #4
 80205ea:	2200      	movs	r2, #0
 80205ec:	601a      	str	r2, [r3, #0]
 80205ee:	605a      	str	r2, [r3, #4]
 80205f0:	609a      	str	r2, [r3, #8]
 80205f2:	60da      	str	r2, [r3, #12]
 80205f4:	611a      	str	r2, [r3, #16]
 80205f6:	615a      	str	r2, [r3, #20]
 80205f8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80205fa:	4b21      	ldr	r3, [pc, #132]	@ (8020680 <SystemClock_Config+0xac>)
 80205fc:	681b      	ldr	r3, [r3, #0]
 80205fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8020602:	4a1f      	ldr	r2, [pc, #124]	@ (8020680 <SystemClock_Config+0xac>)
 8020604:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8020608:	6013      	str	r3, [r2, #0]
 802060a:	4b1d      	ldr	r3, [pc, #116]	@ (8020680 <SystemClock_Config+0xac>)
 802060c:	681b      	ldr	r3, [r3, #0]
 802060e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8020612:	603b      	str	r3, [r7, #0]
 8020614:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8020616:	2322      	movs	r3, #34	@ 0x22
 8020618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 802061a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8020620:	2301      	movs	r3, #1
 8020622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8020624:	2340      	movs	r3, #64	@ 0x40
 8020626:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8020628:	2300      	movs	r3, #0
 802062a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 802062c:	23a0      	movs	r3, #160	@ 0xa0
 802062e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8020630:	2300      	movs	r3, #0
 8020632:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8020634:	f107 0320 	add.w	r3, r7, #32
 8020638:	4618      	mov	r0, r3
 802063a:	f001 fa85 	bl	8021b48 <HAL_RCC_OscConfig>
 802063e:	4603      	mov	r3, r0
 8020640:	2b00      	cmp	r3, #0
 8020642:	d001      	beq.n	8020648 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8020644:	f000 f8f4 	bl	8020830 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8020648:	236f      	movs	r3, #111	@ 0x6f
 802064a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 802064c:	2300      	movs	r3, #0
 802064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8020650:	2300      	movs	r3, #0
 8020652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8020654:	2300      	movs	r3, #0
 8020656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8020658:	2300      	movs	r3, #0
 802065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 802065c:	2300      	movs	r3, #0
 802065e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8020660:	2300      	movs	r3, #0
 8020662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8020664:	1d3b      	adds	r3, r7, #4
 8020666:	2101      	movs	r1, #1
 8020668:	4618      	mov	r0, r3
 802066a:	f001 fde1 	bl	8022230 <HAL_RCC_ClockConfig>
 802066e:	4603      	mov	r3, r0
 8020670:	2b00      	cmp	r3, #0
 8020672:	d001      	beq.n	8020678 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8020674:	f000 f8dc 	bl	8020830 <Error_Handler>
  }
}
 8020678:	bf00      	nop
 802067a:	3768      	adds	r7, #104	@ 0x68
 802067c:	46bd      	mov	sp, r7
 802067e:	bd80      	pop	{r7, pc}
 8020680:	58000400 	.word	0x58000400

08020684 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8020684:	b580      	push	{r7, lr}
 8020686:	b094      	sub	sp, #80	@ 0x50
 8020688:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 802068a:	463b      	mov	r3, r7
 802068c:	2250      	movs	r2, #80	@ 0x50
 802068e:	2100      	movs	r1, #0
 8020690:	4618      	mov	r0, r3
 8020692:	f003 ffae 	bl	80245f2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8020696:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 802069a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 802069c:	2300      	movs	r3, #0
 802069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80206a0:	2300      	movs	r3, #0
 80206a2:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80206a4:	463b      	mov	r3, r7
 80206a6:	4618      	mov	r0, r3
 80206a8:	f002 f9ff 	bl	8022aaa <HAL_RCCEx_PeriphCLKConfig>
 80206ac:	4603      	mov	r3, r0
 80206ae:	2b00      	cmp	r3, #0
 80206b0:	d001      	beq.n	80206b6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80206b2:	f000 f8bd 	bl	8020830 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80206b6:	bf00      	nop
 80206b8:	3750      	adds	r7, #80	@ 0x50
 80206ba:	46bd      	mov	sp, r7
 80206bc:	bd80      	pop	{r7, pc}
	...

080206c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80206c0:	b580      	push	{r7, lr}
 80206c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80206c4:	4b22      	ldr	r3, [pc, #136]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206c6:	4a23      	ldr	r2, [pc, #140]	@ (8020754 <MX_USART1_UART_Init+0x94>)
 80206c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80206ca:	4b21      	ldr	r3, [pc, #132]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80206d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80206d2:	4b1f      	ldr	r3, [pc, #124]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206d4:	2200      	movs	r2, #0
 80206d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80206d8:	4b1d      	ldr	r3, [pc, #116]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206da:	2200      	movs	r2, #0
 80206dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80206de:	4b1c      	ldr	r3, [pc, #112]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206e0:	2200      	movs	r2, #0
 80206e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80206e4:	4b1a      	ldr	r3, [pc, #104]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206e6:	220c      	movs	r2, #12
 80206e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80206ea:	4b19      	ldr	r3, [pc, #100]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206ec:	2200      	movs	r2, #0
 80206ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80206f0:	4b17      	ldr	r3, [pc, #92]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206f2:	2200      	movs	r2, #0
 80206f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80206f6:	4b16      	ldr	r3, [pc, #88]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206f8:	2200      	movs	r2, #0
 80206fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80206fc:	4b14      	ldr	r3, [pc, #80]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 80206fe:	2200      	movs	r2, #0
 8020700:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020702:	4b13      	ldr	r3, [pc, #76]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 8020704:	2200      	movs	r2, #0
 8020706:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8020708:	4811      	ldr	r0, [pc, #68]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 802070a:	f002 fc75 	bl	8022ff8 <HAL_UART_Init>
 802070e:	4603      	mov	r3, r0
 8020710:	2b00      	cmp	r3, #0
 8020712:	d001      	beq.n	8020718 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8020714:	f000 f88c 	bl	8020830 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8020718:	2100      	movs	r1, #0
 802071a:	480d      	ldr	r0, [pc, #52]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 802071c:	f003 fd87 	bl	802422e <HAL_UARTEx_SetTxFifoThreshold>
 8020720:	4603      	mov	r3, r0
 8020722:	2b00      	cmp	r3, #0
 8020724:	d001      	beq.n	802072a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8020726:	f000 f883 	bl	8020830 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802072a:	2100      	movs	r1, #0
 802072c:	4808      	ldr	r0, [pc, #32]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 802072e:	f003 fdbc 	bl	80242aa <HAL_UARTEx_SetRxFifoThreshold>
 8020732:	4603      	mov	r3, r0
 8020734:	2b00      	cmp	r3, #0
 8020736:	d001      	beq.n	802073c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8020738:	f000 f87a 	bl	8020830 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 802073c:	4804      	ldr	r0, [pc, #16]	@ (8020750 <MX_USART1_UART_Init+0x90>)
 802073e:	f003 fd3d 	bl	80241bc <HAL_UARTEx_DisableFifoMode>
 8020742:	4603      	mov	r3, r0
 8020744:	2b00      	cmp	r3, #0
 8020746:	d001      	beq.n	802074c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8020748:	f000 f872 	bl	8020830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 802074c:	bf00      	nop
 802074e:	bd80      	pop	{r7, pc}
 8020750:	2000008c 	.word	0x2000008c
 8020754:	40013800 	.word	0x40013800

08020758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8020758:	b580      	push	{r7, lr}
 802075a:	b086      	sub	sp, #24
 802075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 802075e:	1d3b      	adds	r3, r7, #4
 8020760:	2200      	movs	r2, #0
 8020762:	601a      	str	r2, [r3, #0]
 8020764:	605a      	str	r2, [r3, #4]
 8020766:	609a      	str	r2, [r3, #8]
 8020768:	60da      	str	r2, [r3, #12]
 802076a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 802076c:	2004      	movs	r0, #4
 802076e:	f7ff feed 	bl	802054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8020772:	2002      	movs	r0, #2
 8020774:	f7ff feea 	bl	802054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8020778:	2001      	movs	r0, #1
 802077a:	f7ff fee7 	bl	802054c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 802077e:	2008      	movs	r0, #8
 8020780:	f7ff fee4 	bl	802054c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8020784:	2200      	movs	r2, #0
 8020786:	2123      	movs	r1, #35	@ 0x23
 8020788:	481d      	ldr	r0, [pc, #116]	@ (8020800 <MX_GPIO_Init+0xa8>)
 802078a:	f000 fe31 	bl	80213f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 802078e:	2310      	movs	r3, #16
 8020790:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020792:	2300      	movs	r3, #0
 8020794:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020796:	2300      	movs	r3, #0
 8020798:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 802079a:	1d3b      	adds	r3, r7, #4
 802079c:	4619      	mov	r1, r3
 802079e:	4819      	ldr	r0, [pc, #100]	@ (8020804 <MX_GPIO_Init+0xac>)
 80207a0:	f000 fcb6 	bl	8021110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80207a4:	2323      	movs	r3, #35	@ 0x23
 80207a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80207a8:	2301      	movs	r3, #1
 80207aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80207ac:	2300      	movs	r3, #0
 80207ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80207b0:	2300      	movs	r3, #0
 80207b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80207b4:	1d3b      	adds	r3, r7, #4
 80207b6:	4619      	mov	r1, r3
 80207b8:	4811      	ldr	r0, [pc, #68]	@ (8020800 <MX_GPIO_Init+0xa8>)
 80207ba:	f000 fca9 	bl	8021110 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80207be:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80207c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80207c4:	2302      	movs	r3, #2
 80207c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80207c8:	2300      	movs	r3, #0
 80207ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80207cc:	2300      	movs	r3, #0
 80207ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80207d0:	230a      	movs	r3, #10
 80207d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80207d4:	1d3b      	adds	r3, r7, #4
 80207d6:	4619      	mov	r1, r3
 80207d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80207dc:	f000 fc98 	bl	8021110 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80207e0:	2303      	movs	r3, #3
 80207e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80207e4:	2300      	movs	r3, #0
 80207e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80207e8:	2300      	movs	r3, #0
 80207ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80207ec:	1d3b      	adds	r3, r7, #4
 80207ee:	4619      	mov	r1, r3
 80207f0:	4805      	ldr	r0, [pc, #20]	@ (8020808 <MX_GPIO_Init+0xb0>)
 80207f2:	f000 fc8d 	bl	8021110 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80207f6:	bf00      	nop
 80207f8:	3718      	adds	r7, #24
 80207fa:	46bd      	mov	sp, r7
 80207fc:	bd80      	pop	{r7, pc}
 80207fe:	bf00      	nop
 8020800:	48000400 	.word	0x48000400
 8020804:	48000800 	.word	0x48000800
 8020808:	48000c00 	.word	0x48000c00

0802080c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 802080c:	b580      	push	{r7, lr}
 802080e:	b082      	sub	sp, #8
 8020810:	af00      	add	r7, sp, #0
 8020812:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8020814:	1d39      	adds	r1, r7, #4
 8020816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802081a:	2201      	movs	r2, #1
 802081c:	4803      	ldr	r0, [pc, #12]	@ (802082c <__io_putchar+0x20>)
 802081e:	f002 fc3b 	bl	8023098 <HAL_UART_Transmit>
  return ch;
 8020822:	687b      	ldr	r3, [r7, #4]
}
 8020824:	4618      	mov	r0, r3
 8020826:	3708      	adds	r7, #8
 8020828:	46bd      	mov	sp, r7
 802082a:	bd80      	pop	{r7, pc}
 802082c:	2000008c 	.word	0x2000008c

08020830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8020830:	b480      	push	{r7}
 8020832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8020834:	b672      	cpsid	i
}
 8020836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8020838:	bf00      	nop
 802083a:	e7fd      	b.n	8020838 <Error_Handler+0x8>

0802083c <LL_AHB2_GRP1_EnableClock>:
{
 802083c:	b480      	push	{r7}
 802083e:	b085      	sub	sp, #20
 8020840:	af00      	add	r7, sp, #0
 8020842:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8020844:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020848:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 802084a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	4313      	orrs	r3, r2
 8020852:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8020854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020858:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	4013      	ands	r3, r2
 802085e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8020860:	68fb      	ldr	r3, [r7, #12]
}
 8020862:	bf00      	nop
 8020864:	3714      	adds	r7, #20
 8020866:	46bd      	mov	sp, r7
 8020868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802086c:	4770      	bx	lr

0802086e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 802086e:	b480      	push	{r7}
 8020870:	b085      	sub	sp, #20
 8020872:	af00      	add	r7, sp, #0
 8020874:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8020876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802087a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 802087c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	4313      	orrs	r3, r2
 8020884:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8020886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802088a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	4013      	ands	r3, r2
 8020890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8020892:	68fb      	ldr	r3, [r7, #12]
}
 8020894:	bf00      	nop
 8020896:	3714      	adds	r7, #20
 8020898:	46bd      	mov	sp, r7
 802089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802089e:	4770      	bx	lr

080208a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80208a0:	b480      	push	{r7}
 80208a2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80208a4:	bf00      	nop
 80208a6:	46bd      	mov	sp, r7
 80208a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ac:	4770      	bx	lr
	...

080208b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	b09c      	sub	sp, #112	@ 0x70
 80208b4:	af00      	add	r7, sp, #0
 80208b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80208b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80208bc:	2200      	movs	r2, #0
 80208be:	601a      	str	r2, [r3, #0]
 80208c0:	605a      	str	r2, [r3, #4]
 80208c2:	609a      	str	r2, [r3, #8]
 80208c4:	60da      	str	r2, [r3, #12]
 80208c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80208c8:	f107 030c 	add.w	r3, r7, #12
 80208cc:	2250      	movs	r2, #80	@ 0x50
 80208ce:	2100      	movs	r1, #0
 80208d0:	4618      	mov	r0, r3
 80208d2:	f003 fe8e 	bl	80245f2 <memset>
  if(huart->Instance==USART1)
 80208d6:	687b      	ldr	r3, [r7, #4]
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	4a1a      	ldr	r2, [pc, #104]	@ (8020944 <HAL_UART_MspInit+0x94>)
 80208dc:	4293      	cmp	r3, r2
 80208de:	d12c      	bne.n	802093a <HAL_UART_MspInit+0x8a>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80208e0:	2301      	movs	r3, #1
 80208e2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80208e4:	2300      	movs	r3, #0
 80208e6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80208e8:	f107 030c 	add.w	r3, r7, #12
 80208ec:	4618      	mov	r0, r3
 80208ee:	f002 f8dc 	bl	8022aaa <HAL_RCCEx_PeriphCLKConfig>
 80208f2:	4603      	mov	r3, r0
 80208f4:	2b00      	cmp	r3, #0
 80208f6:	d001      	beq.n	80208fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80208f8:	f7ff ff9a 	bl	8020830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80208fc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8020900:	f7ff ffb5 	bl	802086e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020904:	2002      	movs	r0, #2
 8020906:	f7ff ff99 	bl	802083c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 802090a:	23c0      	movs	r3, #192	@ 0xc0
 802090c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802090e:	2302      	movs	r3, #2
 8020910:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020912:	2300      	movs	r3, #0
 8020914:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8020916:	2300      	movs	r3, #0
 8020918:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 802091a:	2307      	movs	r3, #7
 802091c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802091e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8020922:	4619      	mov	r1, r3
 8020924:	4808      	ldr	r0, [pc, #32]	@ (8020948 <HAL_UART_MspInit+0x98>)
 8020926:	f000 fbf3 	bl	8021110 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 802092a:	2200      	movs	r2, #0
 802092c:	2100      	movs	r1, #0
 802092e:	2024      	movs	r0, #36	@ 0x24
 8020930:	f000 fafb 	bl	8020f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8020934:	2024      	movs	r0, #36	@ 0x24
 8020936:	f000 fb12 	bl	8020f5e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 802093a:	bf00      	nop
 802093c:	3770      	adds	r7, #112	@ 0x70
 802093e:	46bd      	mov	sp, r7
 8020940:	bd80      	pop	{r7, pc}
 8020942:	bf00      	nop
 8020944:	40013800 	.word	0x40013800
 8020948:	48000400 	.word	0x48000400

0802094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802094c:	b480      	push	{r7}
 802094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8020950:	bf00      	nop
 8020952:	e7fd      	b.n	8020950 <NMI_Handler+0x4>

08020954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8020954:	b480      	push	{r7}
 8020956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8020958:	bf00      	nop
 802095a:	e7fd      	b.n	8020958 <HardFault_Handler+0x4>

0802095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 802095c:	b480      	push	{r7}
 802095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8020960:	bf00      	nop
 8020962:	e7fd      	b.n	8020960 <MemManage_Handler+0x4>

08020964 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8020964:	b480      	push	{r7}
 8020966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8020968:	bf00      	nop
 802096a:	e7fd      	b.n	8020968 <BusFault_Handler+0x4>

0802096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 802096c:	b480      	push	{r7}
 802096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8020970:	bf00      	nop
 8020972:	e7fd      	b.n	8020970 <UsageFault_Handler+0x4>

08020974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8020974:	b480      	push	{r7}
 8020976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8020978:	bf00      	nop
 802097a:	46bd      	mov	sp, r7
 802097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020980:	4770      	bx	lr

08020982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8020982:	b480      	push	{r7}
 8020984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8020986:	bf00      	nop
 8020988:	46bd      	mov	sp, r7
 802098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802098e:	4770      	bx	lr

08020990 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8020990:	b480      	push	{r7}
 8020992:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8020994:	bf00      	nop
 8020996:	46bd      	mov	sp, r7
 8020998:	f85d 7b04 	ldr.w	r7, [sp], #4
 802099c:	4770      	bx	lr

0802099e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 802099e:	b580      	push	{r7, lr}
 80209a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80209a2:	f000 f997 	bl	8020cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80209a6:	bf00      	nop
 80209a8:	bd80      	pop	{r7, pc}
	...

080209ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80209ac:	b580      	push	{r7, lr}
 80209ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80209b0:	4802      	ldr	r0, [pc, #8]	@ (80209bc <USART1_IRQHandler+0x10>)
 80209b2:	f002 fbff 	bl	80231b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80209b6:	bf00      	nop
 80209b8:	bd80      	pop	{r7, pc}
 80209ba:	bf00      	nop
 80209bc:	2000008c 	.word	0x2000008c

080209c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80209c0:	b580      	push	{r7, lr}
 80209c2:	b086      	sub	sp, #24
 80209c4:	af00      	add	r7, sp, #0
 80209c6:	60f8      	str	r0, [r7, #12]
 80209c8:	60b9      	str	r1, [r7, #8]
 80209ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80209cc:	2300      	movs	r3, #0
 80209ce:	617b      	str	r3, [r7, #20]
 80209d0:	e00a      	b.n	80209e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80209d2:	f3af 8000 	nop.w
 80209d6:	4601      	mov	r1, r0
 80209d8:	68bb      	ldr	r3, [r7, #8]
 80209da:	1c5a      	adds	r2, r3, #1
 80209dc:	60ba      	str	r2, [r7, #8]
 80209de:	b2ca      	uxtb	r2, r1
 80209e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	3301      	adds	r3, #1
 80209e6:	617b      	str	r3, [r7, #20]
 80209e8:	697a      	ldr	r2, [r7, #20]
 80209ea:	687b      	ldr	r3, [r7, #4]
 80209ec:	429a      	cmp	r2, r3
 80209ee:	dbf0      	blt.n	80209d2 <_read+0x12>
  }

  return len;
 80209f0:	687b      	ldr	r3, [r7, #4]
}
 80209f2:	4618      	mov	r0, r3
 80209f4:	3718      	adds	r7, #24
 80209f6:	46bd      	mov	sp, r7
 80209f8:	bd80      	pop	{r7, pc}

080209fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80209fa:	b580      	push	{r7, lr}
 80209fc:	b086      	sub	sp, #24
 80209fe:	af00      	add	r7, sp, #0
 8020a00:	60f8      	str	r0, [r7, #12]
 8020a02:	60b9      	str	r1, [r7, #8]
 8020a04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020a06:	2300      	movs	r3, #0
 8020a08:	617b      	str	r3, [r7, #20]
 8020a0a:	e009      	b.n	8020a20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8020a0c:	68bb      	ldr	r3, [r7, #8]
 8020a0e:	1c5a      	adds	r2, r3, #1
 8020a10:	60ba      	str	r2, [r7, #8]
 8020a12:	781b      	ldrb	r3, [r3, #0]
 8020a14:	4618      	mov	r0, r3
 8020a16:	f7ff fef9 	bl	802080c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8020a1a:	697b      	ldr	r3, [r7, #20]
 8020a1c:	3301      	adds	r3, #1
 8020a1e:	617b      	str	r3, [r7, #20]
 8020a20:	697a      	ldr	r2, [r7, #20]
 8020a22:	687b      	ldr	r3, [r7, #4]
 8020a24:	429a      	cmp	r2, r3
 8020a26:	dbf1      	blt.n	8020a0c <_write+0x12>
  }
  return len;
 8020a28:	687b      	ldr	r3, [r7, #4]
}
 8020a2a:	4618      	mov	r0, r3
 8020a2c:	3718      	adds	r7, #24
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	bd80      	pop	{r7, pc}

08020a32 <_close>:

int _close(int file)
{
 8020a32:	b480      	push	{r7}
 8020a34:	b083      	sub	sp, #12
 8020a36:	af00      	add	r7, sp, #0
 8020a38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8020a3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8020a3e:	4618      	mov	r0, r3
 8020a40:	370c      	adds	r7, #12
 8020a42:	46bd      	mov	sp, r7
 8020a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a48:	4770      	bx	lr

08020a4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8020a4a:	b480      	push	{r7}
 8020a4c:	b083      	sub	sp, #12
 8020a4e:	af00      	add	r7, sp, #0
 8020a50:	6078      	str	r0, [r7, #4]
 8020a52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8020a54:	683b      	ldr	r3, [r7, #0]
 8020a56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8020a5a:	605a      	str	r2, [r3, #4]
  return 0;
 8020a5c:	2300      	movs	r3, #0
}
 8020a5e:	4618      	mov	r0, r3
 8020a60:	370c      	adds	r7, #12
 8020a62:	46bd      	mov	sp, r7
 8020a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a68:	4770      	bx	lr

08020a6a <_isatty>:

int _isatty(int file)
{
 8020a6a:	b480      	push	{r7}
 8020a6c:	b083      	sub	sp, #12
 8020a6e:	af00      	add	r7, sp, #0
 8020a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8020a72:	2301      	movs	r3, #1
}
 8020a74:	4618      	mov	r0, r3
 8020a76:	370c      	adds	r7, #12
 8020a78:	46bd      	mov	sp, r7
 8020a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a7e:	4770      	bx	lr

08020a80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8020a80:	b480      	push	{r7}
 8020a82:	b085      	sub	sp, #20
 8020a84:	af00      	add	r7, sp, #0
 8020a86:	60f8      	str	r0, [r7, #12]
 8020a88:	60b9      	str	r1, [r7, #8]
 8020a8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8020a8c:	2300      	movs	r3, #0
}
 8020a8e:	4618      	mov	r0, r3
 8020a90:	3714      	adds	r7, #20
 8020a92:	46bd      	mov	sp, r7
 8020a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a98:	4770      	bx	lr
	...

08020a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8020a9c:	b580      	push	{r7, lr}
 8020a9e:	b086      	sub	sp, #24
 8020aa0:	af00      	add	r7, sp, #0
 8020aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8020aa4:	4a14      	ldr	r2, [pc, #80]	@ (8020af8 <_sbrk+0x5c>)
 8020aa6:	4b15      	ldr	r3, [pc, #84]	@ (8020afc <_sbrk+0x60>)
 8020aa8:	1ad3      	subs	r3, r2, r3
 8020aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8020aac:	697b      	ldr	r3, [r7, #20]
 8020aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8020ab0:	4b13      	ldr	r3, [pc, #76]	@ (8020b00 <_sbrk+0x64>)
 8020ab2:	681b      	ldr	r3, [r3, #0]
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	d102      	bne.n	8020abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8020ab8:	4b11      	ldr	r3, [pc, #68]	@ (8020b00 <_sbrk+0x64>)
 8020aba:	4a12      	ldr	r2, [pc, #72]	@ (8020b04 <_sbrk+0x68>)
 8020abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8020abe:	4b10      	ldr	r3, [pc, #64]	@ (8020b00 <_sbrk+0x64>)
 8020ac0:	681a      	ldr	r2, [r3, #0]
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	4413      	add	r3, r2
 8020ac6:	693a      	ldr	r2, [r7, #16]
 8020ac8:	429a      	cmp	r2, r3
 8020aca:	d207      	bcs.n	8020adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8020acc:	f003 fde0 	bl	8024690 <__errno>
 8020ad0:	4603      	mov	r3, r0
 8020ad2:	220c      	movs	r2, #12
 8020ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8020ad6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020ada:	e009      	b.n	8020af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8020adc:	4b08      	ldr	r3, [pc, #32]	@ (8020b00 <_sbrk+0x64>)
 8020ade:	681b      	ldr	r3, [r3, #0]
 8020ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8020ae2:	4b07      	ldr	r3, [pc, #28]	@ (8020b00 <_sbrk+0x64>)
 8020ae4:	681a      	ldr	r2, [r3, #0]
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	4413      	add	r3, r2
 8020aea:	4a05      	ldr	r2, [pc, #20]	@ (8020b00 <_sbrk+0x64>)
 8020aec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8020aee:	68fb      	ldr	r3, [r7, #12]
}
 8020af0:	4618      	mov	r0, r3
 8020af2:	3718      	adds	r7, #24
 8020af4:	46bd      	mov	sp, r7
 8020af6:	bd80      	pop	{r7, pc}
 8020af8:	20030000 	.word	0x20030000
 8020afc:	00000400 	.word	0x00000400
 8020b00:	20000120 	.word	0x20000120
 8020b04:	20000278 	.word	0x20000278

08020b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8020b08:	b480      	push	{r7}
 8020b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8020b0c:	4b24      	ldr	r3, [pc, #144]	@ (8020ba0 <SystemInit+0x98>)
 8020b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020b12:	4a23      	ldr	r2, [pc, #140]	@ (8020ba0 <SystemInit+0x98>)
 8020b14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8020b18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8020b1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b20:	681b      	ldr	r3, [r3, #0]
 8020b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8020b26:	f043 0301 	orr.w	r3, r3, #1
 8020b2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8020b2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b30:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8020b34:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8020b36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b3a:	681a      	ldr	r2, [r3, #0]
 8020b3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8020b40:	4b18      	ldr	r3, [pc, #96]	@ (8020ba4 <SystemInit+0x9c>)
 8020b42:	4013      	ands	r3, r2
 8020b44:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8020b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8020b4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8020b52:	f023 0305 	bic.w	r3, r3, #5
 8020b56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8020b5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020b62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8020b66:	f023 0301 	bic.w	r3, r3, #1
 8020b6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8020b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b72:	4a0d      	ldr	r2, [pc, #52]	@ (8020ba8 <SystemInit+0xa0>)
 8020b74:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8020b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8020ba8 <SystemInit+0xa0>)
 8020b7c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8020b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b82:	681b      	ldr	r3, [r3, #0]
 8020b84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8020b88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8020b8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8020b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8020b92:	2200      	movs	r2, #0
 8020b94:	619a      	str	r2, [r3, #24]
}
 8020b96:	bf00      	nop
 8020b98:	46bd      	mov	sp, r7
 8020b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b9e:	4770      	bx	lr
 8020ba0:	e000ed00 	.word	0xe000ed00
 8020ba4:	faf6fefb 	.word	0xfaf6fefb
 8020ba8:	22041000 	.word	0x22041000

08020bac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8020bac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8020bae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8020bb0:	3304      	adds	r3, #4

08020bb2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8020bb2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8020bb4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8020bb6:	d3f9      	bcc.n	8020bac <CopyDataInit>
  bx lr
 8020bb8:	4770      	bx	lr

08020bba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8020bba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8020bbc:	3004      	adds	r0, #4

08020bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8020bbe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8020bc0:	d3fb      	bcc.n	8020bba <FillZerobss>
  bx lr
 8020bc2:	4770      	bx	lr

08020bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8020bc4:	480c      	ldr	r0, [pc, #48]	@ (8020bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8020bc6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8020bc8:	f7ff ff9e 	bl	8020b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8020bcc:	480b      	ldr	r0, [pc, #44]	@ (8020bfc <LoopForever+0x6>)
 8020bce:	490c      	ldr	r1, [pc, #48]	@ (8020c00 <LoopForever+0xa>)
 8020bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8020c04 <LoopForever+0xe>)
 8020bd2:	2300      	movs	r3, #0
 8020bd4:	f7ff ffed 	bl	8020bb2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8020bd8:	480b      	ldr	r0, [pc, #44]	@ (8020c08 <LoopForever+0x12>)
 8020bda:	490c      	ldr	r1, [pc, #48]	@ (8020c0c <LoopForever+0x16>)
 8020bdc:	4a0c      	ldr	r2, [pc, #48]	@ (8020c10 <LoopForever+0x1a>)
 8020bde:	2300      	movs	r3, #0
 8020be0:	f7ff ffe7 	bl	8020bb2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8020be4:	480b      	ldr	r0, [pc, #44]	@ (8020c14 <LoopForever+0x1e>)
 8020be6:	490c      	ldr	r1, [pc, #48]	@ (8020c18 <LoopForever+0x22>)
 8020be8:	2300      	movs	r3, #0
 8020bea:	f7ff ffe8 	bl	8020bbe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8020bee:	f003 fd55 	bl	802469c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8020bf2:	f7ff fcc5 	bl	8020580 <main>

08020bf6 <LoopForever>:

LoopForever:
  b LoopForever
 8020bf6:	e7fe      	b.n	8020bf6 <LoopForever>
  ldr   r0, =_estack
 8020bf8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8020bfc:	20000008 	.word	0x20000008
 8020c00:	20000070 	.word	0x20000070
 8020c04:	080253a8 	.word	0x080253a8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8020c08:	20030000 	.word	0x20030000
 8020c0c:	20030000 	.word	0x20030000
 8020c10:	08025410 	.word	0x08025410
  INIT_BSS _sbss, _ebss
 8020c14:	20000070 	.word	0x20000070
 8020c18:	20000274 	.word	0x20000274

08020c1c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8020c1c:	e7fe      	b.n	8020c1c <ADC1_IRQHandler>
	...

08020c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8020c20:	b580      	push	{r7, lr}
 8020c22:	b082      	sub	sp, #8
 8020c24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8020c26:	2300      	movs	r3, #0
 8020c28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8020c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8020c5c <HAL_Init+0x3c>)
 8020c2c:	681b      	ldr	r3, [r3, #0]
 8020c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8020c5c <HAL_Init+0x3c>)
 8020c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8020c34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8020c36:	2003      	movs	r0, #3
 8020c38:	f000 f96c 	bl	8020f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8020c3c:	2000      	movs	r0, #0
 8020c3e:	f000 f80f 	bl	8020c60 <HAL_InitTick>
 8020c42:	4603      	mov	r3, r0
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	d002      	beq.n	8020c4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8020c48:	2301      	movs	r3, #1
 8020c4a:	71fb      	strb	r3, [r7, #7]
 8020c4c:	e001      	b.n	8020c52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8020c4e:	f7ff fe27 	bl	80208a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8020c52:	79fb      	ldrb	r3, [r7, #7]
}
 8020c54:	4618      	mov	r0, r3
 8020c56:	3708      	adds	r7, #8
 8020c58:	46bd      	mov	sp, r7
 8020c5a:	bd80      	pop	{r7, pc}
 8020c5c:	58004000 	.word	0x58004000

08020c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8020c60:	b580      	push	{r7, lr}
 8020c62:	b084      	sub	sp, #16
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8020c68:	2300      	movs	r3, #0
 8020c6a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8020c6c:	4b17      	ldr	r3, [pc, #92]	@ (8020ccc <HAL_InitTick+0x6c>)
 8020c6e:	781b      	ldrb	r3, [r3, #0]
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d024      	beq.n	8020cbe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8020c74:	f001 fc88 	bl	8022588 <HAL_RCC_GetHCLKFreq>
 8020c78:	4602      	mov	r2, r0
 8020c7a:	4b14      	ldr	r3, [pc, #80]	@ (8020ccc <HAL_InitTick+0x6c>)
 8020c7c:	781b      	ldrb	r3, [r3, #0]
 8020c7e:	4619      	mov	r1, r3
 8020c80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020c84:	fbb3 f3f1 	udiv	r3, r3, r1
 8020c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8020c8c:	4618      	mov	r0, r3
 8020c8e:	f000 f974 	bl	8020f7a <HAL_SYSTICK_Config>
 8020c92:	4603      	mov	r3, r0
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d10f      	bne.n	8020cb8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	2b0f      	cmp	r3, #15
 8020c9c:	d809      	bhi.n	8020cb2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8020c9e:	2200      	movs	r2, #0
 8020ca0:	6879      	ldr	r1, [r7, #4]
 8020ca2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020ca6:	f000 f940 	bl	8020f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8020caa:	4a09      	ldr	r2, [pc, #36]	@ (8020cd0 <HAL_InitTick+0x70>)
 8020cac:	687b      	ldr	r3, [r7, #4]
 8020cae:	6013      	str	r3, [r2, #0]
 8020cb0:	e007      	b.n	8020cc2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8020cb2:	2301      	movs	r3, #1
 8020cb4:	73fb      	strb	r3, [r7, #15]
 8020cb6:	e004      	b.n	8020cc2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8020cb8:	2301      	movs	r3, #1
 8020cba:	73fb      	strb	r3, [r7, #15]
 8020cbc:	e001      	b.n	8020cc2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8020cbe:	2301      	movs	r3, #1
 8020cc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8020cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8020cc4:	4618      	mov	r0, r3
 8020cc6:	3710      	adds	r7, #16
 8020cc8:	46bd      	mov	sp, r7
 8020cca:	bd80      	pop	{r7, pc}
 8020ccc:	20000010 	.word	0x20000010
 8020cd0:	2000000c 	.word	0x2000000c

08020cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8020cd4:	b480      	push	{r7}
 8020cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8020cd8:	4b06      	ldr	r3, [pc, #24]	@ (8020cf4 <HAL_IncTick+0x20>)
 8020cda:	781b      	ldrb	r3, [r3, #0]
 8020cdc:	461a      	mov	r2, r3
 8020cde:	4b06      	ldr	r3, [pc, #24]	@ (8020cf8 <HAL_IncTick+0x24>)
 8020ce0:	681b      	ldr	r3, [r3, #0]
 8020ce2:	4413      	add	r3, r2
 8020ce4:	4a04      	ldr	r2, [pc, #16]	@ (8020cf8 <HAL_IncTick+0x24>)
 8020ce6:	6013      	str	r3, [r2, #0]
}
 8020ce8:	bf00      	nop
 8020cea:	46bd      	mov	sp, r7
 8020cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cf0:	4770      	bx	lr
 8020cf2:	bf00      	nop
 8020cf4:	20000010 	.word	0x20000010
 8020cf8:	20000124 	.word	0x20000124

08020cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8020cfc:	b480      	push	{r7}
 8020cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8020d00:	4b03      	ldr	r3, [pc, #12]	@ (8020d10 <HAL_GetTick+0x14>)
 8020d02:	681b      	ldr	r3, [r3, #0]
}
 8020d04:	4618      	mov	r0, r3
 8020d06:	46bd      	mov	sp, r7
 8020d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d0c:	4770      	bx	lr
 8020d0e:	bf00      	nop
 8020d10:	20000124 	.word	0x20000124

08020d14 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8020d14:	b480      	push	{r7}
 8020d16:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8020d18:	4b03      	ldr	r3, [pc, #12]	@ (8020d28 <HAL_GetTickPrio+0x14>)
 8020d1a:	681b      	ldr	r3, [r3, #0]
}
 8020d1c:	4618      	mov	r0, r3
 8020d1e:	46bd      	mov	sp, r7
 8020d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d24:	4770      	bx	lr
 8020d26:	bf00      	nop
 8020d28:	2000000c 	.word	0x2000000c

08020d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8020d2c:	b580      	push	{r7, lr}
 8020d2e:	b084      	sub	sp, #16
 8020d30:	af00      	add	r7, sp, #0
 8020d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8020d34:	f7ff ffe2 	bl	8020cfc <HAL_GetTick>
 8020d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8020d3e:	68fb      	ldr	r3, [r7, #12]
 8020d40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020d44:	d005      	beq.n	8020d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8020d46:	4b0a      	ldr	r3, [pc, #40]	@ (8020d70 <HAL_Delay+0x44>)
 8020d48:	781b      	ldrb	r3, [r3, #0]
 8020d4a:	461a      	mov	r2, r3
 8020d4c:	68fb      	ldr	r3, [r7, #12]
 8020d4e:	4413      	add	r3, r2
 8020d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8020d52:	bf00      	nop
 8020d54:	f7ff ffd2 	bl	8020cfc <HAL_GetTick>
 8020d58:	4602      	mov	r2, r0
 8020d5a:	68bb      	ldr	r3, [r7, #8]
 8020d5c:	1ad3      	subs	r3, r2, r3
 8020d5e:	68fa      	ldr	r2, [r7, #12]
 8020d60:	429a      	cmp	r2, r3
 8020d62:	d8f7      	bhi.n	8020d54 <HAL_Delay+0x28>
  {
  }
}
 8020d64:	bf00      	nop
 8020d66:	bf00      	nop
 8020d68:	3710      	adds	r7, #16
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	bd80      	pop	{r7, pc}
 8020d6e:	bf00      	nop
 8020d70:	20000010 	.word	0x20000010

08020d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020d74:	b480      	push	{r7}
 8020d76:	b085      	sub	sp, #20
 8020d78:	af00      	add	r7, sp, #0
 8020d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8020d7c:	687b      	ldr	r3, [r7, #4]
 8020d7e:	f003 0307 	and.w	r3, r3, #7
 8020d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8020d84:	4b0c      	ldr	r3, [pc, #48]	@ (8020db8 <__NVIC_SetPriorityGrouping+0x44>)
 8020d86:	68db      	ldr	r3, [r3, #12]
 8020d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8020d8a:	68ba      	ldr	r2, [r7, #8]
 8020d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8020d90:	4013      	ands	r3, r2
 8020d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8020d94:	68fb      	ldr	r3, [r7, #12]
 8020d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8020d98:	68bb      	ldr	r3, [r7, #8]
 8020d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8020d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8020da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8020da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8020da6:	4a04      	ldr	r2, [pc, #16]	@ (8020db8 <__NVIC_SetPriorityGrouping+0x44>)
 8020da8:	68bb      	ldr	r3, [r7, #8]
 8020daa:	60d3      	str	r3, [r2, #12]
}
 8020dac:	bf00      	nop
 8020dae:	3714      	adds	r7, #20
 8020db0:	46bd      	mov	sp, r7
 8020db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020db6:	4770      	bx	lr
 8020db8:	e000ed00 	.word	0xe000ed00

08020dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8020dbc:	b480      	push	{r7}
 8020dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8020dc0:	4b04      	ldr	r3, [pc, #16]	@ (8020dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8020dc2:	68db      	ldr	r3, [r3, #12]
 8020dc4:	0a1b      	lsrs	r3, r3, #8
 8020dc6:	f003 0307 	and.w	r3, r3, #7
}
 8020dca:	4618      	mov	r0, r3
 8020dcc:	46bd      	mov	sp, r7
 8020dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dd2:	4770      	bx	lr
 8020dd4:	e000ed00 	.word	0xe000ed00

08020dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020dd8:	b480      	push	{r7}
 8020dda:	b083      	sub	sp, #12
 8020ddc:	af00      	add	r7, sp, #0
 8020dde:	4603      	mov	r3, r0
 8020de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	db0b      	blt.n	8020e02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8020dea:	79fb      	ldrb	r3, [r7, #7]
 8020dec:	f003 021f 	and.w	r2, r3, #31
 8020df0:	4907      	ldr	r1, [pc, #28]	@ (8020e10 <__NVIC_EnableIRQ+0x38>)
 8020df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020df6:	095b      	lsrs	r3, r3, #5
 8020df8:	2001      	movs	r0, #1
 8020dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8020dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8020e02:	bf00      	nop
 8020e04:	370c      	adds	r7, #12
 8020e06:	46bd      	mov	sp, r7
 8020e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e0c:	4770      	bx	lr
 8020e0e:	bf00      	nop
 8020e10:	e000e100 	.word	0xe000e100

08020e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8020e14:	b480      	push	{r7}
 8020e16:	b083      	sub	sp, #12
 8020e18:	af00      	add	r7, sp, #0
 8020e1a:	4603      	mov	r3, r0
 8020e1c:	6039      	str	r1, [r7, #0]
 8020e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8020e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	db0a      	blt.n	8020e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020e28:	683b      	ldr	r3, [r7, #0]
 8020e2a:	b2da      	uxtb	r2, r3
 8020e2c:	490c      	ldr	r1, [pc, #48]	@ (8020e60 <__NVIC_SetPriority+0x4c>)
 8020e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020e32:	0112      	lsls	r2, r2, #4
 8020e34:	b2d2      	uxtb	r2, r2
 8020e36:	440b      	add	r3, r1
 8020e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8020e3c:	e00a      	b.n	8020e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020e3e:	683b      	ldr	r3, [r7, #0]
 8020e40:	b2da      	uxtb	r2, r3
 8020e42:	4908      	ldr	r1, [pc, #32]	@ (8020e64 <__NVIC_SetPriority+0x50>)
 8020e44:	79fb      	ldrb	r3, [r7, #7]
 8020e46:	f003 030f 	and.w	r3, r3, #15
 8020e4a:	3b04      	subs	r3, #4
 8020e4c:	0112      	lsls	r2, r2, #4
 8020e4e:	b2d2      	uxtb	r2, r2
 8020e50:	440b      	add	r3, r1
 8020e52:	761a      	strb	r2, [r3, #24]
}
 8020e54:	bf00      	nop
 8020e56:	370c      	adds	r7, #12
 8020e58:	46bd      	mov	sp, r7
 8020e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e5e:	4770      	bx	lr
 8020e60:	e000e100 	.word	0xe000e100
 8020e64:	e000ed00 	.word	0xe000ed00

08020e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020e68:	b480      	push	{r7}
 8020e6a:	b089      	sub	sp, #36	@ 0x24
 8020e6c:	af00      	add	r7, sp, #0
 8020e6e:	60f8      	str	r0, [r7, #12]
 8020e70:	60b9      	str	r1, [r7, #8]
 8020e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8020e74:	68fb      	ldr	r3, [r7, #12]
 8020e76:	f003 0307 	and.w	r3, r3, #7
 8020e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8020e7c:	69fb      	ldr	r3, [r7, #28]
 8020e7e:	f1c3 0307 	rsb	r3, r3, #7
 8020e82:	2b04      	cmp	r3, #4
 8020e84:	bf28      	it	cs
 8020e86:	2304      	movcs	r3, #4
 8020e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8020e8a:	69fb      	ldr	r3, [r7, #28]
 8020e8c:	3304      	adds	r3, #4
 8020e8e:	2b06      	cmp	r3, #6
 8020e90:	d902      	bls.n	8020e98 <NVIC_EncodePriority+0x30>
 8020e92:	69fb      	ldr	r3, [r7, #28]
 8020e94:	3b03      	subs	r3, #3
 8020e96:	e000      	b.n	8020e9a <NVIC_EncodePriority+0x32>
 8020e98:	2300      	movs	r3, #0
 8020e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020e9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020ea0:	69bb      	ldr	r3, [r7, #24]
 8020ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8020ea6:	43da      	mvns	r2, r3
 8020ea8:	68bb      	ldr	r3, [r7, #8]
 8020eaa:	401a      	ands	r2, r3
 8020eac:	697b      	ldr	r3, [r7, #20]
 8020eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8020eb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8020eb4:	697b      	ldr	r3, [r7, #20]
 8020eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8020eba:	43d9      	mvns	r1, r3
 8020ebc:	687b      	ldr	r3, [r7, #4]
 8020ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8020ec0:	4313      	orrs	r3, r2
         );
}
 8020ec2:	4618      	mov	r0, r3
 8020ec4:	3724      	adds	r7, #36	@ 0x24
 8020ec6:	46bd      	mov	sp, r7
 8020ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ecc:	4770      	bx	lr
	...

08020ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8020ed0:	b580      	push	{r7, lr}
 8020ed2:	b082      	sub	sp, #8
 8020ed4:	af00      	add	r7, sp, #0
 8020ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	3b01      	subs	r3, #1
 8020edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8020ee0:	d301      	bcc.n	8020ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8020ee2:	2301      	movs	r3, #1
 8020ee4:	e00f      	b.n	8020f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8020ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8020f10 <SysTick_Config+0x40>)
 8020ee8:	687b      	ldr	r3, [r7, #4]
 8020eea:	3b01      	subs	r3, #1
 8020eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8020eee:	210f      	movs	r1, #15
 8020ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020ef4:	f7ff ff8e 	bl	8020e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8020ef8:	4b05      	ldr	r3, [pc, #20]	@ (8020f10 <SysTick_Config+0x40>)
 8020efa:	2200      	movs	r2, #0
 8020efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8020efe:	4b04      	ldr	r3, [pc, #16]	@ (8020f10 <SysTick_Config+0x40>)
 8020f00:	2207      	movs	r2, #7
 8020f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8020f04:	2300      	movs	r3, #0
}
 8020f06:	4618      	mov	r0, r3
 8020f08:	3708      	adds	r7, #8
 8020f0a:	46bd      	mov	sp, r7
 8020f0c:	bd80      	pop	{r7, pc}
 8020f0e:	bf00      	nop
 8020f10:	e000e010 	.word	0xe000e010

08020f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8020f14:	b580      	push	{r7, lr}
 8020f16:	b082      	sub	sp, #8
 8020f18:	af00      	add	r7, sp, #0
 8020f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8020f1c:	6878      	ldr	r0, [r7, #4]
 8020f1e:	f7ff ff29 	bl	8020d74 <__NVIC_SetPriorityGrouping>
}
 8020f22:	bf00      	nop
 8020f24:	3708      	adds	r7, #8
 8020f26:	46bd      	mov	sp, r7
 8020f28:	bd80      	pop	{r7, pc}

08020f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8020f2a:	b580      	push	{r7, lr}
 8020f2c:	b086      	sub	sp, #24
 8020f2e:	af00      	add	r7, sp, #0
 8020f30:	4603      	mov	r3, r0
 8020f32:	60b9      	str	r1, [r7, #8]
 8020f34:	607a      	str	r2, [r7, #4]
 8020f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8020f38:	f7ff ff40 	bl	8020dbc <__NVIC_GetPriorityGrouping>
 8020f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8020f3e:	687a      	ldr	r2, [r7, #4]
 8020f40:	68b9      	ldr	r1, [r7, #8]
 8020f42:	6978      	ldr	r0, [r7, #20]
 8020f44:	f7ff ff90 	bl	8020e68 <NVIC_EncodePriority>
 8020f48:	4602      	mov	r2, r0
 8020f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020f4e:	4611      	mov	r1, r2
 8020f50:	4618      	mov	r0, r3
 8020f52:	f7ff ff5f 	bl	8020e14 <__NVIC_SetPriority>
}
 8020f56:	bf00      	nop
 8020f58:	3718      	adds	r7, #24
 8020f5a:	46bd      	mov	sp, r7
 8020f5c:	bd80      	pop	{r7, pc}

08020f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8020f5e:	b580      	push	{r7, lr}
 8020f60:	b082      	sub	sp, #8
 8020f62:	af00      	add	r7, sp, #0
 8020f64:	4603      	mov	r3, r0
 8020f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8020f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	f7ff ff33 	bl	8020dd8 <__NVIC_EnableIRQ>
}
 8020f72:	bf00      	nop
 8020f74:	3708      	adds	r7, #8
 8020f76:	46bd      	mov	sp, r7
 8020f78:	bd80      	pop	{r7, pc}

08020f7a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8020f7a:	b580      	push	{r7, lr}
 8020f7c:	b082      	sub	sp, #8
 8020f7e:	af00      	add	r7, sp, #0
 8020f80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8020f82:	6878      	ldr	r0, [r7, #4]
 8020f84:	f7ff ffa4 	bl	8020ed0 <SysTick_Config>
 8020f88:	4603      	mov	r3, r0
}
 8020f8a:	4618      	mov	r0, r3
 8020f8c:	3708      	adds	r7, #8
 8020f8e:	46bd      	mov	sp, r7
 8020f90:	bd80      	pop	{r7, pc}

08020f92 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8020f92:	b480      	push	{r7}
 8020f94:	b083      	sub	sp, #12
 8020f96:	af00      	add	r7, sp, #0
 8020f98:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	2b00      	cmp	r3, #0
 8020f9e:	d101      	bne.n	8020fa4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8020fa0:	2301      	movs	r3, #1
 8020fa2:	e04f      	b.n	8021044 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8020faa:	b2db      	uxtb	r3, r3
 8020fac:	2b02      	cmp	r3, #2
 8020fae:	d008      	beq.n	8020fc2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	2204      	movs	r2, #4
 8020fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8020fb6:	687b      	ldr	r3, [r7, #4]
 8020fb8:	2200      	movs	r2, #0
 8020fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8020fbe:	2301      	movs	r3, #1
 8020fc0:	e040      	b.n	8021044 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	681a      	ldr	r2, [r3, #0]
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	681b      	ldr	r3, [r3, #0]
 8020fcc:	f022 020e 	bic.w	r2, r2, #14
 8020fd0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8020fd2:	687b      	ldr	r3, [r7, #4]
 8020fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020fd6:	681a      	ldr	r2, [r3, #0]
 8020fd8:	687b      	ldr	r3, [r7, #4]
 8020fda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8020fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	681a      	ldr	r2, [r3, #0]
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	681b      	ldr	r3, [r3, #0]
 8020fec:	f022 0201 	bic.w	r2, r2, #1
 8020ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020ff6:	f003 021c 	and.w	r2, r3, #28
 8020ffa:	687b      	ldr	r3, [r7, #4]
 8020ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8020ffe:	2101      	movs	r1, #1
 8021000:	fa01 f202 	lsl.w	r2, r1, r2
 8021004:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 802100a:	687a      	ldr	r2, [r7, #4]
 802100c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 802100e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8021010:	687b      	ldr	r3, [r7, #4]
 8021012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021014:	2b00      	cmp	r3, #0
 8021016:	d00c      	beq.n	8021032 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802101c:	681a      	ldr	r2, [r3, #0]
 802101e:	687b      	ldr	r3, [r7, #4]
 8021020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021022:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8021026:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802102c:	687a      	ldr	r2, [r7, #4]
 802102e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8021030:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8021032:	687b      	ldr	r3, [r7, #4]
 8021034:	2201      	movs	r2, #1
 8021036:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 802103a:	687b      	ldr	r3, [r7, #4]
 802103c:	2200      	movs	r2, #0
 802103e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8021042:	2300      	movs	r3, #0
}
 8021044:	4618      	mov	r0, r3
 8021046:	370c      	adds	r7, #12
 8021048:	46bd      	mov	sp, r7
 802104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802104e:	4770      	bx	lr

08021050 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8021050:	b580      	push	{r7, lr}
 8021052:	b084      	sub	sp, #16
 8021054:	af00      	add	r7, sp, #0
 8021056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8021058:	2300      	movs	r3, #0
 802105a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8021062:	b2db      	uxtb	r3, r3
 8021064:	2b02      	cmp	r3, #2
 8021066:	d005      	beq.n	8021074 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	2204      	movs	r2, #4
 802106c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 802106e:	2301      	movs	r3, #1
 8021070:	73fb      	strb	r3, [r7, #15]
 8021072:	e047      	b.n	8021104 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	681b      	ldr	r3, [r3, #0]
 8021078:	681a      	ldr	r2, [r3, #0]
 802107a:	687b      	ldr	r3, [r7, #4]
 802107c:	681b      	ldr	r3, [r3, #0]
 802107e:	f022 020e 	bic.w	r2, r2, #14
 8021082:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8021084:	687b      	ldr	r3, [r7, #4]
 8021086:	681b      	ldr	r3, [r3, #0]
 8021088:	681a      	ldr	r2, [r3, #0]
 802108a:	687b      	ldr	r3, [r7, #4]
 802108c:	681b      	ldr	r3, [r3, #0]
 802108e:	f022 0201 	bic.w	r2, r2, #1
 8021092:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8021094:	687b      	ldr	r3, [r7, #4]
 8021096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8021098:	681a      	ldr	r2, [r3, #0]
 802109a:	687b      	ldr	r3, [r7, #4]
 802109c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 802109e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80210a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80210a8:	f003 021c 	and.w	r2, r3, #28
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80210b0:	2101      	movs	r1, #1
 80210b2:	fa01 f202 	lsl.w	r2, r1, r2
 80210b6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80210b8:	687b      	ldr	r3, [r7, #4]
 80210ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80210bc:	687a      	ldr	r2, [r7, #4]
 80210be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80210c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d00c      	beq.n	80210e4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80210ce:	681a      	ldr	r2, [r3, #0]
 80210d0:	687b      	ldr	r3, [r7, #4]
 80210d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80210d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80210d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80210da:	687b      	ldr	r3, [r7, #4]
 80210dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80210de:	687a      	ldr	r2, [r7, #4]
 80210e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80210e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	2201      	movs	r2, #1
 80210e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	2200      	movs	r2, #0
 80210f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d003      	beq.n	8021104 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80210fc:	687b      	ldr	r3, [r7, #4]
 80210fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021100:	6878      	ldr	r0, [r7, #4]
 8021102:	4798      	blx	r3
    }
  }
  return status;
 8021104:	7bfb      	ldrb	r3, [r7, #15]
}
 8021106:	4618      	mov	r0, r3
 8021108:	3710      	adds	r7, #16
 802110a:	46bd      	mov	sp, r7
 802110c:	bd80      	pop	{r7, pc}
	...

08021110 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8021110:	b480      	push	{r7}
 8021112:	b087      	sub	sp, #28
 8021114:	af00      	add	r7, sp, #0
 8021116:	6078      	str	r0, [r7, #4]
 8021118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 802111a:	2300      	movs	r3, #0
 802111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 802111e:	e14c      	b.n	80213ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8021120:	683b      	ldr	r3, [r7, #0]
 8021122:	681a      	ldr	r2, [r3, #0]
 8021124:	2101      	movs	r1, #1
 8021126:	697b      	ldr	r3, [r7, #20]
 8021128:	fa01 f303 	lsl.w	r3, r1, r3
 802112c:	4013      	ands	r3, r2
 802112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8021130:	68fb      	ldr	r3, [r7, #12]
 8021132:	2b00      	cmp	r3, #0
 8021134:	f000 813e 	beq.w	80213b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8021138:	683b      	ldr	r3, [r7, #0]
 802113a:	685b      	ldr	r3, [r3, #4]
 802113c:	f003 0303 	and.w	r3, r3, #3
 8021140:	2b01      	cmp	r3, #1
 8021142:	d005      	beq.n	8021150 <HAL_GPIO_Init+0x40>
 8021144:	683b      	ldr	r3, [r7, #0]
 8021146:	685b      	ldr	r3, [r3, #4]
 8021148:	f003 0303 	and.w	r3, r3, #3
 802114c:	2b02      	cmp	r3, #2
 802114e:	d130      	bne.n	80211b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8021150:	687b      	ldr	r3, [r7, #4]
 8021152:	689b      	ldr	r3, [r3, #8]
 8021154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8021156:	697b      	ldr	r3, [r7, #20]
 8021158:	005b      	lsls	r3, r3, #1
 802115a:	2203      	movs	r2, #3
 802115c:	fa02 f303 	lsl.w	r3, r2, r3
 8021160:	43db      	mvns	r3, r3
 8021162:	693a      	ldr	r2, [r7, #16]
 8021164:	4013      	ands	r3, r2
 8021166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8021168:	683b      	ldr	r3, [r7, #0]
 802116a:	68da      	ldr	r2, [r3, #12]
 802116c:	697b      	ldr	r3, [r7, #20]
 802116e:	005b      	lsls	r3, r3, #1
 8021170:	fa02 f303 	lsl.w	r3, r2, r3
 8021174:	693a      	ldr	r2, [r7, #16]
 8021176:	4313      	orrs	r3, r2
 8021178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 802117a:	687b      	ldr	r3, [r7, #4]
 802117c:	693a      	ldr	r2, [r7, #16]
 802117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	685b      	ldr	r3, [r3, #4]
 8021184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8021186:	2201      	movs	r2, #1
 8021188:	697b      	ldr	r3, [r7, #20]
 802118a:	fa02 f303 	lsl.w	r3, r2, r3
 802118e:	43db      	mvns	r3, r3
 8021190:	693a      	ldr	r2, [r7, #16]
 8021192:	4013      	ands	r3, r2
 8021194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8021196:	683b      	ldr	r3, [r7, #0]
 8021198:	685b      	ldr	r3, [r3, #4]
 802119a:	091b      	lsrs	r3, r3, #4
 802119c:	f003 0201 	and.w	r2, r3, #1
 80211a0:	697b      	ldr	r3, [r7, #20]
 80211a2:	fa02 f303 	lsl.w	r3, r2, r3
 80211a6:	693a      	ldr	r2, [r7, #16]
 80211a8:	4313      	orrs	r3, r2
 80211aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	693a      	ldr	r2, [r7, #16]
 80211b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80211b2:	683b      	ldr	r3, [r7, #0]
 80211b4:	685b      	ldr	r3, [r3, #4]
 80211b6:	f003 0303 	and.w	r3, r3, #3
 80211ba:	2b03      	cmp	r3, #3
 80211bc:	d017      	beq.n	80211ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	68db      	ldr	r3, [r3, #12]
 80211c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80211c4:	697b      	ldr	r3, [r7, #20]
 80211c6:	005b      	lsls	r3, r3, #1
 80211c8:	2203      	movs	r2, #3
 80211ca:	fa02 f303 	lsl.w	r3, r2, r3
 80211ce:	43db      	mvns	r3, r3
 80211d0:	693a      	ldr	r2, [r7, #16]
 80211d2:	4013      	ands	r3, r2
 80211d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80211d6:	683b      	ldr	r3, [r7, #0]
 80211d8:	689a      	ldr	r2, [r3, #8]
 80211da:	697b      	ldr	r3, [r7, #20]
 80211dc:	005b      	lsls	r3, r3, #1
 80211de:	fa02 f303 	lsl.w	r3, r2, r3
 80211e2:	693a      	ldr	r2, [r7, #16]
 80211e4:	4313      	orrs	r3, r2
 80211e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80211e8:	687b      	ldr	r3, [r7, #4]
 80211ea:	693a      	ldr	r2, [r7, #16]
 80211ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80211ee:	683b      	ldr	r3, [r7, #0]
 80211f0:	685b      	ldr	r3, [r3, #4]
 80211f2:	f003 0303 	and.w	r3, r3, #3
 80211f6:	2b02      	cmp	r3, #2
 80211f8:	d123      	bne.n	8021242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80211fa:	697b      	ldr	r3, [r7, #20]
 80211fc:	08da      	lsrs	r2, r3, #3
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	3208      	adds	r2, #8
 8021202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8021208:	697b      	ldr	r3, [r7, #20]
 802120a:	f003 0307 	and.w	r3, r3, #7
 802120e:	009b      	lsls	r3, r3, #2
 8021210:	220f      	movs	r2, #15
 8021212:	fa02 f303 	lsl.w	r3, r2, r3
 8021216:	43db      	mvns	r3, r3
 8021218:	693a      	ldr	r2, [r7, #16]
 802121a:	4013      	ands	r3, r2
 802121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 802121e:	683b      	ldr	r3, [r7, #0]
 8021220:	691a      	ldr	r2, [r3, #16]
 8021222:	697b      	ldr	r3, [r7, #20]
 8021224:	f003 0307 	and.w	r3, r3, #7
 8021228:	009b      	lsls	r3, r3, #2
 802122a:	fa02 f303 	lsl.w	r3, r2, r3
 802122e:	693a      	ldr	r2, [r7, #16]
 8021230:	4313      	orrs	r3, r2
 8021232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8021234:	697b      	ldr	r3, [r7, #20]
 8021236:	08da      	lsrs	r2, r3, #3
 8021238:	687b      	ldr	r3, [r7, #4]
 802123a:	3208      	adds	r2, #8
 802123c:	6939      	ldr	r1, [r7, #16]
 802123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	681b      	ldr	r3, [r3, #0]
 8021246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8021248:	697b      	ldr	r3, [r7, #20]
 802124a:	005b      	lsls	r3, r3, #1
 802124c:	2203      	movs	r2, #3
 802124e:	fa02 f303 	lsl.w	r3, r2, r3
 8021252:	43db      	mvns	r3, r3
 8021254:	693a      	ldr	r2, [r7, #16]
 8021256:	4013      	ands	r3, r2
 8021258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 802125a:	683b      	ldr	r3, [r7, #0]
 802125c:	685b      	ldr	r3, [r3, #4]
 802125e:	f003 0203 	and.w	r2, r3, #3
 8021262:	697b      	ldr	r3, [r7, #20]
 8021264:	005b      	lsls	r3, r3, #1
 8021266:	fa02 f303 	lsl.w	r3, r2, r3
 802126a:	693a      	ldr	r2, [r7, #16]
 802126c:	4313      	orrs	r3, r2
 802126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8021270:	687b      	ldr	r3, [r7, #4]
 8021272:	693a      	ldr	r2, [r7, #16]
 8021274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8021276:	683b      	ldr	r3, [r7, #0]
 8021278:	685b      	ldr	r3, [r3, #4]
 802127a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 802127e:	2b00      	cmp	r3, #0
 8021280:	f000 8098 	beq.w	80213b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8021284:	4a54      	ldr	r2, [pc, #336]	@ (80213d8 <HAL_GPIO_Init+0x2c8>)
 8021286:	697b      	ldr	r3, [r7, #20]
 8021288:	089b      	lsrs	r3, r3, #2
 802128a:	3302      	adds	r3, #2
 802128c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8021292:	697b      	ldr	r3, [r7, #20]
 8021294:	f003 0303 	and.w	r3, r3, #3
 8021298:	009b      	lsls	r3, r3, #2
 802129a:	220f      	movs	r2, #15
 802129c:	fa02 f303 	lsl.w	r3, r2, r3
 80212a0:	43db      	mvns	r3, r3
 80212a2:	693a      	ldr	r2, [r7, #16]
 80212a4:	4013      	ands	r3, r2
 80212a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80212a8:	687b      	ldr	r3, [r7, #4]
 80212aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80212ae:	d019      	beq.n	80212e4 <HAL_GPIO_Init+0x1d4>
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	4a4a      	ldr	r2, [pc, #296]	@ (80213dc <HAL_GPIO_Init+0x2cc>)
 80212b4:	4293      	cmp	r3, r2
 80212b6:	d013      	beq.n	80212e0 <HAL_GPIO_Init+0x1d0>
 80212b8:	687b      	ldr	r3, [r7, #4]
 80212ba:	4a49      	ldr	r2, [pc, #292]	@ (80213e0 <HAL_GPIO_Init+0x2d0>)
 80212bc:	4293      	cmp	r3, r2
 80212be:	d00d      	beq.n	80212dc <HAL_GPIO_Init+0x1cc>
 80212c0:	687b      	ldr	r3, [r7, #4]
 80212c2:	4a48      	ldr	r2, [pc, #288]	@ (80213e4 <HAL_GPIO_Init+0x2d4>)
 80212c4:	4293      	cmp	r3, r2
 80212c6:	d007      	beq.n	80212d8 <HAL_GPIO_Init+0x1c8>
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	4a47      	ldr	r2, [pc, #284]	@ (80213e8 <HAL_GPIO_Init+0x2d8>)
 80212cc:	4293      	cmp	r3, r2
 80212ce:	d101      	bne.n	80212d4 <HAL_GPIO_Init+0x1c4>
 80212d0:	2304      	movs	r3, #4
 80212d2:	e008      	b.n	80212e6 <HAL_GPIO_Init+0x1d6>
 80212d4:	2307      	movs	r3, #7
 80212d6:	e006      	b.n	80212e6 <HAL_GPIO_Init+0x1d6>
 80212d8:	2303      	movs	r3, #3
 80212da:	e004      	b.n	80212e6 <HAL_GPIO_Init+0x1d6>
 80212dc:	2302      	movs	r3, #2
 80212de:	e002      	b.n	80212e6 <HAL_GPIO_Init+0x1d6>
 80212e0:	2301      	movs	r3, #1
 80212e2:	e000      	b.n	80212e6 <HAL_GPIO_Init+0x1d6>
 80212e4:	2300      	movs	r3, #0
 80212e6:	697a      	ldr	r2, [r7, #20]
 80212e8:	f002 0203 	and.w	r2, r2, #3
 80212ec:	0092      	lsls	r2, r2, #2
 80212ee:	4093      	lsls	r3, r2
 80212f0:	693a      	ldr	r2, [r7, #16]
 80212f2:	4313      	orrs	r3, r2
 80212f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80212f6:	4938      	ldr	r1, [pc, #224]	@ (80213d8 <HAL_GPIO_Init+0x2c8>)
 80212f8:	697b      	ldr	r3, [r7, #20]
 80212fa:	089b      	lsrs	r3, r3, #2
 80212fc:	3302      	adds	r3, #2
 80212fe:	693a      	ldr	r2, [r7, #16]
 8021300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8021304:	4b39      	ldr	r3, [pc, #228]	@ (80213ec <HAL_GPIO_Init+0x2dc>)
 8021306:	681b      	ldr	r3, [r3, #0]
 8021308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 802130a:	68fb      	ldr	r3, [r7, #12]
 802130c:	43db      	mvns	r3, r3
 802130e:	693a      	ldr	r2, [r7, #16]
 8021310:	4013      	ands	r3, r2
 8021312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8021314:	683b      	ldr	r3, [r7, #0]
 8021316:	685b      	ldr	r3, [r3, #4]
 8021318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802131c:	2b00      	cmp	r3, #0
 802131e:	d003      	beq.n	8021328 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8021320:	693a      	ldr	r2, [r7, #16]
 8021322:	68fb      	ldr	r3, [r7, #12]
 8021324:	4313      	orrs	r3, r2
 8021326:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8021328:	4a30      	ldr	r2, [pc, #192]	@ (80213ec <HAL_GPIO_Init+0x2dc>)
 802132a:	693b      	ldr	r3, [r7, #16]
 802132c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 802132e:	4b2f      	ldr	r3, [pc, #188]	@ (80213ec <HAL_GPIO_Init+0x2dc>)
 8021330:	685b      	ldr	r3, [r3, #4]
 8021332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8021334:	68fb      	ldr	r3, [r7, #12]
 8021336:	43db      	mvns	r3, r3
 8021338:	693a      	ldr	r2, [r7, #16]
 802133a:	4013      	ands	r3, r2
 802133c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 802133e:	683b      	ldr	r3, [r7, #0]
 8021340:	685b      	ldr	r3, [r3, #4]
 8021342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8021346:	2b00      	cmp	r3, #0
 8021348:	d003      	beq.n	8021352 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 802134a:	693a      	ldr	r2, [r7, #16]
 802134c:	68fb      	ldr	r3, [r7, #12]
 802134e:	4313      	orrs	r3, r2
 8021350:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8021352:	4a26      	ldr	r2, [pc, #152]	@ (80213ec <HAL_GPIO_Init+0x2dc>)
 8021354:	693b      	ldr	r3, [r7, #16]
 8021356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8021358:	4b24      	ldr	r3, [pc, #144]	@ (80213ec <HAL_GPIO_Init+0x2dc>)
 802135a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802135e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8021360:	68fb      	ldr	r3, [r7, #12]
 8021362:	43db      	mvns	r3, r3
 8021364:	693a      	ldr	r2, [r7, #16]
 8021366:	4013      	ands	r3, r2
 8021368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 802136a:	683b      	ldr	r3, [r7, #0]
 802136c:	685b      	ldr	r3, [r3, #4]
 802136e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021372:	2b00      	cmp	r3, #0
 8021374:	d003      	beq.n	802137e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8021376:	693a      	ldr	r2, [r7, #16]
 8021378:	68fb      	ldr	r3, [r7, #12]
 802137a:	4313      	orrs	r3, r2
 802137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 802137e:	4a1b      	ldr	r2, [pc, #108]	@ (80213ec <HAL_GPIO_Init+0x2dc>)
 8021380:	693b      	ldr	r3, [r7, #16]
 8021382:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8021386:	4b19      	ldr	r3, [pc, #100]	@ (80213ec <HAL_GPIO_Init+0x2dc>)
 8021388:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802138c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 802138e:	68fb      	ldr	r3, [r7, #12]
 8021390:	43db      	mvns	r3, r3
 8021392:	693a      	ldr	r2, [r7, #16]
 8021394:	4013      	ands	r3, r2
 8021396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8021398:	683b      	ldr	r3, [r7, #0]
 802139a:	685b      	ldr	r3, [r3, #4]
 802139c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80213a0:	2b00      	cmp	r3, #0
 80213a2:	d003      	beq.n	80213ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80213a4:	693a      	ldr	r2, [r7, #16]
 80213a6:	68fb      	ldr	r3, [r7, #12]
 80213a8:	4313      	orrs	r3, r2
 80213aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80213ac:	4a0f      	ldr	r2, [pc, #60]	@ (80213ec <HAL_GPIO_Init+0x2dc>)
 80213ae:	693b      	ldr	r3, [r7, #16]
 80213b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80213b4:	697b      	ldr	r3, [r7, #20]
 80213b6:	3301      	adds	r3, #1
 80213b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80213ba:	683b      	ldr	r3, [r7, #0]
 80213bc:	681a      	ldr	r2, [r3, #0]
 80213be:	697b      	ldr	r3, [r7, #20]
 80213c0:	fa22 f303 	lsr.w	r3, r2, r3
 80213c4:	2b00      	cmp	r3, #0
 80213c6:	f47f aeab 	bne.w	8021120 <HAL_GPIO_Init+0x10>
  }
}
 80213ca:	bf00      	nop
 80213cc:	bf00      	nop
 80213ce:	371c      	adds	r7, #28
 80213d0:	46bd      	mov	sp, r7
 80213d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213d6:	4770      	bx	lr
 80213d8:	40010000 	.word	0x40010000
 80213dc:	48000400 	.word	0x48000400
 80213e0:	48000800 	.word	0x48000800
 80213e4:	48000c00 	.word	0x48000c00
 80213e8:	48001000 	.word	0x48001000
 80213ec:	58000800 	.word	0x58000800

080213f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80213f0:	b480      	push	{r7}
 80213f2:	b083      	sub	sp, #12
 80213f4:	af00      	add	r7, sp, #0
 80213f6:	6078      	str	r0, [r7, #4]
 80213f8:	460b      	mov	r3, r1
 80213fa:	807b      	strh	r3, [r7, #2]
 80213fc:	4613      	mov	r3, r2
 80213fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8021400:	787b      	ldrb	r3, [r7, #1]
 8021402:	2b00      	cmp	r3, #0
 8021404:	d003      	beq.n	802140e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8021406:	887a      	ldrh	r2, [r7, #2]
 8021408:	687b      	ldr	r3, [r7, #4]
 802140a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 802140c:	e002      	b.n	8021414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 802140e:	887a      	ldrh	r2, [r7, #2]
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8021414:	bf00      	nop
 8021416:	370c      	adds	r7, #12
 8021418:	46bd      	mov	sp, r7
 802141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802141e:	4770      	bx	lr

08021420 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8021420:	b480      	push	{r7}
 8021422:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8021424:	4b05      	ldr	r3, [pc, #20]	@ (802143c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8021426:	681b      	ldr	r3, [r3, #0]
 8021428:	4a04      	ldr	r2, [pc, #16]	@ (802143c <HAL_PWR_EnableBkUpAccess+0x1c>)
 802142a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 802142e:	6013      	str	r3, [r2, #0]
}
 8021430:	bf00      	nop
 8021432:	46bd      	mov	sp, r7
 8021434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021438:	4770      	bx	lr
 802143a:	bf00      	nop
 802143c:	58000400 	.word	0x58000400

08021440 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8021440:	b480      	push	{r7}
 8021442:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8021444:	4b04      	ldr	r3, [pc, #16]	@ (8021458 <HAL_PWREx_GetVoltageRange+0x18>)
 8021446:	681b      	ldr	r3, [r3, #0]
 8021448:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 802144c:	4618      	mov	r0, r3
 802144e:	46bd      	mov	sp, r7
 8021450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021454:	4770      	bx	lr
 8021456:	bf00      	nop
 8021458:	58000400 	.word	0x58000400

0802145c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 802145c:	b480      	push	{r7}
 802145e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8021460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021464:	681b      	ldr	r3, [r3, #0]
 8021466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802146a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802146e:	d101      	bne.n	8021474 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8021470:	2301      	movs	r3, #1
 8021472:	e000      	b.n	8021476 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8021474:	2300      	movs	r3, #0
}
 8021476:	4618      	mov	r0, r3
 8021478:	46bd      	mov	sp, r7
 802147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802147e:	4770      	bx	lr

08021480 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8021480:	b480      	push	{r7}
 8021482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8021484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021488:	681b      	ldr	r3, [r3, #0]
 802148a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 802148e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8021492:	6013      	str	r3, [r2, #0]
}
 8021494:	bf00      	nop
 8021496:	46bd      	mov	sp, r7
 8021498:	f85d 7b04 	ldr.w	r7, [sp], #4
 802149c:	4770      	bx	lr

0802149e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 802149e:	b480      	push	{r7}
 80214a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80214a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80214ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80214b0:	6013      	str	r3, [r2, #0]
}
 80214b2:	bf00      	nop
 80214b4:	46bd      	mov	sp, r7
 80214b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ba:	4770      	bx	lr

080214bc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80214bc:	b480      	push	{r7}
 80214be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80214c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80214ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80214ce:	d101      	bne.n	80214d4 <LL_RCC_HSE_IsReady+0x18>
 80214d0:	2301      	movs	r3, #1
 80214d2:	e000      	b.n	80214d6 <LL_RCC_HSE_IsReady+0x1a>
 80214d4:	2300      	movs	r3, #0
}
 80214d6:	4618      	mov	r0, r3
 80214d8:	46bd      	mov	sp, r7
 80214da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214de:	4770      	bx	lr

080214e0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80214e0:	b480      	push	{r7}
 80214e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80214e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80214e8:	681b      	ldr	r3, [r3, #0]
 80214ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80214ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80214f2:	6013      	str	r3, [r2, #0]
}
 80214f4:	bf00      	nop
 80214f6:	46bd      	mov	sp, r7
 80214f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214fc:	4770      	bx	lr

080214fe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80214fe:	b480      	push	{r7}
 8021500:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8021502:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 802150c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8021510:	6013      	str	r3, [r2, #0]
}
 8021512:	bf00      	nop
 8021514:	46bd      	mov	sp, r7
 8021516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802151a:	4770      	bx	lr

0802151c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 802151c:	b480      	push	{r7}
 802151e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8021520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021524:	681b      	ldr	r3, [r3, #0]
 8021526:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 802152a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802152e:	d101      	bne.n	8021534 <LL_RCC_HSI_IsReady+0x18>
 8021530:	2301      	movs	r3, #1
 8021532:	e000      	b.n	8021536 <LL_RCC_HSI_IsReady+0x1a>
 8021534:	2300      	movs	r3, #0
}
 8021536:	4618      	mov	r0, r3
 8021538:	46bd      	mov	sp, r7
 802153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802153e:	4770      	bx	lr

08021540 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8021540:	b480      	push	{r7}
 8021542:	b083      	sub	sp, #12
 8021544:	af00      	add	r7, sp, #0
 8021546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8021548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802154c:	685b      	ldr	r3, [r3, #4]
 802154e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	061b      	lsls	r3, r3, #24
 8021556:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802155a:	4313      	orrs	r3, r2
 802155c:	604b      	str	r3, [r1, #4]
}
 802155e:	bf00      	nop
 8021560:	370c      	adds	r7, #12
 8021562:	46bd      	mov	sp, r7
 8021564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021568:	4770      	bx	lr

0802156a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 802156a:	b480      	push	{r7}
 802156c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 802156e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021572:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 802157a:	f043 0301 	orr.w	r3, r3, #1
 802157e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8021582:	bf00      	nop
 8021584:	46bd      	mov	sp, r7
 8021586:	f85d 7b04 	ldr.w	r7, [sp], #4
 802158a:	4770      	bx	lr

0802158c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 802158c:	b480      	push	{r7}
 802158e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8021590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021594:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8021598:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 802159c:	f023 0301 	bic.w	r3, r3, #1
 80215a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80215a4:	bf00      	nop
 80215a6:	46bd      	mov	sp, r7
 80215a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215ac:	4770      	bx	lr

080215ae <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80215ae:	b480      	push	{r7}
 80215b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80215b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80215b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80215ba:	f003 0302 	and.w	r3, r3, #2
 80215be:	2b02      	cmp	r3, #2
 80215c0:	d101      	bne.n	80215c6 <LL_RCC_HSI48_IsReady+0x18>
 80215c2:	2301      	movs	r3, #1
 80215c4:	e000      	b.n	80215c8 <LL_RCC_HSI48_IsReady+0x1a>
 80215c6:	2300      	movs	r3, #0
}
 80215c8:	4618      	mov	r0, r3
 80215ca:	46bd      	mov	sp, r7
 80215cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215d0:	4770      	bx	lr

080215d2 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80215d2:	b480      	push	{r7}
 80215d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80215d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80215da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80215de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80215e2:	f043 0301 	orr.w	r3, r3, #1
 80215e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80215ea:	bf00      	nop
 80215ec:	46bd      	mov	sp, r7
 80215ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215f2:	4770      	bx	lr

080215f4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80215f4:	b480      	push	{r7}
 80215f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80215f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80215fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8021604:	f023 0301 	bic.w	r3, r3, #1
 8021608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 802160c:	bf00      	nop
 802160e:	46bd      	mov	sp, r7
 8021610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021614:	4770      	bx	lr

08021616 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8021616:	b480      	push	{r7}
 8021618:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 802161a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021622:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8021626:	f043 0304 	orr.w	r3, r3, #4
 802162a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 802162e:	bf00      	nop
 8021630:	46bd      	mov	sp, r7
 8021632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021636:	4770      	bx	lr

08021638 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8021638:	b480      	push	{r7}
 802163a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 802163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021640:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021644:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8021648:	f023 0304 	bic.w	r3, r3, #4
 802164c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8021650:	bf00      	nop
 8021652:	46bd      	mov	sp, r7
 8021654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021658:	4770      	bx	lr

0802165a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 802165a:	b480      	push	{r7}
 802165c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 802165e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8021666:	f003 0302 	and.w	r3, r3, #2
 802166a:	2b02      	cmp	r3, #2
 802166c:	d101      	bne.n	8021672 <LL_RCC_LSE_IsReady+0x18>
 802166e:	2301      	movs	r3, #1
 8021670:	e000      	b.n	8021674 <LL_RCC_LSE_IsReady+0x1a>
 8021672:	2300      	movs	r3, #0
}
 8021674:	4618      	mov	r0, r3
 8021676:	46bd      	mov	sp, r7
 8021678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802167c:	4770      	bx	lr

0802167e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 802167e:	b480      	push	{r7}
 8021680:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8021682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802168a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 802168e:	f043 0301 	orr.w	r3, r3, #1
 8021692:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8021696:	bf00      	nop
 8021698:	46bd      	mov	sp, r7
 802169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802169e:	4770      	bx	lr

080216a0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80216a0:	b480      	push	{r7}
 80216a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80216a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80216a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80216ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80216b0:	f023 0301 	bic.w	r3, r3, #1
 80216b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80216b8:	bf00      	nop
 80216ba:	46bd      	mov	sp, r7
 80216bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216c0:	4770      	bx	lr

080216c2 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80216c2:	b480      	push	{r7}
 80216c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80216c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80216ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80216ce:	f003 0302 	and.w	r3, r3, #2
 80216d2:	2b02      	cmp	r3, #2
 80216d4:	d101      	bne.n	80216da <LL_RCC_LSI1_IsReady+0x18>
 80216d6:	2301      	movs	r3, #1
 80216d8:	e000      	b.n	80216dc <LL_RCC_LSI1_IsReady+0x1a>
 80216da:	2300      	movs	r3, #0
}
 80216dc:	4618      	mov	r0, r3
 80216de:	46bd      	mov	sp, r7
 80216e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216e4:	4770      	bx	lr

080216e6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80216e6:	b480      	push	{r7}
 80216e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80216ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80216ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80216f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80216f6:	f043 0304 	orr.w	r3, r3, #4
 80216fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80216fe:	bf00      	nop
 8021700:	46bd      	mov	sp, r7
 8021702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021706:	4770      	bx	lr

08021708 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8021708:	b480      	push	{r7}
 802170a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 802170c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021714:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8021718:	f023 0304 	bic.w	r3, r3, #4
 802171c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8021720:	bf00      	nop
 8021722:	46bd      	mov	sp, r7
 8021724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021728:	4770      	bx	lr

0802172a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 802172a:	b480      	push	{r7}
 802172c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 802172e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8021736:	f003 0308 	and.w	r3, r3, #8
 802173a:	2b08      	cmp	r3, #8
 802173c:	d101      	bne.n	8021742 <LL_RCC_LSI2_IsReady+0x18>
 802173e:	2301      	movs	r3, #1
 8021740:	e000      	b.n	8021744 <LL_RCC_LSI2_IsReady+0x1a>
 8021742:	2300      	movs	r3, #0
}
 8021744:	4618      	mov	r0, r3
 8021746:	46bd      	mov	sp, r7
 8021748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802174c:	4770      	bx	lr

0802174e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 802174e:	b480      	push	{r7}
 8021750:	b083      	sub	sp, #12
 8021752:	af00      	add	r7, sp, #0
 8021754:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8021756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 802175e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	021b      	lsls	r3, r3, #8
 8021766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802176a:	4313      	orrs	r3, r2
 802176c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8021770:	bf00      	nop
 8021772:	370c      	adds	r7, #12
 8021774:	46bd      	mov	sp, r7
 8021776:	f85d 7b04 	ldr.w	r7, [sp], #4
 802177a:	4770      	bx	lr

0802177c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 802177c:	b480      	push	{r7}
 802177e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8021780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021784:	681b      	ldr	r3, [r3, #0]
 8021786:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 802178a:	f043 0301 	orr.w	r3, r3, #1
 802178e:	6013      	str	r3, [r2, #0]
}
 8021790:	bf00      	nop
 8021792:	46bd      	mov	sp, r7
 8021794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021798:	4770      	bx	lr

0802179a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 802179a:	b480      	push	{r7}
 802179c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 802179e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80217a2:	681b      	ldr	r3, [r3, #0]
 80217a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80217a8:	f023 0301 	bic.w	r3, r3, #1
 80217ac:	6013      	str	r3, [r2, #0]
}
 80217ae:	bf00      	nop
 80217b0:	46bd      	mov	sp, r7
 80217b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217b6:	4770      	bx	lr

080217b8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80217b8:	b480      	push	{r7}
 80217ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80217bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80217c0:	681b      	ldr	r3, [r3, #0]
 80217c2:	f003 0302 	and.w	r3, r3, #2
 80217c6:	2b02      	cmp	r3, #2
 80217c8:	d101      	bne.n	80217ce <LL_RCC_MSI_IsReady+0x16>
 80217ca:	2301      	movs	r3, #1
 80217cc:	e000      	b.n	80217d0 <LL_RCC_MSI_IsReady+0x18>
 80217ce:	2300      	movs	r3, #0
}
 80217d0:	4618      	mov	r0, r3
 80217d2:	46bd      	mov	sp, r7
 80217d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217d8:	4770      	bx	lr

080217da <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80217da:	b480      	push	{r7}
 80217dc:	b083      	sub	sp, #12
 80217de:	af00      	add	r7, sp, #0
 80217e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80217e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80217e6:	681b      	ldr	r3, [r3, #0]
 80217e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80217ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	4313      	orrs	r3, r2
 80217f4:	600b      	str	r3, [r1, #0]
}
 80217f6:	bf00      	nop
 80217f8:	370c      	adds	r7, #12
 80217fa:	46bd      	mov	sp, r7
 80217fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021800:	4770      	bx	lr

08021802 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8021802:	b480      	push	{r7}
 8021804:	b083      	sub	sp, #12
 8021806:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8021808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802180c:	681b      	ldr	r3, [r3, #0]
 802180e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8021812:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	2bb0      	cmp	r3, #176	@ 0xb0
 8021818:	d901      	bls.n	802181e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 802181a:	23b0      	movs	r3, #176	@ 0xb0
 802181c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 802181e:	687b      	ldr	r3, [r7, #4]
}
 8021820:	4618      	mov	r0, r3
 8021822:	370c      	adds	r7, #12
 8021824:	46bd      	mov	sp, r7
 8021826:	f85d 7b04 	ldr.w	r7, [sp], #4
 802182a:	4770      	bx	lr

0802182c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 802182c:	b480      	push	{r7}
 802182e:	b083      	sub	sp, #12
 8021830:	af00      	add	r7, sp, #0
 8021832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8021834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021838:	685b      	ldr	r3, [r3, #4]
 802183a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	021b      	lsls	r3, r3, #8
 8021842:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8021846:	4313      	orrs	r3, r2
 8021848:	604b      	str	r3, [r1, #4]
}
 802184a:	bf00      	nop
 802184c:	370c      	adds	r7, #12
 802184e:	46bd      	mov	sp, r7
 8021850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021854:	4770      	bx	lr

08021856 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8021856:	b480      	push	{r7}
 8021858:	b083      	sub	sp, #12
 802185a:	af00      	add	r7, sp, #0
 802185c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 802185e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021862:	689b      	ldr	r3, [r3, #8]
 8021864:	f023 0203 	bic.w	r2, r3, #3
 8021868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802186c:	687b      	ldr	r3, [r7, #4]
 802186e:	4313      	orrs	r3, r2
 8021870:	608b      	str	r3, [r1, #8]
}
 8021872:	bf00      	nop
 8021874:	370c      	adds	r7, #12
 8021876:	46bd      	mov	sp, r7
 8021878:	f85d 7b04 	ldr.w	r7, [sp], #4
 802187c:	4770      	bx	lr

0802187e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 802187e:	b480      	push	{r7}
 8021880:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8021882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021886:	689b      	ldr	r3, [r3, #8]
 8021888:	f003 030c 	and.w	r3, r3, #12
}
 802188c:	4618      	mov	r0, r3
 802188e:	46bd      	mov	sp, r7
 8021890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021894:	4770      	bx	lr

08021896 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8021896:	b480      	push	{r7}
 8021898:	b083      	sub	sp, #12
 802189a:	af00      	add	r7, sp, #0
 802189c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 802189e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80218a2:	689b      	ldr	r3, [r3, #8]
 80218a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80218a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80218ac:	687b      	ldr	r3, [r7, #4]
 80218ae:	4313      	orrs	r3, r2
 80218b0:	608b      	str	r3, [r1, #8]
}
 80218b2:	bf00      	nop
 80218b4:	370c      	adds	r7, #12
 80218b6:	46bd      	mov	sp, r7
 80218b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218bc:	4770      	bx	lr

080218be <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80218be:	b480      	push	{r7}
 80218c0:	b083      	sub	sp, #12
 80218c2:	af00      	add	r7, sp, #0
 80218c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80218c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80218ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80218ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80218d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80218d6:	687b      	ldr	r3, [r7, #4]
 80218d8:	4313      	orrs	r3, r2
 80218da:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80218de:	bf00      	nop
 80218e0:	370c      	adds	r7, #12
 80218e2:	46bd      	mov	sp, r7
 80218e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218e8:	4770      	bx	lr

080218ea <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80218ea:	b480      	push	{r7}
 80218ec:	b083      	sub	sp, #12
 80218ee:	af00      	add	r7, sp, #0
 80218f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80218f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80218f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80218fa:	f023 020f 	bic.w	r2, r3, #15
 80218fe:	687b      	ldr	r3, [r7, #4]
 8021900:	091b      	lsrs	r3, r3, #4
 8021902:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8021906:	4313      	orrs	r3, r2
 8021908:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 802190c:	bf00      	nop
 802190e:	370c      	adds	r7, #12
 8021910:	46bd      	mov	sp, r7
 8021912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021916:	4770      	bx	lr

08021918 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8021918:	b480      	push	{r7}
 802191a:	b083      	sub	sp, #12
 802191c:	af00      	add	r7, sp, #0
 802191e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8021920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021924:	689b      	ldr	r3, [r3, #8]
 8021926:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 802192a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802192e:	687b      	ldr	r3, [r7, #4]
 8021930:	4313      	orrs	r3, r2
 8021932:	608b      	str	r3, [r1, #8]
}
 8021934:	bf00      	nop
 8021936:	370c      	adds	r7, #12
 8021938:	46bd      	mov	sp, r7
 802193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802193e:	4770      	bx	lr

08021940 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8021940:	b480      	push	{r7}
 8021942:	b083      	sub	sp, #12
 8021944:	af00      	add	r7, sp, #0
 8021946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8021948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802194c:	689b      	ldr	r3, [r3, #8]
 802194e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8021952:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8021956:	687b      	ldr	r3, [r7, #4]
 8021958:	4313      	orrs	r3, r2
 802195a:	608b      	str	r3, [r1, #8]
}
 802195c:	bf00      	nop
 802195e:	370c      	adds	r7, #12
 8021960:	46bd      	mov	sp, r7
 8021962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021966:	4770      	bx	lr

08021968 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8021968:	b480      	push	{r7}
 802196a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 802196c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021970:	689b      	ldr	r3, [r3, #8]
 8021972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8021976:	4618      	mov	r0, r3
 8021978:	46bd      	mov	sp, r7
 802197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802197e:	4770      	bx	lr

08021980 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8021980:	b480      	push	{r7}
 8021982:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8021984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021988:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 802198c:	011b      	lsls	r3, r3, #4
 802198e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8021992:	4618      	mov	r0, r3
 8021994:	46bd      	mov	sp, r7
 8021996:	f85d 7b04 	ldr.w	r7, [sp], #4
 802199a:	4770      	bx	lr

0802199c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 802199c:	b480      	push	{r7}
 802199e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80219a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80219a4:	689b      	ldr	r3, [r3, #8]
 80219a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80219aa:	4618      	mov	r0, r3
 80219ac:	46bd      	mov	sp, r7
 80219ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b2:	4770      	bx	lr

080219b4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80219b4:	b480      	push	{r7}
 80219b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80219b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80219bc:	689b      	ldr	r3, [r3, #8]
 80219be:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80219c2:	4618      	mov	r0, r3
 80219c4:	46bd      	mov	sp, r7
 80219c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219ca:	4770      	bx	lr

080219cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80219cc:	b480      	push	{r7}
 80219ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80219d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80219d4:	681b      	ldr	r3, [r3, #0]
 80219d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80219da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80219de:	6013      	str	r3, [r2, #0]
}
 80219e0:	bf00      	nop
 80219e2:	46bd      	mov	sp, r7
 80219e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219e8:	4770      	bx	lr

080219ea <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80219ea:	b480      	push	{r7}
 80219ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80219ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80219f2:	681b      	ldr	r3, [r3, #0]
 80219f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80219f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80219fc:	6013      	str	r3, [r2, #0]
}
 80219fe:	bf00      	nop
 8021a00:	46bd      	mov	sp, r7
 8021a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a06:	4770      	bx	lr

08021a08 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8021a08:	b480      	push	{r7}
 8021a0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8021a0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021a10:	681b      	ldr	r3, [r3, #0]
 8021a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8021a16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021a1a:	d101      	bne.n	8021a20 <LL_RCC_PLL_IsReady+0x18>
 8021a1c:	2301      	movs	r3, #1
 8021a1e:	e000      	b.n	8021a22 <LL_RCC_PLL_IsReady+0x1a>
 8021a20:	2300      	movs	r3, #0
}
 8021a22:	4618      	mov	r0, r3
 8021a24:	46bd      	mov	sp, r7
 8021a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a2a:	4770      	bx	lr

08021a2c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8021a2c:	b480      	push	{r7}
 8021a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8021a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021a34:	68db      	ldr	r3, [r3, #12]
 8021a36:	0a1b      	lsrs	r3, r3, #8
 8021a38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8021a3c:	4618      	mov	r0, r3
 8021a3e:	46bd      	mov	sp, r7
 8021a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a44:	4770      	bx	lr

08021a46 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8021a46:	b480      	push	{r7}
 8021a48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8021a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021a4e:	68db      	ldr	r3, [r3, #12]
 8021a50:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8021a54:	4618      	mov	r0, r3
 8021a56:	46bd      	mov	sp, r7
 8021a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a5c:	4770      	bx	lr

08021a5e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8021a5e:	b480      	push	{r7}
 8021a60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8021a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021a66:	68db      	ldr	r3, [r3, #12]
 8021a68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8021a6c:	4618      	mov	r0, r3
 8021a6e:	46bd      	mov	sp, r7
 8021a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a74:	4770      	bx	lr

08021a76 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8021a76:	b480      	push	{r7}
 8021a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8021a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021a7e:	68db      	ldr	r3, [r3, #12]
 8021a80:	f003 0303 	and.w	r3, r3, #3
}
 8021a84:	4618      	mov	r0, r3
 8021a86:	46bd      	mov	sp, r7
 8021a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a8c:	4770      	bx	lr

08021a8e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8021a8e:	b480      	push	{r7}
 8021a90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8021a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021a96:	689b      	ldr	r3, [r3, #8]
 8021a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021aa0:	d101      	bne.n	8021aa6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8021aa2:	2301      	movs	r3, #1
 8021aa4:	e000      	b.n	8021aa8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8021aa6:	2300      	movs	r3, #0
}
 8021aa8:	4618      	mov	r0, r3
 8021aaa:	46bd      	mov	sp, r7
 8021aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ab0:	4770      	bx	lr

08021ab2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8021ab2:	b480      	push	{r7}
 8021ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8021ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8021abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021ac2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021ac6:	d101      	bne.n	8021acc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8021ac8:	2301      	movs	r3, #1
 8021aca:	e000      	b.n	8021ace <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8021acc:	2300      	movs	r3, #0
}
 8021ace:	4618      	mov	r0, r3
 8021ad0:	46bd      	mov	sp, r7
 8021ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ad6:	4770      	bx	lr

08021ad8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8021ad8:	b480      	push	{r7}
 8021ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8021adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021ae0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8021ae4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8021ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021aec:	d101      	bne.n	8021af2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8021aee:	2301      	movs	r3, #1
 8021af0:	e000      	b.n	8021af4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8021af2:	2300      	movs	r3, #0
}
 8021af4:	4618      	mov	r0, r3
 8021af6:	46bd      	mov	sp, r7
 8021af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021afc:	4770      	bx	lr

08021afe <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8021afe:	b480      	push	{r7}
 8021b00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8021b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021b06:	689b      	ldr	r3, [r3, #8]
 8021b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8021b0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8021b10:	d101      	bne.n	8021b16 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8021b12:	2301      	movs	r3, #1
 8021b14:	e000      	b.n	8021b18 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8021b16:	2300      	movs	r3, #0
}
 8021b18:	4618      	mov	r0, r3
 8021b1a:	46bd      	mov	sp, r7
 8021b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b20:	4770      	bx	lr

08021b22 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8021b22:	b480      	push	{r7}
 8021b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8021b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8021b2a:	689b      	ldr	r3, [r3, #8]
 8021b2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8021b30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8021b34:	d101      	bne.n	8021b3a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8021b36:	2301      	movs	r3, #1
 8021b38:	e000      	b.n	8021b3c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8021b3a:	2300      	movs	r3, #0
}
 8021b3c:	4618      	mov	r0, r3
 8021b3e:	46bd      	mov	sp, r7
 8021b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b44:	4770      	bx	lr
	...

08021b48 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8021b48:	b590      	push	{r4, r7, lr}
 8021b4a:	b08d      	sub	sp, #52	@ 0x34
 8021b4c:	af00      	add	r7, sp, #0
 8021b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	2b00      	cmp	r3, #0
 8021b54:	d101      	bne.n	8021b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8021b56:	2301      	movs	r3, #1
 8021b58:	e363      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8021b5a:	687b      	ldr	r3, [r7, #4]
 8021b5c:	681b      	ldr	r3, [r3, #0]
 8021b5e:	f003 0320 	and.w	r3, r3, #32
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	f000 808d 	beq.w	8021c82 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021b68:	f7ff fe89 	bl	802187e <LL_RCC_GetSysClkSource>
 8021b6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021b6e:	f7ff ff82 	bl	8021a76 <LL_RCC_PLL_GetMainSource>
 8021b72:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8021b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d005      	beq.n	8021b86 <HAL_RCC_OscConfig+0x3e>
 8021b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021b7c:	2b0c      	cmp	r3, #12
 8021b7e:	d147      	bne.n	8021c10 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8021b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021b82:	2b01      	cmp	r3, #1
 8021b84:	d144      	bne.n	8021c10 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	69db      	ldr	r3, [r3, #28]
 8021b8a:	2b00      	cmp	r3, #0
 8021b8c:	d101      	bne.n	8021b92 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8021b8e:	2301      	movs	r3, #1
 8021b90:	e347      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8021b92:	687b      	ldr	r3, [r7, #4]
 8021b94:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8021b96:	f7ff fe34 	bl	8021802 <LL_RCC_MSI_GetRange>
 8021b9a:	4603      	mov	r3, r0
 8021b9c:	429c      	cmp	r4, r3
 8021b9e:	d914      	bls.n	8021bca <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021ba0:	687b      	ldr	r3, [r7, #4]
 8021ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021ba4:	4618      	mov	r0, r3
 8021ba6:	f000 fd2f 	bl	8022608 <RCC_SetFlashLatencyFromMSIRange>
 8021baa:	4603      	mov	r3, r0
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d001      	beq.n	8021bb4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8021bb0:	2301      	movs	r3, #1
 8021bb2:	e336      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021bb8:	4618      	mov	r0, r3
 8021bba:	f7ff fe0e 	bl	80217da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021bbe:	687b      	ldr	r3, [r7, #4]
 8021bc0:	6a1b      	ldr	r3, [r3, #32]
 8021bc2:	4618      	mov	r0, r3
 8021bc4:	f7ff fe32 	bl	802182c <LL_RCC_MSI_SetCalibTrimming>
 8021bc8:	e013      	b.n	8021bf2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021bca:	687b      	ldr	r3, [r7, #4]
 8021bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021bce:	4618      	mov	r0, r3
 8021bd0:	f7ff fe03 	bl	80217da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021bd4:	687b      	ldr	r3, [r7, #4]
 8021bd6:	6a1b      	ldr	r3, [r3, #32]
 8021bd8:	4618      	mov	r0, r3
 8021bda:	f7ff fe27 	bl	802182c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8021bde:	687b      	ldr	r3, [r7, #4]
 8021be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021be2:	4618      	mov	r0, r3
 8021be4:	f000 fd10 	bl	8022608 <RCC_SetFlashLatencyFromMSIRange>
 8021be8:	4603      	mov	r3, r0
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	d001      	beq.n	8021bf2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8021bee:	2301      	movs	r3, #1
 8021bf0:	e317      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8021bf2:	f000 fcc9 	bl	8022588 <HAL_RCC_GetHCLKFreq>
 8021bf6:	4603      	mov	r3, r0
 8021bf8:	4aa4      	ldr	r2, [pc, #656]	@ (8021e8c <HAL_RCC_OscConfig+0x344>)
 8021bfa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8021bfc:	4ba4      	ldr	r3, [pc, #656]	@ (8021e90 <HAL_RCC_OscConfig+0x348>)
 8021bfe:	681b      	ldr	r3, [r3, #0]
 8021c00:	4618      	mov	r0, r3
 8021c02:	f7ff f82d 	bl	8020c60 <HAL_InitTick>
 8021c06:	4603      	mov	r3, r0
 8021c08:	2b00      	cmp	r3, #0
 8021c0a:	d039      	beq.n	8021c80 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8021c0c:	2301      	movs	r3, #1
 8021c0e:	e308      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	69db      	ldr	r3, [r3, #28]
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	d01e      	beq.n	8021c56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8021c18:	f7ff fdb0 	bl	802177c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021c1c:	f7ff f86e 	bl	8020cfc <HAL_GetTick>
 8021c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8021c22:	e008      	b.n	8021c36 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021c24:	f7ff f86a 	bl	8020cfc <HAL_GetTick>
 8021c28:	4602      	mov	r2, r0
 8021c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c2c:	1ad3      	subs	r3, r2, r3
 8021c2e:	2b02      	cmp	r3, #2
 8021c30:	d901      	bls.n	8021c36 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8021c32:	2303      	movs	r3, #3
 8021c34:	e2f5      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8021c36:	f7ff fdbf 	bl	80217b8 <LL_RCC_MSI_IsReady>
 8021c3a:	4603      	mov	r3, r0
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	d0f1      	beq.n	8021c24 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8021c40:	687b      	ldr	r3, [r7, #4]
 8021c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021c44:	4618      	mov	r0, r3
 8021c46:	f7ff fdc8 	bl	80217da <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8021c4a:	687b      	ldr	r3, [r7, #4]
 8021c4c:	6a1b      	ldr	r3, [r3, #32]
 8021c4e:	4618      	mov	r0, r3
 8021c50:	f7ff fdec 	bl	802182c <LL_RCC_MSI_SetCalibTrimming>
 8021c54:	e015      	b.n	8021c82 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8021c56:	f7ff fda0 	bl	802179a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8021c5a:	f7ff f84f 	bl	8020cfc <HAL_GetTick>
 8021c5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8021c60:	e008      	b.n	8021c74 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8021c62:	f7ff f84b 	bl	8020cfc <HAL_GetTick>
 8021c66:	4602      	mov	r2, r0
 8021c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c6a:	1ad3      	subs	r3, r2, r3
 8021c6c:	2b02      	cmp	r3, #2
 8021c6e:	d901      	bls.n	8021c74 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8021c70:	2303      	movs	r3, #3
 8021c72:	e2d6      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8021c74:	f7ff fda0 	bl	80217b8 <LL_RCC_MSI_IsReady>
 8021c78:	4603      	mov	r3, r0
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	d1f1      	bne.n	8021c62 <HAL_RCC_OscConfig+0x11a>
 8021c7e:	e000      	b.n	8021c82 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8021c80:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8021c82:	687b      	ldr	r3, [r7, #4]
 8021c84:	681b      	ldr	r3, [r3, #0]
 8021c86:	f003 0301 	and.w	r3, r3, #1
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d047      	beq.n	8021d1e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021c8e:	f7ff fdf6 	bl	802187e <LL_RCC_GetSysClkSource>
 8021c92:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021c94:	f7ff feef 	bl	8021a76 <LL_RCC_PLL_GetMainSource>
 8021c98:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8021c9a:	6a3b      	ldr	r3, [r7, #32]
 8021c9c:	2b08      	cmp	r3, #8
 8021c9e:	d005      	beq.n	8021cac <HAL_RCC_OscConfig+0x164>
 8021ca0:	6a3b      	ldr	r3, [r7, #32]
 8021ca2:	2b0c      	cmp	r3, #12
 8021ca4:	d108      	bne.n	8021cb8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8021ca6:	69fb      	ldr	r3, [r7, #28]
 8021ca8:	2b03      	cmp	r3, #3
 8021caa:	d105      	bne.n	8021cb8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8021cac:	687b      	ldr	r3, [r7, #4]
 8021cae:	685b      	ldr	r3, [r3, #4]
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	d134      	bne.n	8021d1e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8021cb4:	2301      	movs	r3, #1
 8021cb6:	e2b4      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8021cb8:	687b      	ldr	r3, [r7, #4]
 8021cba:	685b      	ldr	r3, [r3, #4]
 8021cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021cc0:	d102      	bne.n	8021cc8 <HAL_RCC_OscConfig+0x180>
 8021cc2:	f7ff fbdd 	bl	8021480 <LL_RCC_HSE_Enable>
 8021cc6:	e001      	b.n	8021ccc <HAL_RCC_OscConfig+0x184>
 8021cc8:	f7ff fbe9 	bl	802149e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8021ccc:	687b      	ldr	r3, [r7, #4]
 8021cce:	685b      	ldr	r3, [r3, #4]
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	d012      	beq.n	8021cfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021cd4:	f7ff f812 	bl	8020cfc <HAL_GetTick>
 8021cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8021cda:	e008      	b.n	8021cee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021cdc:	f7ff f80e 	bl	8020cfc <HAL_GetTick>
 8021ce0:	4602      	mov	r2, r0
 8021ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ce4:	1ad3      	subs	r3, r2, r3
 8021ce6:	2b64      	cmp	r3, #100	@ 0x64
 8021ce8:	d901      	bls.n	8021cee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8021cea:	2303      	movs	r3, #3
 8021cec:	e299      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8021cee:	f7ff fbe5 	bl	80214bc <LL_RCC_HSE_IsReady>
 8021cf2:	4603      	mov	r3, r0
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	d0f1      	beq.n	8021cdc <HAL_RCC_OscConfig+0x194>
 8021cf8:	e011      	b.n	8021d1e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021cfa:	f7fe ffff 	bl	8020cfc <HAL_GetTick>
 8021cfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8021d00:	e008      	b.n	8021d14 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8021d02:	f7fe fffb 	bl	8020cfc <HAL_GetTick>
 8021d06:	4602      	mov	r2, r0
 8021d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d0a:	1ad3      	subs	r3, r2, r3
 8021d0c:	2b64      	cmp	r3, #100	@ 0x64
 8021d0e:	d901      	bls.n	8021d14 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8021d10:	2303      	movs	r3, #3
 8021d12:	e286      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8021d14:	f7ff fbd2 	bl	80214bc <LL_RCC_HSE_IsReady>
 8021d18:	4603      	mov	r3, r0
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d1f1      	bne.n	8021d02 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8021d1e:	687b      	ldr	r3, [r7, #4]
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	f003 0302 	and.w	r3, r3, #2
 8021d26:	2b00      	cmp	r3, #0
 8021d28:	d04c      	beq.n	8021dc4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8021d2a:	f7ff fda8 	bl	802187e <LL_RCC_GetSysClkSource>
 8021d2e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8021d30:	f7ff fea1 	bl	8021a76 <LL_RCC_PLL_GetMainSource>
 8021d34:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8021d36:	69bb      	ldr	r3, [r7, #24]
 8021d38:	2b04      	cmp	r3, #4
 8021d3a:	d005      	beq.n	8021d48 <HAL_RCC_OscConfig+0x200>
 8021d3c:	69bb      	ldr	r3, [r7, #24]
 8021d3e:	2b0c      	cmp	r3, #12
 8021d40:	d10e      	bne.n	8021d60 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8021d42:	697b      	ldr	r3, [r7, #20]
 8021d44:	2b02      	cmp	r3, #2
 8021d46:	d10b      	bne.n	8021d60 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	68db      	ldr	r3, [r3, #12]
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	d101      	bne.n	8021d54 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8021d50:	2301      	movs	r3, #1
 8021d52:	e266      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021d54:	687b      	ldr	r3, [r7, #4]
 8021d56:	691b      	ldr	r3, [r3, #16]
 8021d58:	4618      	mov	r0, r3
 8021d5a:	f7ff fbf1 	bl	8021540 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8021d5e:	e031      	b.n	8021dc4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8021d60:	687b      	ldr	r3, [r7, #4]
 8021d62:	68db      	ldr	r3, [r3, #12]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d019      	beq.n	8021d9c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8021d68:	f7ff fbba 	bl	80214e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021d6c:	f7fe ffc6 	bl	8020cfc <HAL_GetTick>
 8021d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8021d72:	e008      	b.n	8021d86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021d74:	f7fe ffc2 	bl	8020cfc <HAL_GetTick>
 8021d78:	4602      	mov	r2, r0
 8021d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021d7c:	1ad3      	subs	r3, r2, r3
 8021d7e:	2b02      	cmp	r3, #2
 8021d80:	d901      	bls.n	8021d86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8021d82:	2303      	movs	r3, #3
 8021d84:	e24d      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8021d86:	f7ff fbc9 	bl	802151c <LL_RCC_HSI_IsReady>
 8021d8a:	4603      	mov	r3, r0
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d0f1      	beq.n	8021d74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	691b      	ldr	r3, [r3, #16]
 8021d94:	4618      	mov	r0, r3
 8021d96:	f7ff fbd3 	bl	8021540 <LL_RCC_HSI_SetCalibTrimming>
 8021d9a:	e013      	b.n	8021dc4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8021d9c:	f7ff fbaf 	bl	80214fe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021da0:	f7fe ffac 	bl	8020cfc <HAL_GetTick>
 8021da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8021da6:	e008      	b.n	8021dba <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8021da8:	f7fe ffa8 	bl	8020cfc <HAL_GetTick>
 8021dac:	4602      	mov	r2, r0
 8021dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021db0:	1ad3      	subs	r3, r2, r3
 8021db2:	2b02      	cmp	r3, #2
 8021db4:	d901      	bls.n	8021dba <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8021db6:	2303      	movs	r3, #3
 8021db8:	e233      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8021dba:	f7ff fbaf 	bl	802151c <LL_RCC_HSI_IsReady>
 8021dbe:	4603      	mov	r3, r0
 8021dc0:	2b00      	cmp	r3, #0
 8021dc2:	d1f1      	bne.n	8021da8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	681b      	ldr	r3, [r3, #0]
 8021dc8:	f003 0308 	and.w	r3, r3, #8
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	d106      	bne.n	8021dde <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8021dd0:	687b      	ldr	r3, [r7, #4]
 8021dd2:	681b      	ldr	r3, [r3, #0]
 8021dd4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8021dd8:	2b00      	cmp	r3, #0
 8021dda:	f000 80a3 	beq.w	8021f24 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	695b      	ldr	r3, [r3, #20]
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d076      	beq.n	8021ed4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8021de6:	687b      	ldr	r3, [r7, #4]
 8021de8:	681b      	ldr	r3, [r3, #0]
 8021dea:	f003 0310 	and.w	r3, r3, #16
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d046      	beq.n	8021e80 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8021df2:	f7ff fc66 	bl	80216c2 <LL_RCC_LSI1_IsReady>
 8021df6:	4603      	mov	r3, r0
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	d113      	bne.n	8021e24 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8021dfc:	f7ff fc3f 	bl	802167e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8021e00:	f7fe ff7c 	bl	8020cfc <HAL_GetTick>
 8021e04:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8021e06:	e008      	b.n	8021e1a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8021e08:	f7fe ff78 	bl	8020cfc <HAL_GetTick>
 8021e0c:	4602      	mov	r2, r0
 8021e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e10:	1ad3      	subs	r3, r2, r3
 8021e12:	2b02      	cmp	r3, #2
 8021e14:	d901      	bls.n	8021e1a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8021e16:	2303      	movs	r3, #3
 8021e18:	e203      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8021e1a:	f7ff fc52 	bl	80216c2 <LL_RCC_LSI1_IsReady>
 8021e1e:	4603      	mov	r3, r0
 8021e20:	2b00      	cmp	r3, #0
 8021e22:	d0f1      	beq.n	8021e08 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8021e24:	f7ff fc5f 	bl	80216e6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021e28:	f7fe ff68 	bl	8020cfc <HAL_GetTick>
 8021e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8021e2e:	e008      	b.n	8021e42 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8021e30:	f7fe ff64 	bl	8020cfc <HAL_GetTick>
 8021e34:	4602      	mov	r2, r0
 8021e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e38:	1ad3      	subs	r3, r2, r3
 8021e3a:	2b03      	cmp	r3, #3
 8021e3c:	d901      	bls.n	8021e42 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8021e3e:	2303      	movs	r3, #3
 8021e40:	e1ef      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8021e42:	f7ff fc72 	bl	802172a <LL_RCC_LSI2_IsReady>
 8021e46:	4603      	mov	r3, r0
 8021e48:	2b00      	cmp	r3, #0
 8021e4a:	d0f1      	beq.n	8021e30 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8021e4c:	687b      	ldr	r3, [r7, #4]
 8021e4e:	699b      	ldr	r3, [r3, #24]
 8021e50:	4618      	mov	r0, r3
 8021e52:	f7ff fc7c 	bl	802174e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8021e56:	f7ff fc23 	bl	80216a0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021e5a:	f7fe ff4f 	bl	8020cfc <HAL_GetTick>
 8021e5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8021e60:	e008      	b.n	8021e74 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8021e62:	f7fe ff4b 	bl	8020cfc <HAL_GetTick>
 8021e66:	4602      	mov	r2, r0
 8021e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e6a:	1ad3      	subs	r3, r2, r3
 8021e6c:	2b02      	cmp	r3, #2
 8021e6e:	d901      	bls.n	8021e74 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8021e70:	2303      	movs	r3, #3
 8021e72:	e1d6      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8021e74:	f7ff fc25 	bl	80216c2 <LL_RCC_LSI1_IsReady>
 8021e78:	4603      	mov	r3, r0
 8021e7a:	2b00      	cmp	r3, #0
 8021e7c:	d1f1      	bne.n	8021e62 <HAL_RCC_OscConfig+0x31a>
 8021e7e:	e051      	b.n	8021f24 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8021e80:	f7ff fbfd 	bl	802167e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8021e84:	f7fe ff3a 	bl	8020cfc <HAL_GetTick>
 8021e88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8021e8a:	e00c      	b.n	8021ea6 <HAL_RCC_OscConfig+0x35e>
 8021e8c:	20000008 	.word	0x20000008
 8021e90:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8021e94:	f7fe ff32 	bl	8020cfc <HAL_GetTick>
 8021e98:	4602      	mov	r2, r0
 8021e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e9c:	1ad3      	subs	r3, r2, r3
 8021e9e:	2b02      	cmp	r3, #2
 8021ea0:	d901      	bls.n	8021ea6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8021ea2:	2303      	movs	r3, #3
 8021ea4:	e1bd      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8021ea6:	f7ff fc0c 	bl	80216c2 <LL_RCC_LSI1_IsReady>
 8021eaa:	4603      	mov	r3, r0
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	d0f1      	beq.n	8021e94 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8021eb0:	f7ff fc2a 	bl	8021708 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8021eb4:	e008      	b.n	8021ec8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8021eb6:	f7fe ff21 	bl	8020cfc <HAL_GetTick>
 8021eba:	4602      	mov	r2, r0
 8021ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ebe:	1ad3      	subs	r3, r2, r3
 8021ec0:	2b03      	cmp	r3, #3
 8021ec2:	d901      	bls.n	8021ec8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8021ec4:	2303      	movs	r3, #3
 8021ec6:	e1ac      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8021ec8:	f7ff fc2f 	bl	802172a <LL_RCC_LSI2_IsReady>
 8021ecc:	4603      	mov	r3, r0
 8021ece:	2b00      	cmp	r3, #0
 8021ed0:	d1f1      	bne.n	8021eb6 <HAL_RCC_OscConfig+0x36e>
 8021ed2:	e027      	b.n	8021f24 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8021ed4:	f7ff fc18 	bl	8021708 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021ed8:	f7fe ff10 	bl	8020cfc <HAL_GetTick>
 8021edc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8021ede:	e008      	b.n	8021ef2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8021ee0:	f7fe ff0c 	bl	8020cfc <HAL_GetTick>
 8021ee4:	4602      	mov	r2, r0
 8021ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021ee8:	1ad3      	subs	r3, r2, r3
 8021eea:	2b03      	cmp	r3, #3
 8021eec:	d901      	bls.n	8021ef2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8021eee:	2303      	movs	r3, #3
 8021ef0:	e197      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8021ef2:	f7ff fc1a 	bl	802172a <LL_RCC_LSI2_IsReady>
 8021ef6:	4603      	mov	r3, r0
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d1f1      	bne.n	8021ee0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8021efc:	f7ff fbd0 	bl	80216a0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021f00:	f7fe fefc 	bl	8020cfc <HAL_GetTick>
 8021f04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8021f06:	e008      	b.n	8021f1a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8021f08:	f7fe fef8 	bl	8020cfc <HAL_GetTick>
 8021f0c:	4602      	mov	r2, r0
 8021f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f10:	1ad3      	subs	r3, r2, r3
 8021f12:	2b02      	cmp	r3, #2
 8021f14:	d901      	bls.n	8021f1a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8021f16:	2303      	movs	r3, #3
 8021f18:	e183      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8021f1a:	f7ff fbd2 	bl	80216c2 <LL_RCC_LSI1_IsReady>
 8021f1e:	4603      	mov	r3, r0
 8021f20:	2b00      	cmp	r3, #0
 8021f22:	d1f1      	bne.n	8021f08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8021f24:	687b      	ldr	r3, [r7, #4]
 8021f26:	681b      	ldr	r3, [r3, #0]
 8021f28:	f003 0304 	and.w	r3, r3, #4
 8021f2c:	2b00      	cmp	r3, #0
 8021f2e:	d05b      	beq.n	8021fe8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021f30:	4ba7      	ldr	r3, [pc, #668]	@ (80221d0 <HAL_RCC_OscConfig+0x688>)
 8021f32:	681b      	ldr	r3, [r3, #0]
 8021f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	d114      	bne.n	8021f66 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8021f3c:	f7ff fa70 	bl	8021420 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8021f40:	f7fe fedc 	bl	8020cfc <HAL_GetTick>
 8021f44:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021f46:	e008      	b.n	8021f5a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8021f48:	f7fe fed8 	bl	8020cfc <HAL_GetTick>
 8021f4c:	4602      	mov	r2, r0
 8021f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f50:	1ad3      	subs	r3, r2, r3
 8021f52:	2b02      	cmp	r3, #2
 8021f54:	d901      	bls.n	8021f5a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8021f56:	2303      	movs	r3, #3
 8021f58:	e163      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8021f5a:	4b9d      	ldr	r3, [pc, #628]	@ (80221d0 <HAL_RCC_OscConfig+0x688>)
 8021f5c:	681b      	ldr	r3, [r3, #0]
 8021f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8021f62:	2b00      	cmp	r3, #0
 8021f64:	d0f0      	beq.n	8021f48 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	689b      	ldr	r3, [r3, #8]
 8021f6a:	2b01      	cmp	r3, #1
 8021f6c:	d102      	bne.n	8021f74 <HAL_RCC_OscConfig+0x42c>
 8021f6e:	f7ff fb30 	bl	80215d2 <LL_RCC_LSE_Enable>
 8021f72:	e00c      	b.n	8021f8e <HAL_RCC_OscConfig+0x446>
 8021f74:	687b      	ldr	r3, [r7, #4]
 8021f76:	689b      	ldr	r3, [r3, #8]
 8021f78:	2b05      	cmp	r3, #5
 8021f7a:	d104      	bne.n	8021f86 <HAL_RCC_OscConfig+0x43e>
 8021f7c:	f7ff fb4b 	bl	8021616 <LL_RCC_LSE_EnableBypass>
 8021f80:	f7ff fb27 	bl	80215d2 <LL_RCC_LSE_Enable>
 8021f84:	e003      	b.n	8021f8e <HAL_RCC_OscConfig+0x446>
 8021f86:	f7ff fb35 	bl	80215f4 <LL_RCC_LSE_Disable>
 8021f8a:	f7ff fb55 	bl	8021638 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	689b      	ldr	r3, [r3, #8]
 8021f92:	2b00      	cmp	r3, #0
 8021f94:	d014      	beq.n	8021fc0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021f96:	f7fe feb1 	bl	8020cfc <HAL_GetTick>
 8021f9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8021f9c:	e00a      	b.n	8021fb4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021f9e:	f7fe fead 	bl	8020cfc <HAL_GetTick>
 8021fa2:	4602      	mov	r2, r0
 8021fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021fa6:	1ad3      	subs	r3, r2, r3
 8021fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021fac:	4293      	cmp	r3, r2
 8021fae:	d901      	bls.n	8021fb4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8021fb0:	2303      	movs	r3, #3
 8021fb2:	e136      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8021fb4:	f7ff fb51 	bl	802165a <LL_RCC_LSE_IsReady>
 8021fb8:	4603      	mov	r3, r0
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	d0ef      	beq.n	8021f9e <HAL_RCC_OscConfig+0x456>
 8021fbe:	e013      	b.n	8021fe8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8021fc0:	f7fe fe9c 	bl	8020cfc <HAL_GetTick>
 8021fc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8021fc6:	e00a      	b.n	8021fde <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8021fc8:	f7fe fe98 	bl	8020cfc <HAL_GetTick>
 8021fcc:	4602      	mov	r2, r0
 8021fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021fd0:	1ad3      	subs	r3, r2, r3
 8021fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021fd6:	4293      	cmp	r3, r2
 8021fd8:	d901      	bls.n	8021fde <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8021fda:	2303      	movs	r3, #3
 8021fdc:	e121      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8021fde:	f7ff fb3c 	bl	802165a <LL_RCC_LSE_IsReady>
 8021fe2:	4603      	mov	r3, r0
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	d1ef      	bne.n	8021fc8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	681b      	ldr	r3, [r3, #0]
 8021fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d02c      	beq.n	802204e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ff8:	2b00      	cmp	r3, #0
 8021ffa:	d014      	beq.n	8022026 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8021ffc:	f7ff fab5 	bl	802156a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022000:	f7fe fe7c 	bl	8020cfc <HAL_GetTick>
 8022004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8022006:	e008      	b.n	802201a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8022008:	f7fe fe78 	bl	8020cfc <HAL_GetTick>
 802200c:	4602      	mov	r2, r0
 802200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022010:	1ad3      	subs	r3, r2, r3
 8022012:	2b02      	cmp	r3, #2
 8022014:	d901      	bls.n	802201a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8022016:	2303      	movs	r3, #3
 8022018:	e103      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 802201a:	f7ff fac8 	bl	80215ae <LL_RCC_HSI48_IsReady>
 802201e:	4603      	mov	r3, r0
 8022020:	2b00      	cmp	r3, #0
 8022022:	d0f1      	beq.n	8022008 <HAL_RCC_OscConfig+0x4c0>
 8022024:	e013      	b.n	802204e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8022026:	f7ff fab1 	bl	802158c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 802202a:	f7fe fe67 	bl	8020cfc <HAL_GetTick>
 802202e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8022030:	e008      	b.n	8022044 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8022032:	f7fe fe63 	bl	8020cfc <HAL_GetTick>
 8022036:	4602      	mov	r2, r0
 8022038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802203a:	1ad3      	subs	r3, r2, r3
 802203c:	2b02      	cmp	r3, #2
 802203e:	d901      	bls.n	8022044 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8022040:	2303      	movs	r3, #3
 8022042:	e0ee      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8022044:	f7ff fab3 	bl	80215ae <LL_RCC_HSI48_IsReady>
 8022048:	4603      	mov	r3, r0
 802204a:	2b00      	cmp	r3, #0
 802204c:	d1f1      	bne.n	8022032 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 802204e:	687b      	ldr	r3, [r7, #4]
 8022050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022052:	2b00      	cmp	r3, #0
 8022054:	f000 80e4 	beq.w	8022220 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8022058:	f7ff fc11 	bl	802187e <LL_RCC_GetSysClkSource>
 802205c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 802205e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022062:	68db      	ldr	r3, [r3, #12]
 8022064:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802206a:	2b02      	cmp	r3, #2
 802206c:	f040 80b4 	bne.w	80221d8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	f003 0203 	and.w	r2, r3, #3
 8022076:	687b      	ldr	r3, [r7, #4]
 8022078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802207a:	429a      	cmp	r2, r3
 802207c:	d123      	bne.n	80220c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 802207e:	68fb      	ldr	r3, [r7, #12]
 8022080:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8022084:	687b      	ldr	r3, [r7, #4]
 8022086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022088:	429a      	cmp	r2, r3
 802208a:	d11c      	bne.n	80220c6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 802208c:	68fb      	ldr	r3, [r7, #12]
 802208e:	0a1b      	lsrs	r3, r3, #8
 8022090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8022094:	687b      	ldr	r3, [r7, #4]
 8022096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8022098:	429a      	cmp	r2, r3
 802209a:	d114      	bne.n	80220c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 802209c:	68fb      	ldr	r3, [r7, #12]
 802209e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80220a6:	429a      	cmp	r2, r3
 80220a8:	d10d      	bne.n	80220c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80220aa:	68fb      	ldr	r3, [r7, #12]
 80220ac:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80220b0:	687b      	ldr	r3, [r7, #4]
 80220b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80220b4:	429a      	cmp	r2, r3
 80220b6:	d106      	bne.n	80220c6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80220b8:	68fb      	ldr	r3, [r7, #12]
 80220ba:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80220be:	687b      	ldr	r3, [r7, #4]
 80220c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80220c2:	429a      	cmp	r2, r3
 80220c4:	d05d      	beq.n	8022182 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80220c6:	693b      	ldr	r3, [r7, #16]
 80220c8:	2b0c      	cmp	r3, #12
 80220ca:	d058      	beq.n	802217e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80220cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80220d0:	681b      	ldr	r3, [r3, #0]
 80220d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80220d6:	2b00      	cmp	r3, #0
 80220d8:	d001      	beq.n	80220de <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80220da:	2301      	movs	r3, #1
 80220dc:	e0a1      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80220de:	f7ff fc84 	bl	80219ea <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80220e2:	f7fe fe0b 	bl	8020cfc <HAL_GetTick>
 80220e6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80220e8:	e008      	b.n	80220fc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80220ea:	f7fe fe07 	bl	8020cfc <HAL_GetTick>
 80220ee:	4602      	mov	r2, r0
 80220f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80220f2:	1ad3      	subs	r3, r2, r3
 80220f4:	2b02      	cmp	r3, #2
 80220f6:	d901      	bls.n	80220fc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80220f8:	2303      	movs	r3, #3
 80220fa:	e092      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80220fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022100:	681b      	ldr	r3, [r3, #0]
 8022102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022106:	2b00      	cmp	r3, #0
 8022108:	d1ef      	bne.n	80220ea <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 802210a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802210e:	68da      	ldr	r2, [r3, #12]
 8022110:	4b30      	ldr	r3, [pc, #192]	@ (80221d4 <HAL_RCC_OscConfig+0x68c>)
 8022112:	4013      	ands	r3, r2
 8022114:	687a      	ldr	r2, [r7, #4]
 8022116:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8022118:	687a      	ldr	r2, [r7, #4]
 802211a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 802211c:	4311      	orrs	r1, r2
 802211e:	687a      	ldr	r2, [r7, #4]
 8022120:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8022122:	0212      	lsls	r2, r2, #8
 8022124:	4311      	orrs	r1, r2
 8022126:	687a      	ldr	r2, [r7, #4]
 8022128:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 802212a:	4311      	orrs	r1, r2
 802212c:	687a      	ldr	r2, [r7, #4]
 802212e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8022130:	4311      	orrs	r1, r2
 8022132:	687a      	ldr	r2, [r7, #4]
 8022134:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8022136:	430a      	orrs	r2, r1
 8022138:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802213c:	4313      	orrs	r3, r2
 802213e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8022140:	f7ff fc44 	bl	80219cc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8022144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022148:	68db      	ldr	r3, [r3, #12]
 802214a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 802214e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8022152:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8022154:	f7fe fdd2 	bl	8020cfc <HAL_GetTick>
 8022158:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802215a:	e008      	b.n	802216e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 802215c:	f7fe fdce 	bl	8020cfc <HAL_GetTick>
 8022160:	4602      	mov	r2, r0
 8022162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022164:	1ad3      	subs	r3, r2, r3
 8022166:	2b02      	cmp	r3, #2
 8022168:	d901      	bls.n	802216e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 802216a:	2303      	movs	r3, #3
 802216c:	e059      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 802216e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022172:	681b      	ldr	r3, [r3, #0]
 8022174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022178:	2b00      	cmp	r3, #0
 802217a:	d0ef      	beq.n	802215c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 802217c:	e050      	b.n	8022220 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 802217e:	2301      	movs	r3, #1
 8022180:	e04f      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8022182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022186:	681b      	ldr	r3, [r3, #0]
 8022188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 802218c:	2b00      	cmp	r3, #0
 802218e:	d147      	bne.n	8022220 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8022190:	f7ff fc1c 	bl	80219cc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8022194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022198:	68db      	ldr	r3, [r3, #12]
 802219a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 802219e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80221a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80221a4:	f7fe fdaa 	bl	8020cfc <HAL_GetTick>
 80221a8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80221aa:	e008      	b.n	80221be <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80221ac:	f7fe fda6 	bl	8020cfc <HAL_GetTick>
 80221b0:	4602      	mov	r2, r0
 80221b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80221b4:	1ad3      	subs	r3, r2, r3
 80221b6:	2b02      	cmp	r3, #2
 80221b8:	d901      	bls.n	80221be <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80221ba:	2303      	movs	r3, #3
 80221bc:	e031      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80221be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80221c8:	2b00      	cmp	r3, #0
 80221ca:	d0ef      	beq.n	80221ac <HAL_RCC_OscConfig+0x664>
 80221cc:	e028      	b.n	8022220 <HAL_RCC_OscConfig+0x6d8>
 80221ce:	bf00      	nop
 80221d0:	58000400 	.word	0x58000400
 80221d4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80221d8:	693b      	ldr	r3, [r7, #16]
 80221da:	2b0c      	cmp	r3, #12
 80221dc:	d01e      	beq.n	802221c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80221de:	f7ff fc04 	bl	80219ea <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80221e2:	f7fe fd8b 	bl	8020cfc <HAL_GetTick>
 80221e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80221e8:	e008      	b.n	80221fc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80221ea:	f7fe fd87 	bl	8020cfc <HAL_GetTick>
 80221ee:	4602      	mov	r2, r0
 80221f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80221f2:	1ad3      	subs	r3, r2, r3
 80221f4:	2b02      	cmp	r3, #2
 80221f6:	d901      	bls.n	80221fc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80221f8:	2303      	movs	r3, #3
 80221fa:	e012      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80221fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8022206:	2b00      	cmp	r3, #0
 8022208:	d1ef      	bne.n	80221ea <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 802220a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802220e:	68da      	ldr	r2, [r3, #12]
 8022210:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022214:	4b05      	ldr	r3, [pc, #20]	@ (802222c <HAL_RCC_OscConfig+0x6e4>)
 8022216:	4013      	ands	r3, r2
 8022218:	60cb      	str	r3, [r1, #12]
 802221a:	e001      	b.n	8022220 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 802221c:	2301      	movs	r3, #1
 802221e:	e000      	b.n	8022222 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8022220:	2300      	movs	r3, #0
}
 8022222:	4618      	mov	r0, r3
 8022224:	3734      	adds	r7, #52	@ 0x34
 8022226:	46bd      	mov	sp, r7
 8022228:	bd90      	pop	{r4, r7, pc}
 802222a:	bf00      	nop
 802222c:	eefefffc 	.word	0xeefefffc

08022230 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022230:	b580      	push	{r7, lr}
 8022232:	b084      	sub	sp, #16
 8022234:	af00      	add	r7, sp, #0
 8022236:	6078      	str	r0, [r7, #4]
 8022238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 802223a:	687b      	ldr	r3, [r7, #4]
 802223c:	2b00      	cmp	r3, #0
 802223e:	d101      	bne.n	8022244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8022240:	2301      	movs	r3, #1
 8022242:	e12d      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8022244:	4b98      	ldr	r3, [pc, #608]	@ (80224a8 <HAL_RCC_ClockConfig+0x278>)
 8022246:	681b      	ldr	r3, [r3, #0]
 8022248:	f003 0307 	and.w	r3, r3, #7
 802224c:	683a      	ldr	r2, [r7, #0]
 802224e:	429a      	cmp	r2, r3
 8022250:	d91b      	bls.n	802228a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022252:	4b95      	ldr	r3, [pc, #596]	@ (80224a8 <HAL_RCC_ClockConfig+0x278>)
 8022254:	681b      	ldr	r3, [r3, #0]
 8022256:	f023 0207 	bic.w	r2, r3, #7
 802225a:	4993      	ldr	r1, [pc, #588]	@ (80224a8 <HAL_RCC_ClockConfig+0x278>)
 802225c:	683b      	ldr	r3, [r7, #0]
 802225e:	4313      	orrs	r3, r2
 8022260:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022262:	f7fe fd4b 	bl	8020cfc <HAL_GetTick>
 8022266:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8022268:	e008      	b.n	802227c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 802226a:	f7fe fd47 	bl	8020cfc <HAL_GetTick>
 802226e:	4602      	mov	r2, r0
 8022270:	68fb      	ldr	r3, [r7, #12]
 8022272:	1ad3      	subs	r3, r2, r3
 8022274:	2b02      	cmp	r3, #2
 8022276:	d901      	bls.n	802227c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8022278:	2303      	movs	r3, #3
 802227a:	e111      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 802227c:	4b8a      	ldr	r3, [pc, #552]	@ (80224a8 <HAL_RCC_ClockConfig+0x278>)
 802227e:	681b      	ldr	r3, [r3, #0]
 8022280:	f003 0307 	and.w	r3, r3, #7
 8022284:	683a      	ldr	r2, [r7, #0]
 8022286:	429a      	cmp	r2, r3
 8022288:	d1ef      	bne.n	802226a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	681b      	ldr	r3, [r3, #0]
 802228e:	f003 0302 	and.w	r3, r3, #2
 8022292:	2b00      	cmp	r3, #0
 8022294:	d016      	beq.n	80222c4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	689b      	ldr	r3, [r3, #8]
 802229a:	4618      	mov	r0, r3
 802229c:	f7ff fafb 	bl	8021896 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80222a0:	f7fe fd2c 	bl	8020cfc <HAL_GetTick>
 80222a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80222a6:	e008      	b.n	80222ba <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80222a8:	f7fe fd28 	bl	8020cfc <HAL_GetTick>
 80222ac:	4602      	mov	r2, r0
 80222ae:	68fb      	ldr	r3, [r7, #12]
 80222b0:	1ad3      	subs	r3, r2, r3
 80222b2:	2b02      	cmp	r3, #2
 80222b4:	d901      	bls.n	80222ba <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80222b6:	2303      	movs	r3, #3
 80222b8:	e0f2      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80222ba:	f7ff fbe8 	bl	8021a8e <LL_RCC_IsActiveFlag_HPRE>
 80222be:	4603      	mov	r3, r0
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	d0f1      	beq.n	80222a8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	681b      	ldr	r3, [r3, #0]
 80222c8:	f003 0320 	and.w	r3, r3, #32
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	d016      	beq.n	80222fe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	695b      	ldr	r3, [r3, #20]
 80222d4:	4618      	mov	r0, r3
 80222d6:	f7ff faf2 	bl	80218be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80222da:	f7fe fd0f 	bl	8020cfc <HAL_GetTick>
 80222de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80222e0:	e008      	b.n	80222f4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80222e2:	f7fe fd0b 	bl	8020cfc <HAL_GetTick>
 80222e6:	4602      	mov	r2, r0
 80222e8:	68fb      	ldr	r3, [r7, #12]
 80222ea:	1ad3      	subs	r3, r2, r3
 80222ec:	2b02      	cmp	r3, #2
 80222ee:	d901      	bls.n	80222f4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80222f0:	2303      	movs	r3, #3
 80222f2:	e0d5      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80222f4:	f7ff fbdd 	bl	8021ab2 <LL_RCC_IsActiveFlag_C2HPRE>
 80222f8:	4603      	mov	r3, r0
 80222fa:	2b00      	cmp	r3, #0
 80222fc:	d0f1      	beq.n	80222e2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80222fe:	687b      	ldr	r3, [r7, #4]
 8022300:	681b      	ldr	r3, [r3, #0]
 8022302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022306:	2b00      	cmp	r3, #0
 8022308:	d016      	beq.n	8022338 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	699b      	ldr	r3, [r3, #24]
 802230e:	4618      	mov	r0, r3
 8022310:	f7ff faeb 	bl	80218ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8022314:	f7fe fcf2 	bl	8020cfc <HAL_GetTick>
 8022318:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 802231a:	e008      	b.n	802232e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 802231c:	f7fe fcee 	bl	8020cfc <HAL_GetTick>
 8022320:	4602      	mov	r2, r0
 8022322:	68fb      	ldr	r3, [r7, #12]
 8022324:	1ad3      	subs	r3, r2, r3
 8022326:	2b02      	cmp	r3, #2
 8022328:	d901      	bls.n	802232e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 802232a:	2303      	movs	r3, #3
 802232c:	e0b8      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 802232e:	f7ff fbd3 	bl	8021ad8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8022332:	4603      	mov	r3, r0
 8022334:	2b00      	cmp	r3, #0
 8022336:	d0f1      	beq.n	802231c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022338:	687b      	ldr	r3, [r7, #4]
 802233a:	681b      	ldr	r3, [r3, #0]
 802233c:	f003 0304 	and.w	r3, r3, #4
 8022340:	2b00      	cmp	r3, #0
 8022342:	d016      	beq.n	8022372 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8022344:	687b      	ldr	r3, [r7, #4]
 8022346:	68db      	ldr	r3, [r3, #12]
 8022348:	4618      	mov	r0, r3
 802234a:	f7ff fae5 	bl	8021918 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 802234e:	f7fe fcd5 	bl	8020cfc <HAL_GetTick>
 8022352:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8022354:	e008      	b.n	8022368 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8022356:	f7fe fcd1 	bl	8020cfc <HAL_GetTick>
 802235a:	4602      	mov	r2, r0
 802235c:	68fb      	ldr	r3, [r7, #12]
 802235e:	1ad3      	subs	r3, r2, r3
 8022360:	2b02      	cmp	r3, #2
 8022362:	d901      	bls.n	8022368 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8022364:	2303      	movs	r3, #3
 8022366:	e09b      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8022368:	f7ff fbc9 	bl	8021afe <LL_RCC_IsActiveFlag_PPRE1>
 802236c:	4603      	mov	r3, r0
 802236e:	2b00      	cmp	r3, #0
 8022370:	d0f1      	beq.n	8022356 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	681b      	ldr	r3, [r3, #0]
 8022376:	f003 0308 	and.w	r3, r3, #8
 802237a:	2b00      	cmp	r3, #0
 802237c:	d017      	beq.n	80223ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	691b      	ldr	r3, [r3, #16]
 8022382:	00db      	lsls	r3, r3, #3
 8022384:	4618      	mov	r0, r3
 8022386:	f7ff fadb 	bl	8021940 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 802238a:	f7fe fcb7 	bl	8020cfc <HAL_GetTick>
 802238e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8022390:	e008      	b.n	80223a4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8022392:	f7fe fcb3 	bl	8020cfc <HAL_GetTick>
 8022396:	4602      	mov	r2, r0
 8022398:	68fb      	ldr	r3, [r7, #12]
 802239a:	1ad3      	subs	r3, r2, r3
 802239c:	2b02      	cmp	r3, #2
 802239e:	d901      	bls.n	80223a4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80223a0:	2303      	movs	r3, #3
 80223a2:	e07d      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80223a4:	f7ff fbbd 	bl	8021b22 <LL_RCC_IsActiveFlag_PPRE2>
 80223a8:	4603      	mov	r3, r0
 80223aa:	2b00      	cmp	r3, #0
 80223ac:	d0f1      	beq.n	8022392 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80223ae:	687b      	ldr	r3, [r7, #4]
 80223b0:	681b      	ldr	r3, [r3, #0]
 80223b2:	f003 0301 	and.w	r3, r3, #1
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d043      	beq.n	8022442 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80223ba:	687b      	ldr	r3, [r7, #4]
 80223bc:	685b      	ldr	r3, [r3, #4]
 80223be:	2b02      	cmp	r3, #2
 80223c0:	d106      	bne.n	80223d0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80223c2:	f7ff f87b 	bl	80214bc <LL_RCC_HSE_IsReady>
 80223c6:	4603      	mov	r3, r0
 80223c8:	2b00      	cmp	r3, #0
 80223ca:	d11e      	bne.n	802240a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80223cc:	2301      	movs	r3, #1
 80223ce:	e067      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	685b      	ldr	r3, [r3, #4]
 80223d4:	2b03      	cmp	r3, #3
 80223d6:	d106      	bne.n	80223e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80223d8:	f7ff fb16 	bl	8021a08 <LL_RCC_PLL_IsReady>
 80223dc:	4603      	mov	r3, r0
 80223de:	2b00      	cmp	r3, #0
 80223e0:	d113      	bne.n	802240a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80223e2:	2301      	movs	r3, #1
 80223e4:	e05c      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	685b      	ldr	r3, [r3, #4]
 80223ea:	2b00      	cmp	r3, #0
 80223ec:	d106      	bne.n	80223fc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80223ee:	f7ff f9e3 	bl	80217b8 <LL_RCC_MSI_IsReady>
 80223f2:	4603      	mov	r3, r0
 80223f4:	2b00      	cmp	r3, #0
 80223f6:	d108      	bne.n	802240a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80223f8:	2301      	movs	r3, #1
 80223fa:	e051      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80223fc:	f7ff f88e 	bl	802151c <LL_RCC_HSI_IsReady>
 8022400:	4603      	mov	r3, r0
 8022402:	2b00      	cmp	r3, #0
 8022404:	d101      	bne.n	802240a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8022406:	2301      	movs	r3, #1
 8022408:	e04a      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	685b      	ldr	r3, [r3, #4]
 802240e:	4618      	mov	r0, r3
 8022410:	f7ff fa21 	bl	8021856 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022414:	f7fe fc72 	bl	8020cfc <HAL_GetTick>
 8022418:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802241a:	e00a      	b.n	8022432 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 802241c:	f7fe fc6e 	bl	8020cfc <HAL_GetTick>
 8022420:	4602      	mov	r2, r0
 8022422:	68fb      	ldr	r3, [r7, #12]
 8022424:	1ad3      	subs	r3, r2, r3
 8022426:	f241 3288 	movw	r2, #5000	@ 0x1388
 802242a:	4293      	cmp	r3, r2
 802242c:	d901      	bls.n	8022432 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 802242e:	2303      	movs	r3, #3
 8022430:	e036      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022432:	f7ff fa24 	bl	802187e <LL_RCC_GetSysClkSource>
 8022436:	4602      	mov	r2, r0
 8022438:	687b      	ldr	r3, [r7, #4]
 802243a:	685b      	ldr	r3, [r3, #4]
 802243c:	009b      	lsls	r3, r3, #2
 802243e:	429a      	cmp	r2, r3
 8022440:	d1ec      	bne.n	802241c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8022442:	4b19      	ldr	r3, [pc, #100]	@ (80224a8 <HAL_RCC_ClockConfig+0x278>)
 8022444:	681b      	ldr	r3, [r3, #0]
 8022446:	f003 0307 	and.w	r3, r3, #7
 802244a:	683a      	ldr	r2, [r7, #0]
 802244c:	429a      	cmp	r2, r3
 802244e:	d21b      	bcs.n	8022488 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022450:	4b15      	ldr	r3, [pc, #84]	@ (80224a8 <HAL_RCC_ClockConfig+0x278>)
 8022452:	681b      	ldr	r3, [r3, #0]
 8022454:	f023 0207 	bic.w	r2, r3, #7
 8022458:	4913      	ldr	r1, [pc, #76]	@ (80224a8 <HAL_RCC_ClockConfig+0x278>)
 802245a:	683b      	ldr	r3, [r7, #0]
 802245c:	4313      	orrs	r3, r2
 802245e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022460:	f7fe fc4c 	bl	8020cfc <HAL_GetTick>
 8022464:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8022466:	e008      	b.n	802247a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8022468:	f7fe fc48 	bl	8020cfc <HAL_GetTick>
 802246c:	4602      	mov	r2, r0
 802246e:	68fb      	ldr	r3, [r7, #12]
 8022470:	1ad3      	subs	r3, r2, r3
 8022472:	2b02      	cmp	r3, #2
 8022474:	d901      	bls.n	802247a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8022476:	2303      	movs	r3, #3
 8022478:	e012      	b.n	80224a0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 802247a:	4b0b      	ldr	r3, [pc, #44]	@ (80224a8 <HAL_RCC_ClockConfig+0x278>)
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	f003 0307 	and.w	r3, r3, #7
 8022482:	683a      	ldr	r2, [r7, #0]
 8022484:	429a      	cmp	r2, r3
 8022486:	d1ef      	bne.n	8022468 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8022488:	f000 f87e 	bl	8022588 <HAL_RCC_GetHCLKFreq>
 802248c:	4603      	mov	r3, r0
 802248e:	4a07      	ldr	r2, [pc, #28]	@ (80224ac <HAL_RCC_ClockConfig+0x27c>)
 8022490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8022492:	f7fe fc3f 	bl	8020d14 <HAL_GetTickPrio>
 8022496:	4603      	mov	r3, r0
 8022498:	4618      	mov	r0, r3
 802249a:	f7fe fbe1 	bl	8020c60 <HAL_InitTick>
 802249e:	4603      	mov	r3, r0
}
 80224a0:	4618      	mov	r0, r3
 80224a2:	3710      	adds	r7, #16
 80224a4:	46bd      	mov	sp, r7
 80224a6:	bd80      	pop	{r7, pc}
 80224a8:	58004000 	.word	0x58004000
 80224ac:	20000008 	.word	0x20000008

080224b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80224b0:	b590      	push	{r4, r7, lr}
 80224b2:	b085      	sub	sp, #20
 80224b4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80224b6:	f7ff f9e2 	bl	802187e <LL_RCC_GetSysClkSource>
 80224ba:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80224bc:	687b      	ldr	r3, [r7, #4]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d10a      	bne.n	80224d8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80224c2:	f7ff f99e 	bl	8021802 <LL_RCC_MSI_GetRange>
 80224c6:	4603      	mov	r3, r0
 80224c8:	091b      	lsrs	r3, r3, #4
 80224ca:	f003 030f 	and.w	r3, r3, #15
 80224ce:	4a2b      	ldr	r2, [pc, #172]	@ (802257c <HAL_RCC_GetSysClockFreq+0xcc>)
 80224d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80224d4:	60fb      	str	r3, [r7, #12]
 80224d6:	e04b      	b.n	8022570 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80224d8:	687b      	ldr	r3, [r7, #4]
 80224da:	2b04      	cmp	r3, #4
 80224dc:	d102      	bne.n	80224e4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80224de:	4b28      	ldr	r3, [pc, #160]	@ (8022580 <HAL_RCC_GetSysClockFreq+0xd0>)
 80224e0:	60fb      	str	r3, [r7, #12]
 80224e2:	e045      	b.n	8022570 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	2b08      	cmp	r3, #8
 80224e8:	d10a      	bne.n	8022500 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80224ea:	f7fe ffb7 	bl	802145c <LL_RCC_HSE_IsEnabledDiv2>
 80224ee:	4603      	mov	r3, r0
 80224f0:	2b01      	cmp	r3, #1
 80224f2:	d102      	bne.n	80224fa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80224f4:	4b22      	ldr	r3, [pc, #136]	@ (8022580 <HAL_RCC_GetSysClockFreq+0xd0>)
 80224f6:	60fb      	str	r3, [r7, #12]
 80224f8:	e03a      	b.n	8022570 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80224fa:	4b22      	ldr	r3, [pc, #136]	@ (8022584 <HAL_RCC_GetSysClockFreq+0xd4>)
 80224fc:	60fb      	str	r3, [r7, #12]
 80224fe:	e037      	b.n	8022570 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8022500:	f7ff fab9 	bl	8021a76 <LL_RCC_PLL_GetMainSource>
 8022504:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8022506:	683b      	ldr	r3, [r7, #0]
 8022508:	2b02      	cmp	r3, #2
 802250a:	d003      	beq.n	8022514 <HAL_RCC_GetSysClockFreq+0x64>
 802250c:	683b      	ldr	r3, [r7, #0]
 802250e:	2b03      	cmp	r3, #3
 8022510:	d003      	beq.n	802251a <HAL_RCC_GetSysClockFreq+0x6a>
 8022512:	e00d      	b.n	8022530 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8022514:	4b1a      	ldr	r3, [pc, #104]	@ (8022580 <HAL_RCC_GetSysClockFreq+0xd0>)
 8022516:	60bb      	str	r3, [r7, #8]
        break;
 8022518:	e015      	b.n	8022546 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 802251a:	f7fe ff9f 	bl	802145c <LL_RCC_HSE_IsEnabledDiv2>
 802251e:	4603      	mov	r3, r0
 8022520:	2b01      	cmp	r3, #1
 8022522:	d102      	bne.n	802252a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8022524:	4b16      	ldr	r3, [pc, #88]	@ (8022580 <HAL_RCC_GetSysClockFreq+0xd0>)
 8022526:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8022528:	e00d      	b.n	8022546 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 802252a:	4b16      	ldr	r3, [pc, #88]	@ (8022584 <HAL_RCC_GetSysClockFreq+0xd4>)
 802252c:	60bb      	str	r3, [r7, #8]
        break;
 802252e:	e00a      	b.n	8022546 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8022530:	f7ff f967 	bl	8021802 <LL_RCC_MSI_GetRange>
 8022534:	4603      	mov	r3, r0
 8022536:	091b      	lsrs	r3, r3, #4
 8022538:	f003 030f 	and.w	r3, r3, #15
 802253c:	4a0f      	ldr	r2, [pc, #60]	@ (802257c <HAL_RCC_GetSysClockFreq+0xcc>)
 802253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022542:	60bb      	str	r3, [r7, #8]
        break;
 8022544:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8022546:	f7ff fa71 	bl	8021a2c <LL_RCC_PLL_GetN>
 802254a:	4602      	mov	r2, r0
 802254c:	68bb      	ldr	r3, [r7, #8]
 802254e:	fb03 f402 	mul.w	r4, r3, r2
 8022552:	f7ff fa84 	bl	8021a5e <LL_RCC_PLL_GetDivider>
 8022556:	4603      	mov	r3, r0
 8022558:	091b      	lsrs	r3, r3, #4
 802255a:	3301      	adds	r3, #1
 802255c:	fbb4 f4f3 	udiv	r4, r4, r3
 8022560:	f7ff fa71 	bl	8021a46 <LL_RCC_PLL_GetR>
 8022564:	4603      	mov	r3, r0
 8022566:	0f5b      	lsrs	r3, r3, #29
 8022568:	3301      	adds	r3, #1
 802256a:	fbb4 f3f3 	udiv	r3, r4, r3
 802256e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8022570:	68fb      	ldr	r3, [r7, #12]
}
 8022572:	4618      	mov	r0, r3
 8022574:	3714      	adds	r7, #20
 8022576:	46bd      	mov	sp, r7
 8022578:	bd90      	pop	{r4, r7, pc}
 802257a:	bf00      	nop
 802257c:	080252fc 	.word	0x080252fc
 8022580:	00f42400 	.word	0x00f42400
 8022584:	01e84800 	.word	0x01e84800

08022588 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8022588:	b598      	push	{r3, r4, r7, lr}
 802258a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 802258c:	f7ff ff90 	bl	80224b0 <HAL_RCC_GetSysClockFreq>
 8022590:	4604      	mov	r4, r0
 8022592:	f7ff f9e9 	bl	8021968 <LL_RCC_GetAHBPrescaler>
 8022596:	4603      	mov	r3, r0
 8022598:	091b      	lsrs	r3, r3, #4
 802259a:	f003 030f 	and.w	r3, r3, #15
 802259e:	4a03      	ldr	r2, [pc, #12]	@ (80225ac <HAL_RCC_GetHCLKFreq+0x24>)
 80225a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80225a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80225a8:	4618      	mov	r0, r3
 80225aa:	bd98      	pop	{r3, r4, r7, pc}
 80225ac:	0802529c 	.word	0x0802529c

080225b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80225b0:	b598      	push	{r3, r4, r7, lr}
 80225b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80225b4:	f7ff ffe8 	bl	8022588 <HAL_RCC_GetHCLKFreq>
 80225b8:	4604      	mov	r4, r0
 80225ba:	f7ff f9ef 	bl	802199c <LL_RCC_GetAPB1Prescaler>
 80225be:	4603      	mov	r3, r0
 80225c0:	0a1b      	lsrs	r3, r3, #8
 80225c2:	f003 0307 	and.w	r3, r3, #7
 80225c6:	4a04      	ldr	r2, [pc, #16]	@ (80225d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80225c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80225cc:	f003 031f 	and.w	r3, r3, #31
 80225d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80225d4:	4618      	mov	r0, r3
 80225d6:	bd98      	pop	{r3, r4, r7, pc}
 80225d8:	080252dc 	.word	0x080252dc

080225dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80225dc:	b598      	push	{r3, r4, r7, lr}
 80225de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80225e0:	f7ff ffd2 	bl	8022588 <HAL_RCC_GetHCLKFreq>
 80225e4:	4604      	mov	r4, r0
 80225e6:	f7ff f9e5 	bl	80219b4 <LL_RCC_GetAPB2Prescaler>
 80225ea:	4603      	mov	r3, r0
 80225ec:	0adb      	lsrs	r3, r3, #11
 80225ee:	f003 0307 	and.w	r3, r3, #7
 80225f2:	4a04      	ldr	r2, [pc, #16]	@ (8022604 <HAL_RCC_GetPCLK2Freq+0x28>)
 80225f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80225f8:	f003 031f 	and.w	r3, r3, #31
 80225fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8022600:	4618      	mov	r0, r3
 8022602:	bd98      	pop	{r3, r4, r7, pc}
 8022604:	080252dc 	.word	0x080252dc

08022608 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8022608:	b590      	push	{r4, r7, lr}
 802260a:	b085      	sub	sp, #20
 802260c:	af00      	add	r7, sp, #0
 802260e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	2bb0      	cmp	r3, #176	@ 0xb0
 8022614:	d903      	bls.n	802261e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8022616:	4b15      	ldr	r3, [pc, #84]	@ (802266c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8022618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802261a:	60fb      	str	r3, [r7, #12]
 802261c:	e007      	b.n	802262e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 802261e:	687b      	ldr	r3, [r7, #4]
 8022620:	091b      	lsrs	r3, r3, #4
 8022622:	f003 030f 	and.w	r3, r3, #15
 8022626:	4a11      	ldr	r2, [pc, #68]	@ (802266c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8022628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802262c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 802262e:	f7ff f9a7 	bl	8021980 <LL_RCC_GetAHB4Prescaler>
 8022632:	4603      	mov	r3, r0
 8022634:	091b      	lsrs	r3, r3, #4
 8022636:	f003 030f 	and.w	r3, r3, #15
 802263a:	4a0d      	ldr	r2, [pc, #52]	@ (8022670 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 802263c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022640:	68fa      	ldr	r2, [r7, #12]
 8022642:	fbb2 f3f3 	udiv	r3, r2, r3
 8022646:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8022648:	68bb      	ldr	r3, [r7, #8]
 802264a:	4a0a      	ldr	r2, [pc, #40]	@ (8022674 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 802264c:	fba2 2303 	umull	r2, r3, r2, r3
 8022650:	0c9c      	lsrs	r4, r3, #18
 8022652:	f7fe fef5 	bl	8021440 <HAL_PWREx_GetVoltageRange>
 8022656:	4603      	mov	r3, r0
 8022658:	4619      	mov	r1, r3
 802265a:	4620      	mov	r0, r4
 802265c:	f000 f80c 	bl	8022678 <RCC_SetFlashLatency>
 8022660:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8022662:	4618      	mov	r0, r3
 8022664:	3714      	adds	r7, #20
 8022666:	46bd      	mov	sp, r7
 8022668:	bd90      	pop	{r4, r7, pc}
 802266a:	bf00      	nop
 802266c:	080252fc 	.word	0x080252fc
 8022670:	0802529c 	.word	0x0802529c
 8022674:	431bde83 	.word	0x431bde83

08022678 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8022678:	b590      	push	{r4, r7, lr}
 802267a:	b093      	sub	sp, #76	@ 0x4c
 802267c:	af00      	add	r7, sp, #0
 802267e:	6078      	str	r0, [r7, #4]
 8022680:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8022682:	4b37      	ldr	r3, [pc, #220]	@ (8022760 <RCC_SetFlashLatency+0xe8>)
 8022684:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8022688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802268a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 802268e:	4a35      	ldr	r2, [pc, #212]	@ (8022764 <RCC_SetFlashLatency+0xec>)
 8022690:	f107 031c 	add.w	r3, r7, #28
 8022694:	ca07      	ldmia	r2, {r0, r1, r2}
 8022696:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 802269a:	4b33      	ldr	r3, [pc, #204]	@ (8022768 <RCC_SetFlashLatency+0xf0>)
 802269c:	f107 040c 	add.w	r4, r7, #12
 80226a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80226a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80226a6:	2300      	movs	r3, #0
 80226a8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80226aa:	683b      	ldr	r3, [r7, #0]
 80226ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80226b0:	d11a      	bne.n	80226e8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80226b2:	2300      	movs	r3, #0
 80226b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80226b6:	e013      	b.n	80226e0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80226b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80226ba:	009b      	lsls	r3, r3, #2
 80226bc:	3348      	adds	r3, #72	@ 0x48
 80226be:	443b      	add	r3, r7
 80226c0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80226c4:	687a      	ldr	r2, [r7, #4]
 80226c6:	429a      	cmp	r2, r3
 80226c8:	d807      	bhi.n	80226da <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80226ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80226cc:	009b      	lsls	r3, r3, #2
 80226ce:	3348      	adds	r3, #72	@ 0x48
 80226d0:	443b      	add	r3, r7
 80226d2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80226d6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80226d8:	e020      	b.n	802271c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80226da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80226dc:	3301      	adds	r3, #1
 80226de:	643b      	str	r3, [r7, #64]	@ 0x40
 80226e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80226e2:	2b03      	cmp	r3, #3
 80226e4:	d9e8      	bls.n	80226b8 <RCC_SetFlashLatency+0x40>
 80226e6:	e019      	b.n	802271c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80226e8:	2300      	movs	r3, #0
 80226ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80226ec:	e013      	b.n	8022716 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80226ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80226f0:	009b      	lsls	r3, r3, #2
 80226f2:	3348      	adds	r3, #72	@ 0x48
 80226f4:	443b      	add	r3, r7
 80226f6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80226fa:	687a      	ldr	r2, [r7, #4]
 80226fc:	429a      	cmp	r2, r3
 80226fe:	d807      	bhi.n	8022710 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8022700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022702:	009b      	lsls	r3, r3, #2
 8022704:	3348      	adds	r3, #72	@ 0x48
 8022706:	443b      	add	r3, r7
 8022708:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 802270c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 802270e:	e005      	b.n	802271c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8022710:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022712:	3301      	adds	r3, #1
 8022714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8022716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022718:	2b02      	cmp	r3, #2
 802271a:	d9e8      	bls.n	80226ee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 802271c:	4b13      	ldr	r3, [pc, #76]	@ (802276c <RCC_SetFlashLatency+0xf4>)
 802271e:	681b      	ldr	r3, [r3, #0]
 8022720:	f023 0207 	bic.w	r2, r3, #7
 8022724:	4911      	ldr	r1, [pc, #68]	@ (802276c <RCC_SetFlashLatency+0xf4>)
 8022726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8022728:	4313      	orrs	r3, r2
 802272a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 802272c:	f7fe fae6 	bl	8020cfc <HAL_GetTick>
 8022730:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8022732:	e008      	b.n	8022746 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8022734:	f7fe fae2 	bl	8020cfc <HAL_GetTick>
 8022738:	4602      	mov	r2, r0
 802273a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802273c:	1ad3      	subs	r3, r2, r3
 802273e:	2b02      	cmp	r3, #2
 8022740:	d901      	bls.n	8022746 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8022742:	2303      	movs	r3, #3
 8022744:	e007      	b.n	8022756 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8022746:	4b09      	ldr	r3, [pc, #36]	@ (802276c <RCC_SetFlashLatency+0xf4>)
 8022748:	681b      	ldr	r3, [r3, #0]
 802274a:	f003 0307 	and.w	r3, r3, #7
 802274e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8022750:	429a      	cmp	r2, r3
 8022752:	d1ef      	bne.n	8022734 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8022754:	2300      	movs	r3, #0
}
 8022756:	4618      	mov	r0, r3
 8022758:	374c      	adds	r7, #76	@ 0x4c
 802275a:	46bd      	mov	sp, r7
 802275c:	bd90      	pop	{r4, r7, pc}
 802275e:	bf00      	nop
 8022760:	08025270 	.word	0x08025270
 8022764:	08025280 	.word	0x08025280
 8022768:	0802528c 	.word	0x0802528c
 802276c:	58004000 	.word	0x58004000

08022770 <LL_RCC_LSE_IsEnabled>:
{
 8022770:	b480      	push	{r7}
 8022772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8022774:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802277c:	f003 0301 	and.w	r3, r3, #1
 8022780:	2b01      	cmp	r3, #1
 8022782:	d101      	bne.n	8022788 <LL_RCC_LSE_IsEnabled+0x18>
 8022784:	2301      	movs	r3, #1
 8022786:	e000      	b.n	802278a <LL_RCC_LSE_IsEnabled+0x1a>
 8022788:	2300      	movs	r3, #0
}
 802278a:	4618      	mov	r0, r3
 802278c:	46bd      	mov	sp, r7
 802278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022792:	4770      	bx	lr

08022794 <LL_RCC_LSE_IsReady>:
{
 8022794:	b480      	push	{r7}
 8022796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8022798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80227a0:	f003 0302 	and.w	r3, r3, #2
 80227a4:	2b02      	cmp	r3, #2
 80227a6:	d101      	bne.n	80227ac <LL_RCC_LSE_IsReady+0x18>
 80227a8:	2301      	movs	r3, #1
 80227aa:	e000      	b.n	80227ae <LL_RCC_LSE_IsReady+0x1a>
 80227ac:	2300      	movs	r3, #0
}
 80227ae:	4618      	mov	r0, r3
 80227b0:	46bd      	mov	sp, r7
 80227b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227b6:	4770      	bx	lr

080227b8 <LL_RCC_SetRFWKPClockSource>:
{
 80227b8:	b480      	push	{r7}
 80227ba:	b083      	sub	sp, #12
 80227bc:	af00      	add	r7, sp, #0
 80227be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80227c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80227c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80227c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80227cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80227d0:	687b      	ldr	r3, [r7, #4]
 80227d2:	4313      	orrs	r3, r2
 80227d4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80227d8:	bf00      	nop
 80227da:	370c      	adds	r7, #12
 80227dc:	46bd      	mov	sp, r7
 80227de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227e2:	4770      	bx	lr

080227e4 <LL_RCC_SetSMPSClockSource>:
{
 80227e4:	b480      	push	{r7}
 80227e6:	b083      	sub	sp, #12
 80227e8:	af00      	add	r7, sp, #0
 80227ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80227ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80227f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80227f2:	f023 0203 	bic.w	r2, r3, #3
 80227f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	4313      	orrs	r3, r2
 80227fe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8022800:	bf00      	nop
 8022802:	370c      	adds	r7, #12
 8022804:	46bd      	mov	sp, r7
 8022806:	f85d 7b04 	ldr.w	r7, [sp], #4
 802280a:	4770      	bx	lr

0802280c <LL_RCC_SetSMPSPrescaler>:
{
 802280c:	b480      	push	{r7}
 802280e:	b083      	sub	sp, #12
 8022810:	af00      	add	r7, sp, #0
 8022812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8022814:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802281a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 802281e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	4313      	orrs	r3, r2
 8022826:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8022828:	bf00      	nop
 802282a:	370c      	adds	r7, #12
 802282c:	46bd      	mov	sp, r7
 802282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022832:	4770      	bx	lr

08022834 <LL_RCC_SetUSARTClockSource>:
{
 8022834:	b480      	push	{r7}
 8022836:	b083      	sub	sp, #12
 8022838:	af00      	add	r7, sp, #0
 802283a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 802283c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022844:	f023 0203 	bic.w	r2, r3, #3
 8022848:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802284c:	687b      	ldr	r3, [r7, #4]
 802284e:	4313      	orrs	r3, r2
 8022850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8022854:	bf00      	nop
 8022856:	370c      	adds	r7, #12
 8022858:	46bd      	mov	sp, r7
 802285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802285e:	4770      	bx	lr

08022860 <LL_RCC_SetLPUARTClockSource>:
{
 8022860:	b480      	push	{r7}
 8022862:	b083      	sub	sp, #12
 8022864:	af00      	add	r7, sp, #0
 8022866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8022868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802286c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022870:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8022874:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	4313      	orrs	r3, r2
 802287c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8022880:	bf00      	nop
 8022882:	370c      	adds	r7, #12
 8022884:	46bd      	mov	sp, r7
 8022886:	f85d 7b04 	ldr.w	r7, [sp], #4
 802288a:	4770      	bx	lr

0802288c <LL_RCC_SetI2CClockSource>:
{
 802288c:	b480      	push	{r7}
 802288e:	b083      	sub	sp, #12
 8022890:	af00      	add	r7, sp, #0
 8022892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8022894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022898:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 802289c:	687b      	ldr	r3, [r7, #4]
 802289e:	091b      	lsrs	r3, r3, #4
 80228a0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80228a4:	43db      	mvns	r3, r3
 80228a6:	401a      	ands	r2, r3
 80228a8:	687b      	ldr	r3, [r7, #4]
 80228aa:	011b      	lsls	r3, r3, #4
 80228ac:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80228b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80228b4:	4313      	orrs	r3, r2
 80228b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80228ba:	bf00      	nop
 80228bc:	370c      	adds	r7, #12
 80228be:	46bd      	mov	sp, r7
 80228c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c4:	4770      	bx	lr

080228c6 <LL_RCC_SetLPTIMClockSource>:
{
 80228c6:	b480      	push	{r7}
 80228c8:	b083      	sub	sp, #12
 80228ca:	af00      	add	r7, sp, #0
 80228cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80228ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80228d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80228d6:	687b      	ldr	r3, [r7, #4]
 80228d8:	0c1b      	lsrs	r3, r3, #16
 80228da:	041b      	lsls	r3, r3, #16
 80228dc:	43db      	mvns	r3, r3
 80228de:	401a      	ands	r2, r3
 80228e0:	687b      	ldr	r3, [r7, #4]
 80228e2:	041b      	lsls	r3, r3, #16
 80228e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80228e8:	4313      	orrs	r3, r2
 80228ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80228ee:	bf00      	nop
 80228f0:	370c      	adds	r7, #12
 80228f2:	46bd      	mov	sp, r7
 80228f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228f8:	4770      	bx	lr

080228fa <LL_RCC_SetSAIClockSource>:
{
 80228fa:	b480      	push	{r7}
 80228fc:	b083      	sub	sp, #12
 80228fe:	af00      	add	r7, sp, #0
 8022900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8022902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802290a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 802290e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	4313      	orrs	r3, r2
 8022916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 802291a:	bf00      	nop
 802291c:	370c      	adds	r7, #12
 802291e:	46bd      	mov	sp, r7
 8022920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022924:	4770      	bx	lr

08022926 <LL_RCC_SetRNGClockSource>:
{
 8022926:	b480      	push	{r7}
 8022928:	b083      	sub	sp, #12
 802292a:	af00      	add	r7, sp, #0
 802292c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 802292e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022936:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 802293a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802293e:	687b      	ldr	r3, [r7, #4]
 8022940:	4313      	orrs	r3, r2
 8022942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8022946:	bf00      	nop
 8022948:	370c      	adds	r7, #12
 802294a:	46bd      	mov	sp, r7
 802294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022950:	4770      	bx	lr

08022952 <LL_RCC_SetCLK48ClockSource>:
{
 8022952:	b480      	push	{r7}
 8022954:	b083      	sub	sp, #12
 8022956:	af00      	add	r7, sp, #0
 8022958:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 802295a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 802295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8022962:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8022966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	4313      	orrs	r3, r2
 802296e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8022972:	bf00      	nop
 8022974:	370c      	adds	r7, #12
 8022976:	46bd      	mov	sp, r7
 8022978:	f85d 7b04 	ldr.w	r7, [sp], #4
 802297c:	4770      	bx	lr

0802297e <LL_RCC_SetUSBClockSource>:
{
 802297e:	b580      	push	{r7, lr}
 8022980:	b082      	sub	sp, #8
 8022982:	af00      	add	r7, sp, #0
 8022984:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8022986:	6878      	ldr	r0, [r7, #4]
 8022988:	f7ff ffe3 	bl	8022952 <LL_RCC_SetCLK48ClockSource>
}
 802298c:	bf00      	nop
 802298e:	3708      	adds	r7, #8
 8022990:	46bd      	mov	sp, r7
 8022992:	bd80      	pop	{r7, pc}

08022994 <LL_RCC_SetADCClockSource>:
{
 8022994:	b480      	push	{r7}
 8022996:	b083      	sub	sp, #12
 8022998:	af00      	add	r7, sp, #0
 802299a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 802299c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80229a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80229a4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80229a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	4313      	orrs	r3, r2
 80229b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80229b4:	bf00      	nop
 80229b6:	370c      	adds	r7, #12
 80229b8:	46bd      	mov	sp, r7
 80229ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229be:	4770      	bx	lr

080229c0 <LL_RCC_SetRTCClockSource>:
{
 80229c0:	b480      	push	{r7}
 80229c2:	b083      	sub	sp, #12
 80229c4:	af00      	add	r7, sp, #0
 80229c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80229c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80229cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80229d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80229d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	4313      	orrs	r3, r2
 80229dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80229e0:	bf00      	nop
 80229e2:	370c      	adds	r7, #12
 80229e4:	46bd      	mov	sp, r7
 80229e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229ea:	4770      	bx	lr

080229ec <LL_RCC_GetRTCClockSource>:
{
 80229ec:	b480      	push	{r7}
 80229ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80229f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80229f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80229f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80229fc:	4618      	mov	r0, r3
 80229fe:	46bd      	mov	sp, r7
 8022a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a04:	4770      	bx	lr

08022a06 <LL_RCC_ForceBackupDomainReset>:
{
 8022a06:	b480      	push	{r7}
 8022a08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8022a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8022a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8022a1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8022a1e:	bf00      	nop
 8022a20:	46bd      	mov	sp, r7
 8022a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a26:	4770      	bx	lr

08022a28 <LL_RCC_ReleaseBackupDomainReset>:
{
 8022a28:	b480      	push	{r7}
 8022a2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8022a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8022a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8022a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8022a40:	bf00      	nop
 8022a42:	46bd      	mov	sp, r7
 8022a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a48:	4770      	bx	lr

08022a4a <LL_RCC_PLLSAI1_Enable>:
{
 8022a4a:	b480      	push	{r7}
 8022a4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8022a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022a52:	681b      	ldr	r3, [r3, #0]
 8022a54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022a58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8022a5c:	6013      	str	r3, [r2, #0]
}
 8022a5e:	bf00      	nop
 8022a60:	46bd      	mov	sp, r7
 8022a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a66:	4770      	bx	lr

08022a68 <LL_RCC_PLLSAI1_Disable>:
{
 8022a68:	b480      	push	{r7}
 8022a6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8022a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022a70:	681b      	ldr	r3, [r3, #0]
 8022a72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022a76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8022a7a:	6013      	str	r3, [r2, #0]
}
 8022a7c:	bf00      	nop
 8022a7e:	46bd      	mov	sp, r7
 8022a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022a84:	4770      	bx	lr

08022a86 <LL_RCC_PLLSAI1_IsReady>:
{
 8022a86:	b480      	push	{r7}
 8022a88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8022a8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022a8e:	681b      	ldr	r3, [r3, #0]
 8022a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8022a94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8022a98:	d101      	bne.n	8022a9e <LL_RCC_PLLSAI1_IsReady+0x18>
 8022a9a:	2301      	movs	r3, #1
 8022a9c:	e000      	b.n	8022aa0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8022a9e:	2300      	movs	r3, #0
}
 8022aa0:	4618      	mov	r0, r3
 8022aa2:	46bd      	mov	sp, r7
 8022aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aa8:	4770      	bx	lr

08022aaa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8022aaa:	b580      	push	{r7, lr}
 8022aac:	b088      	sub	sp, #32
 8022aae:	af00      	add	r7, sp, #0
 8022ab0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8022ab2:	2300      	movs	r3, #0
 8022ab4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8022ab6:	2300      	movs	r3, #0
 8022ab8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8022aba:	687b      	ldr	r3, [r7, #4]
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022ac2:	2b00      	cmp	r3, #0
 8022ac4:	d034      	beq.n	8022b30 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8022ac6:	687b      	ldr	r3, [r7, #4]
 8022ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022aca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8022ace:	d021      	beq.n	8022b14 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8022ad0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8022ad4:	d81b      	bhi.n	8022b0e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8022ad6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8022ada:	d01d      	beq.n	8022b18 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8022adc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8022ae0:	d815      	bhi.n	8022b0e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d00b      	beq.n	8022afe <HAL_RCCEx_PeriphCLKConfig+0x54>
 8022ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8022aea:	d110      	bne.n	8022b0e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8022aec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022af0:	68db      	ldr	r3, [r3, #12]
 8022af2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022af6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8022afa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8022afc:	e00d      	b.n	8022b1a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	3304      	adds	r3, #4
 8022b02:	4618      	mov	r0, r3
 8022b04:	f000 f947 	bl	8022d96 <RCCEx_PLLSAI1_ConfigNP>
 8022b08:	4603      	mov	r3, r0
 8022b0a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8022b0c:	e005      	b.n	8022b1a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8022b0e:	2301      	movs	r3, #1
 8022b10:	77fb      	strb	r3, [r7, #31]
        break;
 8022b12:	e002      	b.n	8022b1a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8022b14:	bf00      	nop
 8022b16:	e000      	b.n	8022b1a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8022b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8022b1a:	7ffb      	ldrb	r3, [r7, #31]
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d105      	bne.n	8022b2c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8022b20:	687b      	ldr	r3, [r7, #4]
 8022b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022b24:	4618      	mov	r0, r3
 8022b26:	f7ff fee8 	bl	80228fa <LL_RCC_SetSAIClockSource>
 8022b2a:	e001      	b.n	8022b30 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022b2c:	7ffb      	ldrb	r3, [r7, #31]
 8022b2e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8022b30:	687b      	ldr	r3, [r7, #4]
 8022b32:	681b      	ldr	r3, [r3, #0]
 8022b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8022b38:	2b00      	cmp	r3, #0
 8022b3a:	d046      	beq.n	8022bca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8022b3c:	f7ff ff56 	bl	80229ec <LL_RCC_GetRTCClockSource>
 8022b40:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8022b42:	687b      	ldr	r3, [r7, #4]
 8022b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022b46:	69ba      	ldr	r2, [r7, #24]
 8022b48:	429a      	cmp	r2, r3
 8022b4a:	d03c      	beq.n	8022bc6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8022b4c:	f7fe fc68 	bl	8021420 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8022b50:	69bb      	ldr	r3, [r7, #24]
 8022b52:	2b00      	cmp	r3, #0
 8022b54:	d105      	bne.n	8022b62 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8022b56:	687b      	ldr	r3, [r7, #4]
 8022b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022b5a:	4618      	mov	r0, r3
 8022b5c:	f7ff ff30 	bl	80229c0 <LL_RCC_SetRTCClockSource>
 8022b60:	e02e      	b.n	8022bc0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8022b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8022b6a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8022b6c:	f7ff ff4b 	bl	8022a06 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8022b70:	f7ff ff5a 	bl	8022a28 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8022b74:	697b      	ldr	r3, [r7, #20]
 8022b76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8022b7a:	687b      	ldr	r3, [r7, #4]
 8022b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022b7e:	4313      	orrs	r3, r2
 8022b80:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8022b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022b86:	697b      	ldr	r3, [r7, #20]
 8022b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8022b8c:	f7ff fdf0 	bl	8022770 <LL_RCC_LSE_IsEnabled>
 8022b90:	4603      	mov	r3, r0
 8022b92:	2b01      	cmp	r3, #1
 8022b94:	d114      	bne.n	8022bc0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8022b96:	f7fe f8b1 	bl	8020cfc <HAL_GetTick>
 8022b9a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8022b9c:	e00b      	b.n	8022bb6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8022b9e:	f7fe f8ad 	bl	8020cfc <HAL_GetTick>
 8022ba2:	4602      	mov	r2, r0
 8022ba4:	693b      	ldr	r3, [r7, #16]
 8022ba6:	1ad3      	subs	r3, r2, r3
 8022ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022bac:	4293      	cmp	r3, r2
 8022bae:	d902      	bls.n	8022bb6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8022bb0:	2303      	movs	r3, #3
 8022bb2:	77fb      	strb	r3, [r7, #31]
              break;
 8022bb4:	e004      	b.n	8022bc0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8022bb6:	f7ff fded 	bl	8022794 <LL_RCC_LSE_IsReady>
 8022bba:	4603      	mov	r3, r0
 8022bbc:	2b01      	cmp	r3, #1
 8022bbe:	d1ee      	bne.n	8022b9e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8022bc0:	7ffb      	ldrb	r3, [r7, #31]
 8022bc2:	77bb      	strb	r3, [r7, #30]
 8022bc4:	e001      	b.n	8022bca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8022bc6:	7ffb      	ldrb	r3, [r7, #31]
 8022bc8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	681b      	ldr	r3, [r3, #0]
 8022bce:	f003 0301 	and.w	r3, r3, #1
 8022bd2:	2b00      	cmp	r3, #0
 8022bd4:	d004      	beq.n	8022be0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8022bd6:	687b      	ldr	r3, [r7, #4]
 8022bd8:	699b      	ldr	r3, [r3, #24]
 8022bda:	4618      	mov	r0, r3
 8022bdc:	f7ff fe2a 	bl	8022834 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	681b      	ldr	r3, [r3, #0]
 8022be4:	f003 0302 	and.w	r3, r3, #2
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	d004      	beq.n	8022bf6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8022bec:	687b      	ldr	r3, [r7, #4]
 8022bee:	69db      	ldr	r3, [r3, #28]
 8022bf0:	4618      	mov	r0, r3
 8022bf2:	f7ff fe35 	bl	8022860 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8022bf6:	687b      	ldr	r3, [r7, #4]
 8022bf8:	681b      	ldr	r3, [r3, #0]
 8022bfa:	f003 0310 	and.w	r3, r3, #16
 8022bfe:	2b00      	cmp	r3, #0
 8022c00:	d004      	beq.n	8022c0c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8022c02:	687b      	ldr	r3, [r7, #4]
 8022c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022c06:	4618      	mov	r0, r3
 8022c08:	f7ff fe5d 	bl	80228c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8022c0c:	687b      	ldr	r3, [r7, #4]
 8022c0e:	681b      	ldr	r3, [r3, #0]
 8022c10:	f003 0320 	and.w	r3, r3, #32
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	d004      	beq.n	8022c22 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8022c18:	687b      	ldr	r3, [r7, #4]
 8022c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022c1c:	4618      	mov	r0, r3
 8022c1e:	f7ff fe52 	bl	80228c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8022c22:	687b      	ldr	r3, [r7, #4]
 8022c24:	681b      	ldr	r3, [r3, #0]
 8022c26:	f003 0304 	and.w	r3, r3, #4
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	d004      	beq.n	8022c38 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8022c2e:	687b      	ldr	r3, [r7, #4]
 8022c30:	6a1b      	ldr	r3, [r3, #32]
 8022c32:	4618      	mov	r0, r3
 8022c34:	f7ff fe2a 	bl	802288c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8022c38:	687b      	ldr	r3, [r7, #4]
 8022c3a:	681b      	ldr	r3, [r3, #0]
 8022c3c:	f003 0308 	and.w	r3, r3, #8
 8022c40:	2b00      	cmp	r3, #0
 8022c42:	d004      	beq.n	8022c4e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8022c44:	687b      	ldr	r3, [r7, #4]
 8022c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022c48:	4618      	mov	r0, r3
 8022c4a:	f7ff fe1f 	bl	802288c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8022c4e:	687b      	ldr	r3, [r7, #4]
 8022c50:	681b      	ldr	r3, [r3, #0]
 8022c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	d022      	beq.n	8022ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c5e:	4618      	mov	r0, r3
 8022c60:	f7ff fe8d 	bl	802297e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8022c64:	687b      	ldr	r3, [r7, #4]
 8022c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8022c6c:	d107      	bne.n	8022c7e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8022c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022c72:	68db      	ldr	r3, [r3, #12]
 8022c74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022c78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022c7c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022c82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8022c86:	d10b      	bne.n	8022ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8022c88:	687b      	ldr	r3, [r7, #4]
 8022c8a:	3304      	adds	r3, #4
 8022c8c:	4618      	mov	r0, r3
 8022c8e:	f000 f8dd 	bl	8022e4c <RCCEx_PLLSAI1_ConfigNQ>
 8022c92:	4603      	mov	r3, r0
 8022c94:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8022c96:	7ffb      	ldrb	r3, [r7, #31]
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	d001      	beq.n	8022ca0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8022c9c:	7ffb      	ldrb	r3, [r7, #31]
 8022c9e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	681b      	ldr	r3, [r3, #0]
 8022ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8022ca8:	2b00      	cmp	r3, #0
 8022caa:	d02b      	beq.n	8022d04 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8022cac:	687b      	ldr	r3, [r7, #4]
 8022cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8022cb4:	d008      	beq.n	8022cc8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8022cb6:	687b      	ldr	r3, [r7, #4]
 8022cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022cba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8022cbe:	d003      	beq.n	8022cc8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d105      	bne.n	8022cd4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022ccc:	4618      	mov	r0, r3
 8022cce:	f7ff fe2a 	bl	8022926 <LL_RCC_SetRNGClockSource>
 8022cd2:	e00a      	b.n	8022cea <HAL_RCCEx_PeriphCLKConfig+0x240>
 8022cd4:	687b      	ldr	r3, [r7, #4]
 8022cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022cd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8022cdc:	60fb      	str	r3, [r7, #12]
 8022cde:	2000      	movs	r0, #0
 8022ce0:	f7ff fe21 	bl	8022926 <LL_RCC_SetRNGClockSource>
 8022ce4:	68f8      	ldr	r0, [r7, #12]
 8022ce6:	f7ff fe34 	bl	8022952 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8022cea:	687b      	ldr	r3, [r7, #4]
 8022cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022cee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8022cf2:	d107      	bne.n	8022d04 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8022cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022cf8:	68db      	ldr	r3, [r3, #12]
 8022cfa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022cfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8022d02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8022d04:	687b      	ldr	r3, [r7, #4]
 8022d06:	681b      	ldr	r3, [r3, #0]
 8022d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8022d0c:	2b00      	cmp	r3, #0
 8022d0e:	d022      	beq.n	8022d56 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8022d10:	687b      	ldr	r3, [r7, #4]
 8022d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022d14:	4618      	mov	r0, r3
 8022d16:	f7ff fe3d 	bl	8022994 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8022d1a:	687b      	ldr	r3, [r7, #4]
 8022d1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022d1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8022d22:	d107      	bne.n	8022d34 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8022d24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022d28:	68db      	ldr	r3, [r3, #12]
 8022d2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8022d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8022d32:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8022d34:	687b      	ldr	r3, [r7, #4]
 8022d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8022d38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8022d3c:	d10b      	bne.n	8022d56 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	3304      	adds	r3, #4
 8022d42:	4618      	mov	r0, r3
 8022d44:	f000 f8dd 	bl	8022f02 <RCCEx_PLLSAI1_ConfigNR>
 8022d48:	4603      	mov	r3, r0
 8022d4a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8022d4c:	7ffb      	ldrb	r3, [r7, #31]
 8022d4e:	2b00      	cmp	r3, #0
 8022d50:	d001      	beq.n	8022d56 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8022d52:	7ffb      	ldrb	r3, [r7, #31]
 8022d54:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8022d56:	687b      	ldr	r3, [r7, #4]
 8022d58:	681b      	ldr	r3, [r3, #0]
 8022d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8022d5e:	2b00      	cmp	r3, #0
 8022d60:	d004      	beq.n	8022d6c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8022d66:	4618      	mov	r0, r3
 8022d68:	f7ff fd26 	bl	80227b8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8022d6c:	687b      	ldr	r3, [r7, #4]
 8022d6e:	681b      	ldr	r3, [r3, #0]
 8022d70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022d74:	2b00      	cmp	r3, #0
 8022d76:	d009      	beq.n	8022d8c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8022d78:	687b      	ldr	r3, [r7, #4]
 8022d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8022d7c:	4618      	mov	r0, r3
 8022d7e:	f7ff fd45 	bl	802280c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8022d82:	687b      	ldr	r3, [r7, #4]
 8022d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8022d86:	4618      	mov	r0, r3
 8022d88:	f7ff fd2c 	bl	80227e4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8022d8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8022d8e:	4618      	mov	r0, r3
 8022d90:	3720      	adds	r7, #32
 8022d92:	46bd      	mov	sp, r7
 8022d94:	bd80      	pop	{r7, pc}

08022d96 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8022d96:	b580      	push	{r7, lr}
 8022d98:	b084      	sub	sp, #16
 8022d9a:	af00      	add	r7, sp, #0
 8022d9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8022d9e:	2300      	movs	r3, #0
 8022da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8022da2:	f7ff fe61 	bl	8022a68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8022da6:	f7fd ffa9 	bl	8020cfc <HAL_GetTick>
 8022daa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8022dac:	e009      	b.n	8022dc2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022dae:	f7fd ffa5 	bl	8020cfc <HAL_GetTick>
 8022db2:	4602      	mov	r2, r0
 8022db4:	68bb      	ldr	r3, [r7, #8]
 8022db6:	1ad3      	subs	r3, r2, r3
 8022db8:	2b02      	cmp	r3, #2
 8022dba:	d902      	bls.n	8022dc2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8022dbc:	2303      	movs	r3, #3
 8022dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8022dc0:	e004      	b.n	8022dcc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8022dc2:	f7ff fe60 	bl	8022a86 <LL_RCC_PLLSAI1_IsReady>
 8022dc6:	4603      	mov	r3, r0
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d1f0      	bne.n	8022dae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8022dcc:	7bfb      	ldrb	r3, [r7, #15]
 8022dce:	2b00      	cmp	r3, #0
 8022dd0:	d137      	bne.n	8022e42 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8022dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022dd6:	691b      	ldr	r3, [r3, #16]
 8022dd8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8022ddc:	687b      	ldr	r3, [r7, #4]
 8022dde:	681b      	ldr	r3, [r3, #0]
 8022de0:	021b      	lsls	r3, r3, #8
 8022de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022de6:	4313      	orrs	r3, r2
 8022de8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8022dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022dee:	691b      	ldr	r3, [r3, #16]
 8022df0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8022df4:	687b      	ldr	r3, [r7, #4]
 8022df6:	685b      	ldr	r3, [r3, #4]
 8022df8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022dfc:	4313      	orrs	r3, r2
 8022dfe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8022e00:	f7ff fe23 	bl	8022a4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022e04:	f7fd ff7a 	bl	8020cfc <HAL_GetTick>
 8022e08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8022e0a:	e009      	b.n	8022e20 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022e0c:	f7fd ff76 	bl	8020cfc <HAL_GetTick>
 8022e10:	4602      	mov	r2, r0
 8022e12:	68bb      	ldr	r3, [r7, #8]
 8022e14:	1ad3      	subs	r3, r2, r3
 8022e16:	2b02      	cmp	r3, #2
 8022e18:	d902      	bls.n	8022e20 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8022e1a:	2303      	movs	r3, #3
 8022e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8022e1e:	e004      	b.n	8022e2a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8022e20:	f7ff fe31 	bl	8022a86 <LL_RCC_PLLSAI1_IsReady>
 8022e24:	4603      	mov	r3, r0
 8022e26:	2b01      	cmp	r3, #1
 8022e28:	d1f0      	bne.n	8022e0c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8022e2a:	7bfb      	ldrb	r3, [r7, #15]
 8022e2c:	2b00      	cmp	r3, #0
 8022e2e:	d108      	bne.n	8022e42 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8022e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022e34:	691a      	ldr	r2, [r3, #16]
 8022e36:	687b      	ldr	r3, [r7, #4]
 8022e38:	691b      	ldr	r3, [r3, #16]
 8022e3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022e3e:	4313      	orrs	r3, r2
 8022e40:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8022e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8022e44:	4618      	mov	r0, r3
 8022e46:	3710      	adds	r7, #16
 8022e48:	46bd      	mov	sp, r7
 8022e4a:	bd80      	pop	{r7, pc}

08022e4c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8022e4c:	b580      	push	{r7, lr}
 8022e4e:	b084      	sub	sp, #16
 8022e50:	af00      	add	r7, sp, #0
 8022e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8022e54:	2300      	movs	r3, #0
 8022e56:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8022e58:	f7ff fe06 	bl	8022a68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8022e5c:	f7fd ff4e 	bl	8020cfc <HAL_GetTick>
 8022e60:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8022e62:	e009      	b.n	8022e78 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022e64:	f7fd ff4a 	bl	8020cfc <HAL_GetTick>
 8022e68:	4602      	mov	r2, r0
 8022e6a:	68bb      	ldr	r3, [r7, #8]
 8022e6c:	1ad3      	subs	r3, r2, r3
 8022e6e:	2b02      	cmp	r3, #2
 8022e70:	d902      	bls.n	8022e78 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8022e72:	2303      	movs	r3, #3
 8022e74:	73fb      	strb	r3, [r7, #15]
      break;
 8022e76:	e004      	b.n	8022e82 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8022e78:	f7ff fe05 	bl	8022a86 <LL_RCC_PLLSAI1_IsReady>
 8022e7c:	4603      	mov	r3, r0
 8022e7e:	2b00      	cmp	r3, #0
 8022e80:	d1f0      	bne.n	8022e64 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8022e82:	7bfb      	ldrb	r3, [r7, #15]
 8022e84:	2b00      	cmp	r3, #0
 8022e86:	d137      	bne.n	8022ef8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8022e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022e8c:	691b      	ldr	r3, [r3, #16]
 8022e8e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8022e92:	687b      	ldr	r3, [r7, #4]
 8022e94:	681b      	ldr	r3, [r3, #0]
 8022e96:	021b      	lsls	r3, r3, #8
 8022e98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022e9c:	4313      	orrs	r3, r2
 8022e9e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8022ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022ea4:	691b      	ldr	r3, [r3, #16]
 8022ea6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8022eaa:	687b      	ldr	r3, [r7, #4]
 8022eac:	689b      	ldr	r3, [r3, #8]
 8022eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022eb2:	4313      	orrs	r3, r2
 8022eb4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8022eb6:	f7ff fdc8 	bl	8022a4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022eba:	f7fd ff1f 	bl	8020cfc <HAL_GetTick>
 8022ebe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8022ec0:	e009      	b.n	8022ed6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022ec2:	f7fd ff1b 	bl	8020cfc <HAL_GetTick>
 8022ec6:	4602      	mov	r2, r0
 8022ec8:	68bb      	ldr	r3, [r7, #8]
 8022eca:	1ad3      	subs	r3, r2, r3
 8022ecc:	2b02      	cmp	r3, #2
 8022ece:	d902      	bls.n	8022ed6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8022ed0:	2303      	movs	r3, #3
 8022ed2:	73fb      	strb	r3, [r7, #15]
        break;
 8022ed4:	e004      	b.n	8022ee0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8022ed6:	f7ff fdd6 	bl	8022a86 <LL_RCC_PLLSAI1_IsReady>
 8022eda:	4603      	mov	r3, r0
 8022edc:	2b01      	cmp	r3, #1
 8022ede:	d1f0      	bne.n	8022ec2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8022ee0:	7bfb      	ldrb	r3, [r7, #15]
 8022ee2:	2b00      	cmp	r3, #0
 8022ee4:	d108      	bne.n	8022ef8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8022ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022eea:	691a      	ldr	r2, [r3, #16]
 8022eec:	687b      	ldr	r3, [r7, #4]
 8022eee:	691b      	ldr	r3, [r3, #16]
 8022ef0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022ef4:	4313      	orrs	r3, r2
 8022ef6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8022ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8022efa:	4618      	mov	r0, r3
 8022efc:	3710      	adds	r7, #16
 8022efe:	46bd      	mov	sp, r7
 8022f00:	bd80      	pop	{r7, pc}

08022f02 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8022f02:	b580      	push	{r7, lr}
 8022f04:	b084      	sub	sp, #16
 8022f06:	af00      	add	r7, sp, #0
 8022f08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8022f0a:	2300      	movs	r3, #0
 8022f0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8022f0e:	f7ff fdab 	bl	8022a68 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8022f12:	f7fd fef3 	bl	8020cfc <HAL_GetTick>
 8022f16:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8022f18:	e009      	b.n	8022f2e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022f1a:	f7fd feef 	bl	8020cfc <HAL_GetTick>
 8022f1e:	4602      	mov	r2, r0
 8022f20:	68bb      	ldr	r3, [r7, #8]
 8022f22:	1ad3      	subs	r3, r2, r3
 8022f24:	2b02      	cmp	r3, #2
 8022f26:	d902      	bls.n	8022f2e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8022f28:	2303      	movs	r3, #3
 8022f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8022f2c:	e004      	b.n	8022f38 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8022f2e:	f7ff fdaa 	bl	8022a86 <LL_RCC_PLLSAI1_IsReady>
 8022f32:	4603      	mov	r3, r0
 8022f34:	2b00      	cmp	r3, #0
 8022f36:	d1f0      	bne.n	8022f1a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8022f38:	7bfb      	ldrb	r3, [r7, #15]
 8022f3a:	2b00      	cmp	r3, #0
 8022f3c:	d137      	bne.n	8022fae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8022f3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022f42:	691b      	ldr	r3, [r3, #16]
 8022f44:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	681b      	ldr	r3, [r3, #0]
 8022f4c:	021b      	lsls	r3, r3, #8
 8022f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022f52:	4313      	orrs	r3, r2
 8022f54:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8022f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022f5a:	691b      	ldr	r3, [r3, #16]
 8022f5c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8022f60:	687b      	ldr	r3, [r7, #4]
 8022f62:	68db      	ldr	r3, [r3, #12]
 8022f64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022f68:	4313      	orrs	r3, r2
 8022f6a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8022f6c:	f7ff fd6d 	bl	8022a4a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8022f70:	f7fd fec4 	bl	8020cfc <HAL_GetTick>
 8022f74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8022f76:	e009      	b.n	8022f8c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8022f78:	f7fd fec0 	bl	8020cfc <HAL_GetTick>
 8022f7c:	4602      	mov	r2, r0
 8022f7e:	68bb      	ldr	r3, [r7, #8]
 8022f80:	1ad3      	subs	r3, r2, r3
 8022f82:	2b02      	cmp	r3, #2
 8022f84:	d902      	bls.n	8022f8c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8022f86:	2303      	movs	r3, #3
 8022f88:	73fb      	strb	r3, [r7, #15]
        break;
 8022f8a:	e004      	b.n	8022f96 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8022f8c:	f7ff fd7b 	bl	8022a86 <LL_RCC_PLLSAI1_IsReady>
 8022f90:	4603      	mov	r3, r0
 8022f92:	2b01      	cmp	r3, #1
 8022f94:	d1f0      	bne.n	8022f78 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8022f96:	7bfb      	ldrb	r3, [r7, #15]
 8022f98:	2b00      	cmp	r3, #0
 8022f9a:	d108      	bne.n	8022fae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8022f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022fa0:	691a      	ldr	r2, [r3, #16]
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	691b      	ldr	r3, [r3, #16]
 8022fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8022faa:	4313      	orrs	r3, r2
 8022fac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8022fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8022fb0:	4618      	mov	r0, r3
 8022fb2:	3710      	adds	r7, #16
 8022fb4:	46bd      	mov	sp, r7
 8022fb6:	bd80      	pop	{r7, pc}

08022fb8 <LL_RCC_GetUSARTClockSource>:
{
 8022fb8:	b480      	push	{r7}
 8022fba:	b083      	sub	sp, #12
 8022fbc:	af00      	add	r7, sp, #0
 8022fbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8022fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022fc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	4013      	ands	r3, r2
}
 8022fcc:	4618      	mov	r0, r3
 8022fce:	370c      	adds	r7, #12
 8022fd0:	46bd      	mov	sp, r7
 8022fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fd6:	4770      	bx	lr

08022fd8 <LL_RCC_GetLPUARTClockSource>:
{
 8022fd8:	b480      	push	{r7}
 8022fda:	b083      	sub	sp, #12
 8022fdc:	af00      	add	r7, sp, #0
 8022fde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8022fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8022fe4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	4013      	ands	r3, r2
}
 8022fec:	4618      	mov	r0, r3
 8022fee:	370c      	adds	r7, #12
 8022ff0:	46bd      	mov	sp, r7
 8022ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ff6:	4770      	bx	lr

08022ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8022ff8:	b580      	push	{r7, lr}
 8022ffa:	b082      	sub	sp, #8
 8022ffc:	af00      	add	r7, sp, #0
 8022ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	2b00      	cmp	r3, #0
 8023004:	d101      	bne.n	802300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8023006:	2301      	movs	r3, #1
 8023008:	e042      	b.n	8023090 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 802300a:	687b      	ldr	r3, [r7, #4]
 802300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8023010:	2b00      	cmp	r3, #0
 8023012:	d106      	bne.n	8023022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8023014:	687b      	ldr	r3, [r7, #4]
 8023016:	2200      	movs	r2, #0
 8023018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 802301c:	6878      	ldr	r0, [r7, #4]
 802301e:	f7fd fc47 	bl	80208b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	2224      	movs	r2, #36	@ 0x24
 8023026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 802302a:	687b      	ldr	r3, [r7, #4]
 802302c:	681b      	ldr	r3, [r3, #0]
 802302e:	681a      	ldr	r2, [r3, #0]
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	681b      	ldr	r3, [r3, #0]
 8023034:	f022 0201 	bic.w	r2, r2, #1
 8023038:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802303e:	2b00      	cmp	r3, #0
 8023040:	d002      	beq.n	8023048 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8023042:	6878      	ldr	r0, [r7, #4]
 8023044:	f000 fe40 	bl	8023cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8023048:	6878      	ldr	r0, [r7, #4]
 802304a:	f000 fc15 	bl	8023878 <UART_SetConfig>
 802304e:	4603      	mov	r3, r0
 8023050:	2b01      	cmp	r3, #1
 8023052:	d101      	bne.n	8023058 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8023054:	2301      	movs	r3, #1
 8023056:	e01b      	b.n	8023090 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8023058:	687b      	ldr	r3, [r7, #4]
 802305a:	681b      	ldr	r3, [r3, #0]
 802305c:	685a      	ldr	r2, [r3, #4]
 802305e:	687b      	ldr	r3, [r7, #4]
 8023060:	681b      	ldr	r3, [r3, #0]
 8023062:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8023066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8023068:	687b      	ldr	r3, [r7, #4]
 802306a:	681b      	ldr	r3, [r3, #0]
 802306c:	689a      	ldr	r2, [r3, #8]
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	681b      	ldr	r3, [r3, #0]
 8023072:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8023076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8023078:	687b      	ldr	r3, [r7, #4]
 802307a:	681b      	ldr	r3, [r3, #0]
 802307c:	681a      	ldr	r2, [r3, #0]
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	681b      	ldr	r3, [r3, #0]
 8023082:	f042 0201 	orr.w	r2, r2, #1
 8023086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8023088:	6878      	ldr	r0, [r7, #4]
 802308a:	f000 febf 	bl	8023e0c <UART_CheckIdleState>
 802308e:	4603      	mov	r3, r0
}
 8023090:	4618      	mov	r0, r3
 8023092:	3708      	adds	r7, #8
 8023094:	46bd      	mov	sp, r7
 8023096:	bd80      	pop	{r7, pc}

08023098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8023098:	b580      	push	{r7, lr}
 802309a:	b08a      	sub	sp, #40	@ 0x28
 802309c:	af02      	add	r7, sp, #8
 802309e:	60f8      	str	r0, [r7, #12]
 80230a0:	60b9      	str	r1, [r7, #8]
 80230a2:	603b      	str	r3, [r7, #0]
 80230a4:	4613      	mov	r3, r2
 80230a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80230a8:	68fb      	ldr	r3, [r7, #12]
 80230aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80230ae:	2b20      	cmp	r3, #32
 80230b0:	d17b      	bne.n	80231aa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80230b2:	68bb      	ldr	r3, [r7, #8]
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d002      	beq.n	80230be <HAL_UART_Transmit+0x26>
 80230b8:	88fb      	ldrh	r3, [r7, #6]
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	d101      	bne.n	80230c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80230be:	2301      	movs	r3, #1
 80230c0:	e074      	b.n	80231ac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80230c2:	68fb      	ldr	r3, [r7, #12]
 80230c4:	2200      	movs	r2, #0
 80230c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80230ca:	68fb      	ldr	r3, [r7, #12]
 80230cc:	2221      	movs	r2, #33	@ 0x21
 80230ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80230d2:	f7fd fe13 	bl	8020cfc <HAL_GetTick>
 80230d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80230d8:	68fb      	ldr	r3, [r7, #12]
 80230da:	88fa      	ldrh	r2, [r7, #6]
 80230dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80230e0:	68fb      	ldr	r3, [r7, #12]
 80230e2:	88fa      	ldrh	r2, [r7, #6]
 80230e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80230e8:	68fb      	ldr	r3, [r7, #12]
 80230ea:	689b      	ldr	r3, [r3, #8]
 80230ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80230f0:	d108      	bne.n	8023104 <HAL_UART_Transmit+0x6c>
 80230f2:	68fb      	ldr	r3, [r7, #12]
 80230f4:	691b      	ldr	r3, [r3, #16]
 80230f6:	2b00      	cmp	r3, #0
 80230f8:	d104      	bne.n	8023104 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80230fa:	2300      	movs	r3, #0
 80230fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80230fe:	68bb      	ldr	r3, [r7, #8]
 8023100:	61bb      	str	r3, [r7, #24]
 8023102:	e003      	b.n	802310c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8023104:	68bb      	ldr	r3, [r7, #8]
 8023106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8023108:	2300      	movs	r3, #0
 802310a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 802310c:	e030      	b.n	8023170 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802310e:	683b      	ldr	r3, [r7, #0]
 8023110:	9300      	str	r3, [sp, #0]
 8023112:	697b      	ldr	r3, [r7, #20]
 8023114:	2200      	movs	r2, #0
 8023116:	2180      	movs	r1, #128	@ 0x80
 8023118:	68f8      	ldr	r0, [r7, #12]
 802311a:	f000 ff21 	bl	8023f60 <UART_WaitOnFlagUntilTimeout>
 802311e:	4603      	mov	r3, r0
 8023120:	2b00      	cmp	r3, #0
 8023122:	d005      	beq.n	8023130 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8023124:	68fb      	ldr	r3, [r7, #12]
 8023126:	2220      	movs	r2, #32
 8023128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 802312c:	2303      	movs	r3, #3
 802312e:	e03d      	b.n	80231ac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8023130:	69fb      	ldr	r3, [r7, #28]
 8023132:	2b00      	cmp	r3, #0
 8023134:	d10b      	bne.n	802314e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8023136:	69bb      	ldr	r3, [r7, #24]
 8023138:	881b      	ldrh	r3, [r3, #0]
 802313a:	461a      	mov	r2, r3
 802313c:	68fb      	ldr	r3, [r7, #12]
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8023144:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8023146:	69bb      	ldr	r3, [r7, #24]
 8023148:	3302      	adds	r3, #2
 802314a:	61bb      	str	r3, [r7, #24]
 802314c:	e007      	b.n	802315e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 802314e:	69fb      	ldr	r3, [r7, #28]
 8023150:	781a      	ldrb	r2, [r3, #0]
 8023152:	68fb      	ldr	r3, [r7, #12]
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8023158:	69fb      	ldr	r3, [r7, #28]
 802315a:	3301      	adds	r3, #1
 802315c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802315e:	68fb      	ldr	r3, [r7, #12]
 8023160:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8023164:	b29b      	uxth	r3, r3
 8023166:	3b01      	subs	r3, #1
 8023168:	b29a      	uxth	r2, r3
 802316a:	68fb      	ldr	r3, [r7, #12]
 802316c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8023170:	68fb      	ldr	r3, [r7, #12]
 8023172:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8023176:	b29b      	uxth	r3, r3
 8023178:	2b00      	cmp	r3, #0
 802317a:	d1c8      	bne.n	802310e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802317c:	683b      	ldr	r3, [r7, #0]
 802317e:	9300      	str	r3, [sp, #0]
 8023180:	697b      	ldr	r3, [r7, #20]
 8023182:	2200      	movs	r2, #0
 8023184:	2140      	movs	r1, #64	@ 0x40
 8023186:	68f8      	ldr	r0, [r7, #12]
 8023188:	f000 feea 	bl	8023f60 <UART_WaitOnFlagUntilTimeout>
 802318c:	4603      	mov	r3, r0
 802318e:	2b00      	cmp	r3, #0
 8023190:	d005      	beq.n	802319e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8023192:	68fb      	ldr	r3, [r7, #12]
 8023194:	2220      	movs	r2, #32
 8023196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 802319a:	2303      	movs	r3, #3
 802319c:	e006      	b.n	80231ac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802319e:	68fb      	ldr	r3, [r7, #12]
 80231a0:	2220      	movs	r2, #32
 80231a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80231a6:	2300      	movs	r3, #0
 80231a8:	e000      	b.n	80231ac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80231aa:	2302      	movs	r3, #2
  }
}
 80231ac:	4618      	mov	r0, r3
 80231ae:	3720      	adds	r7, #32
 80231b0:	46bd      	mov	sp, r7
 80231b2:	bd80      	pop	{r7, pc}

080231b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80231b4:	b580      	push	{r7, lr}
 80231b6:	b0ba      	sub	sp, #232	@ 0xe8
 80231b8:	af00      	add	r7, sp, #0
 80231ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80231bc:	687b      	ldr	r3, [r7, #4]
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	69db      	ldr	r3, [r3, #28]
 80231c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80231c6:	687b      	ldr	r3, [r7, #4]
 80231c8:	681b      	ldr	r3, [r3, #0]
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80231d0:	687b      	ldr	r3, [r7, #4]
 80231d2:	681b      	ldr	r3, [r3, #0]
 80231d4:	689b      	ldr	r3, [r3, #8]
 80231d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80231da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80231de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80231e2:	4013      	ands	r3, r2
 80231e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80231e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80231ec:	2b00      	cmp	r3, #0
 80231ee:	d11b      	bne.n	8023228 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80231f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80231f4:	f003 0320 	and.w	r3, r3, #32
 80231f8:	2b00      	cmp	r3, #0
 80231fa:	d015      	beq.n	8023228 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80231fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8023200:	f003 0320 	and.w	r3, r3, #32
 8023204:	2b00      	cmp	r3, #0
 8023206:	d105      	bne.n	8023214 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8023208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802320c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8023210:	2b00      	cmp	r3, #0
 8023212:	d009      	beq.n	8023228 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8023214:	687b      	ldr	r3, [r7, #4]
 8023216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023218:	2b00      	cmp	r3, #0
 802321a:	f000 8300 	beq.w	802381e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 802321e:	687b      	ldr	r3, [r7, #4]
 8023220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023222:	6878      	ldr	r0, [r7, #4]
 8023224:	4798      	blx	r3
      }
      return;
 8023226:	e2fa      	b.n	802381e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8023228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802322c:	2b00      	cmp	r3, #0
 802322e:	f000 8123 	beq.w	8023478 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8023232:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8023236:	4b8d      	ldr	r3, [pc, #564]	@ (802346c <HAL_UART_IRQHandler+0x2b8>)
 8023238:	4013      	ands	r3, r2
 802323a:	2b00      	cmp	r3, #0
 802323c:	d106      	bne.n	802324c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 802323e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8023242:	4b8b      	ldr	r3, [pc, #556]	@ (8023470 <HAL_UART_IRQHandler+0x2bc>)
 8023244:	4013      	ands	r3, r2
 8023246:	2b00      	cmp	r3, #0
 8023248:	f000 8116 	beq.w	8023478 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 802324c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8023250:	f003 0301 	and.w	r3, r3, #1
 8023254:	2b00      	cmp	r3, #0
 8023256:	d011      	beq.n	802327c <HAL_UART_IRQHandler+0xc8>
 8023258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802325c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8023260:	2b00      	cmp	r3, #0
 8023262:	d00b      	beq.n	802327c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8023264:	687b      	ldr	r3, [r7, #4]
 8023266:	681b      	ldr	r3, [r3, #0]
 8023268:	2201      	movs	r2, #1
 802326a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802326c:	687b      	ldr	r3, [r7, #4]
 802326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8023272:	f043 0201 	orr.w	r2, r3, #1
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 802327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8023280:	f003 0302 	and.w	r3, r3, #2
 8023284:	2b00      	cmp	r3, #0
 8023286:	d011      	beq.n	80232ac <HAL_UART_IRQHandler+0xf8>
 8023288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802328c:	f003 0301 	and.w	r3, r3, #1
 8023290:	2b00      	cmp	r3, #0
 8023292:	d00b      	beq.n	80232ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	681b      	ldr	r3, [r3, #0]
 8023298:	2202      	movs	r2, #2
 802329a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802329c:	687b      	ldr	r3, [r7, #4]
 802329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80232a2:	f043 0204 	orr.w	r2, r3, #4
 80232a6:	687b      	ldr	r3, [r7, #4]
 80232a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80232ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80232b0:	f003 0304 	and.w	r3, r3, #4
 80232b4:	2b00      	cmp	r3, #0
 80232b6:	d011      	beq.n	80232dc <HAL_UART_IRQHandler+0x128>
 80232b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80232bc:	f003 0301 	and.w	r3, r3, #1
 80232c0:	2b00      	cmp	r3, #0
 80232c2:	d00b      	beq.n	80232dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80232c4:	687b      	ldr	r3, [r7, #4]
 80232c6:	681b      	ldr	r3, [r3, #0]
 80232c8:	2204      	movs	r2, #4
 80232ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80232cc:	687b      	ldr	r3, [r7, #4]
 80232ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80232d2:	f043 0202 	orr.w	r2, r3, #2
 80232d6:	687b      	ldr	r3, [r7, #4]
 80232d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80232dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80232e0:	f003 0308 	and.w	r3, r3, #8
 80232e4:	2b00      	cmp	r3, #0
 80232e6:	d017      	beq.n	8023318 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80232e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80232ec:	f003 0320 	and.w	r3, r3, #32
 80232f0:	2b00      	cmp	r3, #0
 80232f2:	d105      	bne.n	8023300 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80232f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80232f8:	4b5c      	ldr	r3, [pc, #368]	@ (802346c <HAL_UART_IRQHandler+0x2b8>)
 80232fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80232fc:	2b00      	cmp	r3, #0
 80232fe:	d00b      	beq.n	8023318 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8023300:	687b      	ldr	r3, [r7, #4]
 8023302:	681b      	ldr	r3, [r3, #0]
 8023304:	2208      	movs	r2, #8
 8023306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8023308:	687b      	ldr	r3, [r7, #4]
 802330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 802330e:	f043 0208 	orr.w	r2, r3, #8
 8023312:	687b      	ldr	r3, [r7, #4]
 8023314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8023318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802331c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8023320:	2b00      	cmp	r3, #0
 8023322:	d012      	beq.n	802334a <HAL_UART_IRQHandler+0x196>
 8023324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8023328:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 802332c:	2b00      	cmp	r3, #0
 802332e:	d00c      	beq.n	802334a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8023330:	687b      	ldr	r3, [r7, #4]
 8023332:	681b      	ldr	r3, [r3, #0]
 8023334:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8023338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 802333a:	687b      	ldr	r3, [r7, #4]
 802333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8023340:	f043 0220 	orr.w	r2, r3, #32
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 802334a:	687b      	ldr	r3, [r7, #4]
 802334c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8023350:	2b00      	cmp	r3, #0
 8023352:	f000 8266 	beq.w	8023822 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8023356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 802335a:	f003 0320 	and.w	r3, r3, #32
 802335e:	2b00      	cmp	r3, #0
 8023360:	d013      	beq.n	802338a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8023362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8023366:	f003 0320 	and.w	r3, r3, #32
 802336a:	2b00      	cmp	r3, #0
 802336c:	d105      	bne.n	802337a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 802336e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8023376:	2b00      	cmp	r3, #0
 8023378:	d007      	beq.n	802338a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 802337a:	687b      	ldr	r3, [r7, #4]
 802337c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 802337e:	2b00      	cmp	r3, #0
 8023380:	d003      	beq.n	802338a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8023382:	687b      	ldr	r3, [r7, #4]
 8023384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8023386:	6878      	ldr	r0, [r7, #4]
 8023388:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 802338a:	687b      	ldr	r3, [r7, #4]
 802338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8023390:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8023394:	687b      	ldr	r3, [r7, #4]
 8023396:	681b      	ldr	r3, [r3, #0]
 8023398:	689b      	ldr	r3, [r3, #8]
 802339a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802339e:	2b40      	cmp	r3, #64	@ 0x40
 80233a0:	d005      	beq.n	80233ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80233a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80233a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80233aa:	2b00      	cmp	r3, #0
 80233ac:	d054      	beq.n	8023458 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80233ae:	6878      	ldr	r0, [r7, #4]
 80233b0:	f000 fe43 	bl	802403a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80233b4:	687b      	ldr	r3, [r7, #4]
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	689b      	ldr	r3, [r3, #8]
 80233ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80233be:	2b40      	cmp	r3, #64	@ 0x40
 80233c0:	d146      	bne.n	8023450 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80233c2:	687b      	ldr	r3, [r7, #4]
 80233c4:	681b      	ldr	r3, [r3, #0]
 80233c6:	3308      	adds	r3, #8
 80233c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80233cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80233d0:	e853 3f00 	ldrex	r3, [r3]
 80233d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80233d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80233dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80233e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80233e4:	687b      	ldr	r3, [r7, #4]
 80233e6:	681b      	ldr	r3, [r3, #0]
 80233e8:	3308      	adds	r3, #8
 80233ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80233ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80233f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80233f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80233fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80233fe:	e841 2300 	strex	r3, r2, [r1]
 8023402:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8023406:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802340a:	2b00      	cmp	r3, #0
 802340c:	d1d9      	bne.n	80233c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 802340e:	687b      	ldr	r3, [r7, #4]
 8023410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023414:	2b00      	cmp	r3, #0
 8023416:	d017      	beq.n	8023448 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8023418:	687b      	ldr	r3, [r7, #4]
 802341a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802341e:	4a15      	ldr	r2, [pc, #84]	@ (8023474 <HAL_UART_IRQHandler+0x2c0>)
 8023420:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8023422:	687b      	ldr	r3, [r7, #4]
 8023424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023428:	4618      	mov	r0, r3
 802342a:	f7fd fe11 	bl	8021050 <HAL_DMA_Abort_IT>
 802342e:	4603      	mov	r3, r0
 8023430:	2b00      	cmp	r3, #0
 8023432:	d019      	beq.n	8023468 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8023434:	687b      	ldr	r3, [r7, #4]
 8023436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 802343a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802343c:	687a      	ldr	r2, [r7, #4]
 802343e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8023442:	4610      	mov	r0, r2
 8023444:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023446:	e00f      	b.n	8023468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8023448:	6878      	ldr	r0, [r7, #4]
 802344a:	f000 f9ff 	bl	802384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802344e:	e00b      	b.n	8023468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8023450:	6878      	ldr	r0, [r7, #4]
 8023452:	f000 f9fb 	bl	802384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023456:	e007      	b.n	8023468 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8023458:	6878      	ldr	r0, [r7, #4]
 802345a:	f000 f9f7 	bl	802384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	2200      	movs	r2, #0
 8023462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8023466:	e1dc      	b.n	8023822 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023468:	bf00      	nop
    return;
 802346a:	e1da      	b.n	8023822 <HAL_UART_IRQHandler+0x66e>
 802346c:	10000001 	.word	0x10000001
 8023470:	04000120 	.word	0x04000120
 8023474:	08024107 	.word	0x08024107

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8023478:	687b      	ldr	r3, [r7, #4]
 802347a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802347c:	2b01      	cmp	r3, #1
 802347e:	f040 8170 	bne.w	8023762 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8023482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8023486:	f003 0310 	and.w	r3, r3, #16
 802348a:	2b00      	cmp	r3, #0
 802348c:	f000 8169 	beq.w	8023762 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8023490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8023494:	f003 0310 	and.w	r3, r3, #16
 8023498:	2b00      	cmp	r3, #0
 802349a:	f000 8162 	beq.w	8023762 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 802349e:	687b      	ldr	r3, [r7, #4]
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	2210      	movs	r2, #16
 80234a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80234a6:	687b      	ldr	r3, [r7, #4]
 80234a8:	681b      	ldr	r3, [r3, #0]
 80234aa:	689b      	ldr	r3, [r3, #8]
 80234ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80234b0:	2b40      	cmp	r3, #64	@ 0x40
 80234b2:	f040 80d8 	bne.w	8023666 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80234b6:	687b      	ldr	r3, [r7, #4]
 80234b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80234bc:	681b      	ldr	r3, [r3, #0]
 80234be:	685b      	ldr	r3, [r3, #4]
 80234c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80234c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80234c8:	2b00      	cmp	r3, #0
 80234ca:	f000 80af 	beq.w	802362c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80234ce:	687b      	ldr	r3, [r7, #4]
 80234d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80234d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80234d8:	429a      	cmp	r2, r3
 80234da:	f080 80a7 	bcs.w	802362c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80234de:	687b      	ldr	r3, [r7, #4]
 80234e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80234e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80234e8:	687b      	ldr	r3, [r7, #4]
 80234ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80234ee:	681b      	ldr	r3, [r3, #0]
 80234f0:	681b      	ldr	r3, [r3, #0]
 80234f2:	f003 0320 	and.w	r3, r3, #32
 80234f6:	2b00      	cmp	r3, #0
 80234f8:	f040 8087 	bne.w	802360a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	681b      	ldr	r3, [r3, #0]
 8023500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023504:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8023508:	e853 3f00 	ldrex	r3, [r3]
 802350c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8023510:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8023514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8023518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	681b      	ldr	r3, [r3, #0]
 8023520:	461a      	mov	r2, r3
 8023522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8023526:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 802352a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802352e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8023532:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8023536:	e841 2300 	strex	r3, r2, [r1]
 802353a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 802353e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023542:	2b00      	cmp	r3, #0
 8023544:	d1da      	bne.n	80234fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023546:	687b      	ldr	r3, [r7, #4]
 8023548:	681b      	ldr	r3, [r3, #0]
 802354a:	3308      	adds	r3, #8
 802354c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802354e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023550:	e853 3f00 	ldrex	r3, [r3]
 8023554:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8023556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8023558:	f023 0301 	bic.w	r3, r3, #1
 802355c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8023560:	687b      	ldr	r3, [r7, #4]
 8023562:	681b      	ldr	r3, [r3, #0]
 8023564:	3308      	adds	r3, #8
 8023566:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 802356a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 802356e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023570:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8023572:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8023576:	e841 2300 	strex	r3, r2, [r1]
 802357a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 802357c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 802357e:	2b00      	cmp	r3, #0
 8023580:	d1e1      	bne.n	8023546 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	681b      	ldr	r3, [r3, #0]
 8023586:	3308      	adds	r3, #8
 8023588:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802358a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802358c:	e853 3f00 	ldrex	r3, [r3]
 8023590:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8023592:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8023594:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8023598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 802359c:	687b      	ldr	r3, [r7, #4]
 802359e:	681b      	ldr	r3, [r3, #0]
 80235a0:	3308      	adds	r3, #8
 80235a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80235a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80235a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80235aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80235ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80235ae:	e841 2300 	strex	r3, r2, [r1]
 80235b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80235b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	d1e3      	bne.n	8023582 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	2220      	movs	r2, #32
 80235be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80235c2:	687b      	ldr	r3, [r7, #4]
 80235c4:	2200      	movs	r2, #0
 80235c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80235c8:	687b      	ldr	r3, [r7, #4]
 80235ca:	681b      	ldr	r3, [r3, #0]
 80235cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80235ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80235d0:	e853 3f00 	ldrex	r3, [r3]
 80235d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80235d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80235d8:	f023 0310 	bic.w	r3, r3, #16
 80235dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80235e0:	687b      	ldr	r3, [r7, #4]
 80235e2:	681b      	ldr	r3, [r3, #0]
 80235e4:	461a      	mov	r2, r3
 80235e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80235ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80235ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80235ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80235f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80235f2:	e841 2300 	strex	r3, r2, [r1]
 80235f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80235f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80235fa:	2b00      	cmp	r3, #0
 80235fc:	d1e4      	bne.n	80235c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80235fe:	687b      	ldr	r3, [r7, #4]
 8023600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023604:	4618      	mov	r0, r3
 8023606:	f7fd fcc4 	bl	8020f92 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802360a:	687b      	ldr	r3, [r7, #4]
 802360c:	2202      	movs	r2, #2
 802360e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8023610:	687b      	ldr	r3, [r7, #4]
 8023612:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8023616:	687b      	ldr	r3, [r7, #4]
 8023618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 802361c:	b29b      	uxth	r3, r3
 802361e:	1ad3      	subs	r3, r2, r3
 8023620:	b29b      	uxth	r3, r3
 8023622:	4619      	mov	r1, r3
 8023624:	6878      	ldr	r0, [r7, #4]
 8023626:	f000 f91b 	bl	8023860 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 802362a:	e0fc      	b.n	8023826 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 802362c:	687b      	ldr	r3, [r7, #4]
 802362e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8023632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8023636:	429a      	cmp	r2, r3
 8023638:	f040 80f5 	bne.w	8023826 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 802363c:	687b      	ldr	r3, [r7, #4]
 802363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8023642:	681b      	ldr	r3, [r3, #0]
 8023644:	681b      	ldr	r3, [r3, #0]
 8023646:	f003 0320 	and.w	r3, r3, #32
 802364a:	2b20      	cmp	r3, #32
 802364c:	f040 80eb 	bne.w	8023826 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8023650:	687b      	ldr	r3, [r7, #4]
 8023652:	2202      	movs	r2, #2
 8023654:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8023656:	687b      	ldr	r3, [r7, #4]
 8023658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 802365c:	4619      	mov	r1, r3
 802365e:	6878      	ldr	r0, [r7, #4]
 8023660:	f000 f8fe 	bl	8023860 <HAL_UARTEx_RxEventCallback>
      return;
 8023664:	e0df      	b.n	8023826 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8023666:	687b      	ldr	r3, [r7, #4]
 8023668:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 802366c:	687b      	ldr	r3, [r7, #4]
 802366e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8023672:	b29b      	uxth	r3, r3
 8023674:	1ad3      	subs	r3, r2, r3
 8023676:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 802367a:	687b      	ldr	r3, [r7, #4]
 802367c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8023680:	b29b      	uxth	r3, r3
 8023682:	2b00      	cmp	r3, #0
 8023684:	f000 80d1 	beq.w	802382a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8023688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 802368c:	2b00      	cmp	r3, #0
 802368e:	f000 80cc 	beq.w	802382a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8023692:	687b      	ldr	r3, [r7, #4]
 8023694:	681b      	ldr	r3, [r3, #0]
 8023696:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802369a:	e853 3f00 	ldrex	r3, [r3]
 802369e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80236a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80236a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80236a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80236aa:	687b      	ldr	r3, [r7, #4]
 80236ac:	681b      	ldr	r3, [r3, #0]
 80236ae:	461a      	mov	r2, r3
 80236b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80236b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80236b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80236b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80236ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80236bc:	e841 2300 	strex	r3, r2, [r1]
 80236c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80236c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80236c4:	2b00      	cmp	r3, #0
 80236c6:	d1e4      	bne.n	8023692 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80236c8:	687b      	ldr	r3, [r7, #4]
 80236ca:	681b      	ldr	r3, [r3, #0]
 80236cc:	3308      	adds	r3, #8
 80236ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80236d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80236d2:	e853 3f00 	ldrex	r3, [r3]
 80236d6:	623b      	str	r3, [r7, #32]
   return(result);
 80236d8:	6a3b      	ldr	r3, [r7, #32]
 80236da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80236de:	f023 0301 	bic.w	r3, r3, #1
 80236e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80236e6:	687b      	ldr	r3, [r7, #4]
 80236e8:	681b      	ldr	r3, [r3, #0]
 80236ea:	3308      	adds	r3, #8
 80236ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80236f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80236f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80236f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80236f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80236f8:	e841 2300 	strex	r3, r2, [r1]
 80236fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80236fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023700:	2b00      	cmp	r3, #0
 8023702:	d1e1      	bne.n	80236c8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8023704:	687b      	ldr	r3, [r7, #4]
 8023706:	2220      	movs	r2, #32
 8023708:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802370c:	687b      	ldr	r3, [r7, #4]
 802370e:	2200      	movs	r2, #0
 8023710:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	2200      	movs	r2, #0
 8023716:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8023718:	687b      	ldr	r3, [r7, #4]
 802371a:	681b      	ldr	r3, [r3, #0]
 802371c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802371e:	693b      	ldr	r3, [r7, #16]
 8023720:	e853 3f00 	ldrex	r3, [r3]
 8023724:	60fb      	str	r3, [r7, #12]
   return(result);
 8023726:	68fb      	ldr	r3, [r7, #12]
 8023728:	f023 0310 	bic.w	r3, r3, #16
 802372c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8023730:	687b      	ldr	r3, [r7, #4]
 8023732:	681b      	ldr	r3, [r3, #0]
 8023734:	461a      	mov	r2, r3
 8023736:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 802373a:	61fb      	str	r3, [r7, #28]
 802373c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802373e:	69b9      	ldr	r1, [r7, #24]
 8023740:	69fa      	ldr	r2, [r7, #28]
 8023742:	e841 2300 	strex	r3, r2, [r1]
 8023746:	617b      	str	r3, [r7, #20]
   return(result);
 8023748:	697b      	ldr	r3, [r7, #20]
 802374a:	2b00      	cmp	r3, #0
 802374c:	d1e4      	bne.n	8023718 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 802374e:	687b      	ldr	r3, [r7, #4]
 8023750:	2202      	movs	r2, #2
 8023752:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8023754:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8023758:	4619      	mov	r1, r3
 802375a:	6878      	ldr	r0, [r7, #4]
 802375c:	f000 f880 	bl	8023860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8023760:	e063      	b.n	802382a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8023762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8023766:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 802376a:	2b00      	cmp	r3, #0
 802376c:	d00e      	beq.n	802378c <HAL_UART_IRQHandler+0x5d8>
 802376e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8023776:	2b00      	cmp	r3, #0
 8023778:	d008      	beq.n	802378c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 802377a:	687b      	ldr	r3, [r7, #4]
 802377c:	681b      	ldr	r3, [r3, #0]
 802377e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8023782:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8023784:	6878      	ldr	r0, [r7, #4]
 8023786:	f000 fcfb 	bl	8024180 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 802378a:	e051      	b.n	8023830 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 802378c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8023790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8023794:	2b00      	cmp	r3, #0
 8023796:	d014      	beq.n	80237c2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8023798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 802379c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	d105      	bne.n	80237b0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80237a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80237a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	d008      	beq.n	80237c2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80237b0:	687b      	ldr	r3, [r7, #4]
 80237b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80237b4:	2b00      	cmp	r3, #0
 80237b6:	d03a      	beq.n	802382e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80237bc:	6878      	ldr	r0, [r7, #4]
 80237be:	4798      	blx	r3
    }
    return;
 80237c0:	e035      	b.n	802382e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80237c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80237c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80237ca:	2b00      	cmp	r3, #0
 80237cc:	d009      	beq.n	80237e2 <HAL_UART_IRQHandler+0x62e>
 80237ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80237d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80237d6:	2b00      	cmp	r3, #0
 80237d8:	d003      	beq.n	80237e2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80237da:	6878      	ldr	r0, [r7, #4]
 80237dc:	f000 fca5 	bl	802412a <UART_EndTransmit_IT>
    return;
 80237e0:	e026      	b.n	8023830 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80237e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80237e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80237ea:	2b00      	cmp	r3, #0
 80237ec:	d009      	beq.n	8023802 <HAL_UART_IRQHandler+0x64e>
 80237ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80237f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80237f6:	2b00      	cmp	r3, #0
 80237f8:	d003      	beq.n	8023802 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80237fa:	6878      	ldr	r0, [r7, #4]
 80237fc:	f000 fcd4 	bl	80241a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8023800:	e016      	b.n	8023830 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8023802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8023806:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 802380a:	2b00      	cmp	r3, #0
 802380c:	d010      	beq.n	8023830 <HAL_UART_IRQHandler+0x67c>
 802380e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8023812:	2b00      	cmp	r3, #0
 8023814:	da0c      	bge.n	8023830 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8023816:	6878      	ldr	r0, [r7, #4]
 8023818:	f000 fcbc 	bl	8024194 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 802381c:	e008      	b.n	8023830 <HAL_UART_IRQHandler+0x67c>
      return;
 802381e:	bf00      	nop
 8023820:	e006      	b.n	8023830 <HAL_UART_IRQHandler+0x67c>
    return;
 8023822:	bf00      	nop
 8023824:	e004      	b.n	8023830 <HAL_UART_IRQHandler+0x67c>
      return;
 8023826:	bf00      	nop
 8023828:	e002      	b.n	8023830 <HAL_UART_IRQHandler+0x67c>
      return;
 802382a:	bf00      	nop
 802382c:	e000      	b.n	8023830 <HAL_UART_IRQHandler+0x67c>
    return;
 802382e:	bf00      	nop
  }
}
 8023830:	37e8      	adds	r7, #232	@ 0xe8
 8023832:	46bd      	mov	sp, r7
 8023834:	bd80      	pop	{r7, pc}
 8023836:	bf00      	nop

08023838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8023838:	b480      	push	{r7}
 802383a:	b083      	sub	sp, #12
 802383c:	af00      	add	r7, sp, #0
 802383e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8023840:	bf00      	nop
 8023842:	370c      	adds	r7, #12
 8023844:	46bd      	mov	sp, r7
 8023846:	f85d 7b04 	ldr.w	r7, [sp], #4
 802384a:	4770      	bx	lr

0802384c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 802384c:	b480      	push	{r7}
 802384e:	b083      	sub	sp, #12
 8023850:	af00      	add	r7, sp, #0
 8023852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8023854:	bf00      	nop
 8023856:	370c      	adds	r7, #12
 8023858:	46bd      	mov	sp, r7
 802385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802385e:	4770      	bx	lr

08023860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8023860:	b480      	push	{r7}
 8023862:	b083      	sub	sp, #12
 8023864:	af00      	add	r7, sp, #0
 8023866:	6078      	str	r0, [r7, #4]
 8023868:	460b      	mov	r3, r1
 802386a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 802386c:	bf00      	nop
 802386e:	370c      	adds	r7, #12
 8023870:	46bd      	mov	sp, r7
 8023872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023876:	4770      	bx	lr

08023878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8023878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802387c:	b08c      	sub	sp, #48	@ 0x30
 802387e:	af00      	add	r7, sp, #0
 8023880:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8023882:	2300      	movs	r3, #0
 8023884:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8023888:	697b      	ldr	r3, [r7, #20]
 802388a:	689a      	ldr	r2, [r3, #8]
 802388c:	697b      	ldr	r3, [r7, #20]
 802388e:	691b      	ldr	r3, [r3, #16]
 8023890:	431a      	orrs	r2, r3
 8023892:	697b      	ldr	r3, [r7, #20]
 8023894:	695b      	ldr	r3, [r3, #20]
 8023896:	431a      	orrs	r2, r3
 8023898:	697b      	ldr	r3, [r7, #20]
 802389a:	69db      	ldr	r3, [r3, #28]
 802389c:	4313      	orrs	r3, r2
 802389e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80238a0:	697b      	ldr	r3, [r7, #20]
 80238a2:	681b      	ldr	r3, [r3, #0]
 80238a4:	681a      	ldr	r2, [r3, #0]
 80238a6:	4baf      	ldr	r3, [pc, #700]	@ (8023b64 <UART_SetConfig+0x2ec>)
 80238a8:	4013      	ands	r3, r2
 80238aa:	697a      	ldr	r2, [r7, #20]
 80238ac:	6812      	ldr	r2, [r2, #0]
 80238ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80238b0:	430b      	orrs	r3, r1
 80238b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80238b4:	697b      	ldr	r3, [r7, #20]
 80238b6:	681b      	ldr	r3, [r3, #0]
 80238b8:	685b      	ldr	r3, [r3, #4]
 80238ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80238be:	697b      	ldr	r3, [r7, #20]
 80238c0:	68da      	ldr	r2, [r3, #12]
 80238c2:	697b      	ldr	r3, [r7, #20]
 80238c4:	681b      	ldr	r3, [r3, #0]
 80238c6:	430a      	orrs	r2, r1
 80238c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80238ca:	697b      	ldr	r3, [r7, #20]
 80238cc:	699b      	ldr	r3, [r3, #24]
 80238ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80238d0:	697b      	ldr	r3, [r7, #20]
 80238d2:	681b      	ldr	r3, [r3, #0]
 80238d4:	4aa4      	ldr	r2, [pc, #656]	@ (8023b68 <UART_SetConfig+0x2f0>)
 80238d6:	4293      	cmp	r3, r2
 80238d8:	d004      	beq.n	80238e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80238da:	697b      	ldr	r3, [r7, #20]
 80238dc:	6a1b      	ldr	r3, [r3, #32]
 80238de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80238e0:	4313      	orrs	r3, r2
 80238e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80238e4:	697b      	ldr	r3, [r7, #20]
 80238e6:	681b      	ldr	r3, [r3, #0]
 80238e8:	689b      	ldr	r3, [r3, #8]
 80238ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80238ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80238f2:	697a      	ldr	r2, [r7, #20]
 80238f4:	6812      	ldr	r2, [r2, #0]
 80238f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80238f8:	430b      	orrs	r3, r1
 80238fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80238fc:	697b      	ldr	r3, [r7, #20]
 80238fe:	681b      	ldr	r3, [r3, #0]
 8023900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023902:	f023 010f 	bic.w	r1, r3, #15
 8023906:	697b      	ldr	r3, [r7, #20]
 8023908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 802390a:	697b      	ldr	r3, [r7, #20]
 802390c:	681b      	ldr	r3, [r3, #0]
 802390e:	430a      	orrs	r2, r1
 8023910:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8023912:	697b      	ldr	r3, [r7, #20]
 8023914:	681b      	ldr	r3, [r3, #0]
 8023916:	4a95      	ldr	r2, [pc, #596]	@ (8023b6c <UART_SetConfig+0x2f4>)
 8023918:	4293      	cmp	r3, r2
 802391a:	d125      	bne.n	8023968 <UART_SetConfig+0xf0>
 802391c:	2003      	movs	r0, #3
 802391e:	f7ff fb4b 	bl	8022fb8 <LL_RCC_GetUSARTClockSource>
 8023922:	4603      	mov	r3, r0
 8023924:	2b03      	cmp	r3, #3
 8023926:	d81b      	bhi.n	8023960 <UART_SetConfig+0xe8>
 8023928:	a201      	add	r2, pc, #4	@ (adr r2, 8023930 <UART_SetConfig+0xb8>)
 802392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802392e:	bf00      	nop
 8023930:	08023941 	.word	0x08023941
 8023934:	08023951 	.word	0x08023951
 8023938:	08023949 	.word	0x08023949
 802393c:	08023959 	.word	0x08023959
 8023940:	2301      	movs	r3, #1
 8023942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8023946:	e042      	b.n	80239ce <UART_SetConfig+0x156>
 8023948:	2302      	movs	r3, #2
 802394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802394e:	e03e      	b.n	80239ce <UART_SetConfig+0x156>
 8023950:	2304      	movs	r3, #4
 8023952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8023956:	e03a      	b.n	80239ce <UART_SetConfig+0x156>
 8023958:	2308      	movs	r3, #8
 802395a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 802395e:	e036      	b.n	80239ce <UART_SetConfig+0x156>
 8023960:	2310      	movs	r3, #16
 8023962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8023966:	e032      	b.n	80239ce <UART_SetConfig+0x156>
 8023968:	697b      	ldr	r3, [r7, #20]
 802396a:	681b      	ldr	r3, [r3, #0]
 802396c:	4a7e      	ldr	r2, [pc, #504]	@ (8023b68 <UART_SetConfig+0x2f0>)
 802396e:	4293      	cmp	r3, r2
 8023970:	d12a      	bne.n	80239c8 <UART_SetConfig+0x150>
 8023972:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8023976:	f7ff fb2f 	bl	8022fd8 <LL_RCC_GetLPUARTClockSource>
 802397a:	4603      	mov	r3, r0
 802397c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8023980:	d01a      	beq.n	80239b8 <UART_SetConfig+0x140>
 8023982:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8023986:	d81b      	bhi.n	80239c0 <UART_SetConfig+0x148>
 8023988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802398c:	d00c      	beq.n	80239a8 <UART_SetConfig+0x130>
 802398e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8023992:	d815      	bhi.n	80239c0 <UART_SetConfig+0x148>
 8023994:	2b00      	cmp	r3, #0
 8023996:	d003      	beq.n	80239a0 <UART_SetConfig+0x128>
 8023998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802399c:	d008      	beq.n	80239b0 <UART_SetConfig+0x138>
 802399e:	e00f      	b.n	80239c0 <UART_SetConfig+0x148>
 80239a0:	2300      	movs	r3, #0
 80239a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80239a6:	e012      	b.n	80239ce <UART_SetConfig+0x156>
 80239a8:	2302      	movs	r3, #2
 80239aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80239ae:	e00e      	b.n	80239ce <UART_SetConfig+0x156>
 80239b0:	2304      	movs	r3, #4
 80239b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80239b6:	e00a      	b.n	80239ce <UART_SetConfig+0x156>
 80239b8:	2308      	movs	r3, #8
 80239ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80239be:	e006      	b.n	80239ce <UART_SetConfig+0x156>
 80239c0:	2310      	movs	r3, #16
 80239c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80239c6:	e002      	b.n	80239ce <UART_SetConfig+0x156>
 80239c8:	2310      	movs	r3, #16
 80239ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80239ce:	697b      	ldr	r3, [r7, #20]
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	4a65      	ldr	r2, [pc, #404]	@ (8023b68 <UART_SetConfig+0x2f0>)
 80239d4:	4293      	cmp	r3, r2
 80239d6:	f040 8097 	bne.w	8023b08 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80239da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80239de:	2b08      	cmp	r3, #8
 80239e0:	d823      	bhi.n	8023a2a <UART_SetConfig+0x1b2>
 80239e2:	a201      	add	r2, pc, #4	@ (adr r2, 80239e8 <UART_SetConfig+0x170>)
 80239e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80239e8:	08023a0d 	.word	0x08023a0d
 80239ec:	08023a2b 	.word	0x08023a2b
 80239f0:	08023a15 	.word	0x08023a15
 80239f4:	08023a2b 	.word	0x08023a2b
 80239f8:	08023a1b 	.word	0x08023a1b
 80239fc:	08023a2b 	.word	0x08023a2b
 8023a00:	08023a2b 	.word	0x08023a2b
 8023a04:	08023a2b 	.word	0x08023a2b
 8023a08:	08023a23 	.word	0x08023a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8023a0c:	f7fe fdd0 	bl	80225b0 <HAL_RCC_GetPCLK1Freq>
 8023a10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8023a12:	e010      	b.n	8023a36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023a14:	4b56      	ldr	r3, [pc, #344]	@ (8023b70 <UART_SetConfig+0x2f8>)
 8023a16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8023a18:	e00d      	b.n	8023a36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8023a1a:	f7fe fd49 	bl	80224b0 <HAL_RCC_GetSysClockFreq>
 8023a1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8023a20:	e009      	b.n	8023a36 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8023a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8023a28:	e005      	b.n	8023a36 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8023a2a:	2300      	movs	r3, #0
 8023a2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8023a2e:	2301      	movs	r3, #1
 8023a30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8023a34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8023a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a38:	2b00      	cmp	r3, #0
 8023a3a:	f000 812b 	beq.w	8023c94 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8023a3e:	697b      	ldr	r3, [r7, #20]
 8023a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023a42:	4a4c      	ldr	r2, [pc, #304]	@ (8023b74 <UART_SetConfig+0x2fc>)
 8023a44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023a48:	461a      	mov	r2, r3
 8023a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8023a50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8023a52:	697b      	ldr	r3, [r7, #20]
 8023a54:	685a      	ldr	r2, [r3, #4]
 8023a56:	4613      	mov	r3, r2
 8023a58:	005b      	lsls	r3, r3, #1
 8023a5a:	4413      	add	r3, r2
 8023a5c:	69ba      	ldr	r2, [r7, #24]
 8023a5e:	429a      	cmp	r2, r3
 8023a60:	d305      	bcc.n	8023a6e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8023a62:	697b      	ldr	r3, [r7, #20]
 8023a64:	685b      	ldr	r3, [r3, #4]
 8023a66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8023a68:	69ba      	ldr	r2, [r7, #24]
 8023a6a:	429a      	cmp	r2, r3
 8023a6c:	d903      	bls.n	8023a76 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8023a6e:	2301      	movs	r3, #1
 8023a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8023a74:	e10e      	b.n	8023c94 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023a78:	2200      	movs	r2, #0
 8023a7a:	60bb      	str	r3, [r7, #8]
 8023a7c:	60fa      	str	r2, [r7, #12]
 8023a7e:	697b      	ldr	r3, [r7, #20]
 8023a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023a82:	4a3c      	ldr	r2, [pc, #240]	@ (8023b74 <UART_SetConfig+0x2fc>)
 8023a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023a88:	b29b      	uxth	r3, r3
 8023a8a:	2200      	movs	r2, #0
 8023a8c:	603b      	str	r3, [r7, #0]
 8023a8e:	607a      	str	r2, [r7, #4]
 8023a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8023a94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8023a98:	f7fc fbc2 	bl	8020220 <__aeabi_uldivmod>
 8023a9c:	4602      	mov	r2, r0
 8023a9e:	460b      	mov	r3, r1
 8023aa0:	4610      	mov	r0, r2
 8023aa2:	4619      	mov	r1, r3
 8023aa4:	f04f 0200 	mov.w	r2, #0
 8023aa8:	f04f 0300 	mov.w	r3, #0
 8023aac:	020b      	lsls	r3, r1, #8
 8023aae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8023ab2:	0202      	lsls	r2, r0, #8
 8023ab4:	6979      	ldr	r1, [r7, #20]
 8023ab6:	6849      	ldr	r1, [r1, #4]
 8023ab8:	0849      	lsrs	r1, r1, #1
 8023aba:	2000      	movs	r0, #0
 8023abc:	460c      	mov	r4, r1
 8023abe:	4605      	mov	r5, r0
 8023ac0:	eb12 0804 	adds.w	r8, r2, r4
 8023ac4:	eb43 0905 	adc.w	r9, r3, r5
 8023ac8:	697b      	ldr	r3, [r7, #20]
 8023aca:	685b      	ldr	r3, [r3, #4]
 8023acc:	2200      	movs	r2, #0
 8023ace:	469a      	mov	sl, r3
 8023ad0:	4693      	mov	fp, r2
 8023ad2:	4652      	mov	r2, sl
 8023ad4:	465b      	mov	r3, fp
 8023ad6:	4640      	mov	r0, r8
 8023ad8:	4649      	mov	r1, r9
 8023ada:	f7fc fba1 	bl	8020220 <__aeabi_uldivmod>
 8023ade:	4602      	mov	r2, r0
 8023ae0:	460b      	mov	r3, r1
 8023ae2:	4613      	mov	r3, r2
 8023ae4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8023ae6:	6a3b      	ldr	r3, [r7, #32]
 8023ae8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8023aec:	d308      	bcc.n	8023b00 <UART_SetConfig+0x288>
 8023aee:	6a3b      	ldr	r3, [r7, #32]
 8023af0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8023af4:	d204      	bcs.n	8023b00 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8023af6:	697b      	ldr	r3, [r7, #20]
 8023af8:	681b      	ldr	r3, [r3, #0]
 8023afa:	6a3a      	ldr	r2, [r7, #32]
 8023afc:	60da      	str	r2, [r3, #12]
 8023afe:	e0c9      	b.n	8023c94 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8023b00:	2301      	movs	r3, #1
 8023b02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8023b06:	e0c5      	b.n	8023c94 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8023b08:	697b      	ldr	r3, [r7, #20]
 8023b0a:	69db      	ldr	r3, [r3, #28]
 8023b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8023b10:	d16d      	bne.n	8023bee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8023b12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8023b16:	3b01      	subs	r3, #1
 8023b18:	2b07      	cmp	r3, #7
 8023b1a:	d82d      	bhi.n	8023b78 <UART_SetConfig+0x300>
 8023b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8023b24 <UART_SetConfig+0x2ac>)
 8023b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023b22:	bf00      	nop
 8023b24:	08023b45 	.word	0x08023b45
 8023b28:	08023b4d 	.word	0x08023b4d
 8023b2c:	08023b79 	.word	0x08023b79
 8023b30:	08023b53 	.word	0x08023b53
 8023b34:	08023b79 	.word	0x08023b79
 8023b38:	08023b79 	.word	0x08023b79
 8023b3c:	08023b79 	.word	0x08023b79
 8023b40:	08023b5b 	.word	0x08023b5b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8023b44:	f7fe fd4a 	bl	80225dc <HAL_RCC_GetPCLK2Freq>
 8023b48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8023b4a:	e01b      	b.n	8023b84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023b4c:	4b08      	ldr	r3, [pc, #32]	@ (8023b70 <UART_SetConfig+0x2f8>)
 8023b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8023b50:	e018      	b.n	8023b84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8023b52:	f7fe fcad 	bl	80224b0 <HAL_RCC_GetSysClockFreq>
 8023b56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8023b58:	e014      	b.n	8023b84 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8023b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8023b60:	e010      	b.n	8023b84 <UART_SetConfig+0x30c>
 8023b62:	bf00      	nop
 8023b64:	cfff69f3 	.word	0xcfff69f3
 8023b68:	40008000 	.word	0x40008000
 8023b6c:	40013800 	.word	0x40013800
 8023b70:	00f42400 	.word	0x00f42400
 8023b74:	0802533c 	.word	0x0802533c
      default:
        pclk = 0U;
 8023b78:	2300      	movs	r3, #0
 8023b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8023b7c:	2301      	movs	r3, #1
 8023b7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8023b82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8023b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	f000 8084 	beq.w	8023c94 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023b8c:	697b      	ldr	r3, [r7, #20]
 8023b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023b90:	4a4b      	ldr	r2, [pc, #300]	@ (8023cc0 <UART_SetConfig+0x448>)
 8023b92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023b96:	461a      	mov	r2, r3
 8023b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8023b9e:	005a      	lsls	r2, r3, #1
 8023ba0:	697b      	ldr	r3, [r7, #20]
 8023ba2:	685b      	ldr	r3, [r3, #4]
 8023ba4:	085b      	lsrs	r3, r3, #1
 8023ba6:	441a      	add	r2, r3
 8023ba8:	697b      	ldr	r3, [r7, #20]
 8023baa:	685b      	ldr	r3, [r3, #4]
 8023bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8023bb0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8023bb2:	6a3b      	ldr	r3, [r7, #32]
 8023bb4:	2b0f      	cmp	r3, #15
 8023bb6:	d916      	bls.n	8023be6 <UART_SetConfig+0x36e>
 8023bb8:	6a3b      	ldr	r3, [r7, #32]
 8023bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023bbe:	d212      	bcs.n	8023be6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8023bc0:	6a3b      	ldr	r3, [r7, #32]
 8023bc2:	b29b      	uxth	r3, r3
 8023bc4:	f023 030f 	bic.w	r3, r3, #15
 8023bc8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8023bca:	6a3b      	ldr	r3, [r7, #32]
 8023bcc:	085b      	lsrs	r3, r3, #1
 8023bce:	b29b      	uxth	r3, r3
 8023bd0:	f003 0307 	and.w	r3, r3, #7
 8023bd4:	b29a      	uxth	r2, r3
 8023bd6:	8bfb      	ldrh	r3, [r7, #30]
 8023bd8:	4313      	orrs	r3, r2
 8023bda:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8023bdc:	697b      	ldr	r3, [r7, #20]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	8bfa      	ldrh	r2, [r7, #30]
 8023be2:	60da      	str	r2, [r3, #12]
 8023be4:	e056      	b.n	8023c94 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8023be6:	2301      	movs	r3, #1
 8023be8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8023bec:	e052      	b.n	8023c94 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8023bee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8023bf2:	3b01      	subs	r3, #1
 8023bf4:	2b07      	cmp	r3, #7
 8023bf6:	d822      	bhi.n	8023c3e <UART_SetConfig+0x3c6>
 8023bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8023c00 <UART_SetConfig+0x388>)
 8023bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023bfe:	bf00      	nop
 8023c00:	08023c21 	.word	0x08023c21
 8023c04:	08023c29 	.word	0x08023c29
 8023c08:	08023c3f 	.word	0x08023c3f
 8023c0c:	08023c2f 	.word	0x08023c2f
 8023c10:	08023c3f 	.word	0x08023c3f
 8023c14:	08023c3f 	.word	0x08023c3f
 8023c18:	08023c3f 	.word	0x08023c3f
 8023c1c:	08023c37 	.word	0x08023c37
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8023c20:	f7fe fcdc 	bl	80225dc <HAL_RCC_GetPCLK2Freq>
 8023c24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8023c26:	e010      	b.n	8023c4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8023c28:	4b26      	ldr	r3, [pc, #152]	@ (8023cc4 <UART_SetConfig+0x44c>)
 8023c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8023c2c:	e00d      	b.n	8023c4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8023c2e:	f7fe fc3f 	bl	80224b0 <HAL_RCC_GetSysClockFreq>
 8023c32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8023c34:	e009      	b.n	8023c4a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8023c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8023c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8023c3c:	e005      	b.n	8023c4a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8023c3e:	2300      	movs	r3, #0
 8023c40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8023c42:	2301      	movs	r3, #1
 8023c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8023c48:	bf00      	nop
    }

    if (pclk != 0U)
 8023c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c4c:	2b00      	cmp	r3, #0
 8023c4e:	d021      	beq.n	8023c94 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8023c50:	697b      	ldr	r3, [r7, #20]
 8023c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023c54:	4a1a      	ldr	r2, [pc, #104]	@ (8023cc0 <UART_SetConfig+0x448>)
 8023c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8023c5a:	461a      	mov	r2, r3
 8023c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8023c62:	697b      	ldr	r3, [r7, #20]
 8023c64:	685b      	ldr	r3, [r3, #4]
 8023c66:	085b      	lsrs	r3, r3, #1
 8023c68:	441a      	add	r2, r3
 8023c6a:	697b      	ldr	r3, [r7, #20]
 8023c6c:	685b      	ldr	r3, [r3, #4]
 8023c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8023c72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8023c74:	6a3b      	ldr	r3, [r7, #32]
 8023c76:	2b0f      	cmp	r3, #15
 8023c78:	d909      	bls.n	8023c8e <UART_SetConfig+0x416>
 8023c7a:	6a3b      	ldr	r3, [r7, #32]
 8023c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8023c80:	d205      	bcs.n	8023c8e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8023c82:	6a3b      	ldr	r3, [r7, #32]
 8023c84:	b29a      	uxth	r2, r3
 8023c86:	697b      	ldr	r3, [r7, #20]
 8023c88:	681b      	ldr	r3, [r3, #0]
 8023c8a:	60da      	str	r2, [r3, #12]
 8023c8c:	e002      	b.n	8023c94 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8023c8e:	2301      	movs	r3, #1
 8023c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8023c94:	697b      	ldr	r3, [r7, #20]
 8023c96:	2201      	movs	r2, #1
 8023c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8023c9c:	697b      	ldr	r3, [r7, #20]
 8023c9e:	2201      	movs	r2, #1
 8023ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8023ca4:	697b      	ldr	r3, [r7, #20]
 8023ca6:	2200      	movs	r2, #0
 8023ca8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8023caa:	697b      	ldr	r3, [r7, #20]
 8023cac:	2200      	movs	r2, #0
 8023cae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8023cb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8023cb4:	4618      	mov	r0, r3
 8023cb6:	3730      	adds	r7, #48	@ 0x30
 8023cb8:	46bd      	mov	sp, r7
 8023cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023cbe:	bf00      	nop
 8023cc0:	0802533c 	.word	0x0802533c
 8023cc4:	00f42400 	.word	0x00f42400

08023cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8023cc8:	b480      	push	{r7}
 8023cca:	b083      	sub	sp, #12
 8023ccc:	af00      	add	r7, sp, #0
 8023cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8023cd0:	687b      	ldr	r3, [r7, #4]
 8023cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023cd4:	f003 0308 	and.w	r3, r3, #8
 8023cd8:	2b00      	cmp	r3, #0
 8023cda:	d00a      	beq.n	8023cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8023cdc:	687b      	ldr	r3, [r7, #4]
 8023cde:	681b      	ldr	r3, [r3, #0]
 8023ce0:	685b      	ldr	r3, [r3, #4]
 8023ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8023ce6:	687b      	ldr	r3, [r7, #4]
 8023ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	681b      	ldr	r3, [r3, #0]
 8023cee:	430a      	orrs	r2, r1
 8023cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8023cf2:	687b      	ldr	r3, [r7, #4]
 8023cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023cf6:	f003 0301 	and.w	r3, r3, #1
 8023cfa:	2b00      	cmp	r3, #0
 8023cfc:	d00a      	beq.n	8023d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8023cfe:	687b      	ldr	r3, [r7, #4]
 8023d00:	681b      	ldr	r3, [r3, #0]
 8023d02:	685b      	ldr	r3, [r3, #4]
 8023d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8023d08:	687b      	ldr	r3, [r7, #4]
 8023d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8023d0c:	687b      	ldr	r3, [r7, #4]
 8023d0e:	681b      	ldr	r3, [r3, #0]
 8023d10:	430a      	orrs	r2, r1
 8023d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8023d14:	687b      	ldr	r3, [r7, #4]
 8023d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d18:	f003 0302 	and.w	r3, r3, #2
 8023d1c:	2b00      	cmp	r3, #0
 8023d1e:	d00a      	beq.n	8023d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8023d20:	687b      	ldr	r3, [r7, #4]
 8023d22:	681b      	ldr	r3, [r3, #0]
 8023d24:	685b      	ldr	r3, [r3, #4]
 8023d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8023d2a:	687b      	ldr	r3, [r7, #4]
 8023d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8023d2e:	687b      	ldr	r3, [r7, #4]
 8023d30:	681b      	ldr	r3, [r3, #0]
 8023d32:	430a      	orrs	r2, r1
 8023d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8023d36:	687b      	ldr	r3, [r7, #4]
 8023d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d3a:	f003 0304 	and.w	r3, r3, #4
 8023d3e:	2b00      	cmp	r3, #0
 8023d40:	d00a      	beq.n	8023d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8023d42:	687b      	ldr	r3, [r7, #4]
 8023d44:	681b      	ldr	r3, [r3, #0]
 8023d46:	685b      	ldr	r3, [r3, #4]
 8023d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8023d4c:	687b      	ldr	r3, [r7, #4]
 8023d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8023d50:	687b      	ldr	r3, [r7, #4]
 8023d52:	681b      	ldr	r3, [r3, #0]
 8023d54:	430a      	orrs	r2, r1
 8023d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8023d58:	687b      	ldr	r3, [r7, #4]
 8023d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d5c:	f003 0310 	and.w	r3, r3, #16
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	d00a      	beq.n	8023d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8023d64:	687b      	ldr	r3, [r7, #4]
 8023d66:	681b      	ldr	r3, [r3, #0]
 8023d68:	689b      	ldr	r3, [r3, #8]
 8023d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8023d6e:	687b      	ldr	r3, [r7, #4]
 8023d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8023d72:	687b      	ldr	r3, [r7, #4]
 8023d74:	681b      	ldr	r3, [r3, #0]
 8023d76:	430a      	orrs	r2, r1
 8023d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8023d7a:	687b      	ldr	r3, [r7, #4]
 8023d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023d7e:	f003 0320 	and.w	r3, r3, #32
 8023d82:	2b00      	cmp	r3, #0
 8023d84:	d00a      	beq.n	8023d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8023d86:	687b      	ldr	r3, [r7, #4]
 8023d88:	681b      	ldr	r3, [r3, #0]
 8023d8a:	689b      	ldr	r3, [r3, #8]
 8023d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8023d94:	687b      	ldr	r3, [r7, #4]
 8023d96:	681b      	ldr	r3, [r3, #0]
 8023d98:	430a      	orrs	r2, r1
 8023d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8023d9c:	687b      	ldr	r3, [r7, #4]
 8023d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023da4:	2b00      	cmp	r3, #0
 8023da6:	d01a      	beq.n	8023dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8023da8:	687b      	ldr	r3, [r7, #4]
 8023daa:	681b      	ldr	r3, [r3, #0]
 8023dac:	685b      	ldr	r3, [r3, #4]
 8023dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8023db2:	687b      	ldr	r3, [r7, #4]
 8023db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8023db6:	687b      	ldr	r3, [r7, #4]
 8023db8:	681b      	ldr	r3, [r3, #0]
 8023dba:	430a      	orrs	r2, r1
 8023dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8023dbe:	687b      	ldr	r3, [r7, #4]
 8023dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8023dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8023dc6:	d10a      	bne.n	8023dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8023dc8:	687b      	ldr	r3, [r7, #4]
 8023dca:	681b      	ldr	r3, [r3, #0]
 8023dcc:	685b      	ldr	r3, [r3, #4]
 8023dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	681b      	ldr	r3, [r3, #0]
 8023dda:	430a      	orrs	r2, r1
 8023ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8023dde:	687b      	ldr	r3, [r7, #4]
 8023de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8023de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8023de6:	2b00      	cmp	r3, #0
 8023de8:	d00a      	beq.n	8023e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	681b      	ldr	r3, [r3, #0]
 8023dee:	685b      	ldr	r3, [r3, #4]
 8023df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8023df8:	687b      	ldr	r3, [r7, #4]
 8023dfa:	681b      	ldr	r3, [r3, #0]
 8023dfc:	430a      	orrs	r2, r1
 8023dfe:	605a      	str	r2, [r3, #4]
  }
}
 8023e00:	bf00      	nop
 8023e02:	370c      	adds	r7, #12
 8023e04:	46bd      	mov	sp, r7
 8023e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e0a:	4770      	bx	lr

08023e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8023e0c:	b580      	push	{r7, lr}
 8023e0e:	b098      	sub	sp, #96	@ 0x60
 8023e10:	af02      	add	r7, sp, #8
 8023e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023e14:	687b      	ldr	r3, [r7, #4]
 8023e16:	2200      	movs	r2, #0
 8023e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8023e1c:	f7fc ff6e 	bl	8020cfc <HAL_GetTick>
 8023e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8023e22:	687b      	ldr	r3, [r7, #4]
 8023e24:	681b      	ldr	r3, [r3, #0]
 8023e26:	681b      	ldr	r3, [r3, #0]
 8023e28:	f003 0308 	and.w	r3, r3, #8
 8023e2c:	2b08      	cmp	r3, #8
 8023e2e:	d12f      	bne.n	8023e90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8023e34:	9300      	str	r3, [sp, #0]
 8023e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023e38:	2200      	movs	r2, #0
 8023e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8023e3e:	6878      	ldr	r0, [r7, #4]
 8023e40:	f000 f88e 	bl	8023f60 <UART_WaitOnFlagUntilTimeout>
 8023e44:	4603      	mov	r3, r0
 8023e46:	2b00      	cmp	r3, #0
 8023e48:	d022      	beq.n	8023e90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8023e4a:	687b      	ldr	r3, [r7, #4]
 8023e4c:	681b      	ldr	r3, [r3, #0]
 8023e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023e52:	e853 3f00 	ldrex	r3, [r3]
 8023e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8023e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8023e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8023e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8023e60:	687b      	ldr	r3, [r7, #4]
 8023e62:	681b      	ldr	r3, [r3, #0]
 8023e64:	461a      	mov	r2, r3
 8023e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8023e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8023e6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8023e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8023e70:	e841 2300 	strex	r3, r2, [r1]
 8023e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8023e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023e78:	2b00      	cmp	r3, #0
 8023e7a:	d1e6      	bne.n	8023e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8023e7c:	687b      	ldr	r3, [r7, #4]
 8023e7e:	2220      	movs	r2, #32
 8023e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	2200      	movs	r2, #0
 8023e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8023e8c:	2303      	movs	r3, #3
 8023e8e:	e063      	b.n	8023f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8023e90:	687b      	ldr	r3, [r7, #4]
 8023e92:	681b      	ldr	r3, [r3, #0]
 8023e94:	681b      	ldr	r3, [r3, #0]
 8023e96:	f003 0304 	and.w	r3, r3, #4
 8023e9a:	2b04      	cmp	r3, #4
 8023e9c:	d149      	bne.n	8023f32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8023e9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8023ea2:	9300      	str	r3, [sp, #0]
 8023ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8023ea6:	2200      	movs	r2, #0
 8023ea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8023eac:	6878      	ldr	r0, [r7, #4]
 8023eae:	f000 f857 	bl	8023f60 <UART_WaitOnFlagUntilTimeout>
 8023eb2:	4603      	mov	r3, r0
 8023eb4:	2b00      	cmp	r3, #0
 8023eb6:	d03c      	beq.n	8023f32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8023eb8:	687b      	ldr	r3, [r7, #4]
 8023eba:	681b      	ldr	r3, [r3, #0]
 8023ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023ec0:	e853 3f00 	ldrex	r3, [r3]
 8023ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8023ec6:	6a3b      	ldr	r3, [r7, #32]
 8023ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8023ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8023ece:	687b      	ldr	r3, [r7, #4]
 8023ed0:	681b      	ldr	r3, [r3, #0]
 8023ed2:	461a      	mov	r2, r3
 8023ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8023ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8023ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8023edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8023ede:	e841 2300 	strex	r3, r2, [r1]
 8023ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8023ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023ee6:	2b00      	cmp	r3, #0
 8023ee8:	d1e6      	bne.n	8023eb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023eea:	687b      	ldr	r3, [r7, #4]
 8023eec:	681b      	ldr	r3, [r3, #0]
 8023eee:	3308      	adds	r3, #8
 8023ef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023ef2:	693b      	ldr	r3, [r7, #16]
 8023ef4:	e853 3f00 	ldrex	r3, [r3]
 8023ef8:	60fb      	str	r3, [r7, #12]
   return(result);
 8023efa:	68fb      	ldr	r3, [r7, #12]
 8023efc:	f023 0301 	bic.w	r3, r3, #1
 8023f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8023f02:	687b      	ldr	r3, [r7, #4]
 8023f04:	681b      	ldr	r3, [r3, #0]
 8023f06:	3308      	adds	r3, #8
 8023f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8023f0a:	61fa      	str	r2, [r7, #28]
 8023f0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023f0e:	69b9      	ldr	r1, [r7, #24]
 8023f10:	69fa      	ldr	r2, [r7, #28]
 8023f12:	e841 2300 	strex	r3, r2, [r1]
 8023f16:	617b      	str	r3, [r7, #20]
   return(result);
 8023f18:	697b      	ldr	r3, [r7, #20]
 8023f1a:	2b00      	cmp	r3, #0
 8023f1c:	d1e5      	bne.n	8023eea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8023f1e:	687b      	ldr	r3, [r7, #4]
 8023f20:	2220      	movs	r2, #32
 8023f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8023f26:	687b      	ldr	r3, [r7, #4]
 8023f28:	2200      	movs	r2, #0
 8023f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8023f2e:	2303      	movs	r3, #3
 8023f30:	e012      	b.n	8023f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8023f32:	687b      	ldr	r3, [r7, #4]
 8023f34:	2220      	movs	r2, #32
 8023f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8023f3a:	687b      	ldr	r3, [r7, #4]
 8023f3c:	2220      	movs	r2, #32
 8023f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023f42:	687b      	ldr	r3, [r7, #4]
 8023f44:	2200      	movs	r2, #0
 8023f46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8023f48:	687b      	ldr	r3, [r7, #4]
 8023f4a:	2200      	movs	r2, #0
 8023f4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8023f4e:	687b      	ldr	r3, [r7, #4]
 8023f50:	2200      	movs	r2, #0
 8023f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8023f56:	2300      	movs	r3, #0
}
 8023f58:	4618      	mov	r0, r3
 8023f5a:	3758      	adds	r7, #88	@ 0x58
 8023f5c:	46bd      	mov	sp, r7
 8023f5e:	bd80      	pop	{r7, pc}

08023f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8023f60:	b580      	push	{r7, lr}
 8023f62:	b084      	sub	sp, #16
 8023f64:	af00      	add	r7, sp, #0
 8023f66:	60f8      	str	r0, [r7, #12]
 8023f68:	60b9      	str	r1, [r7, #8]
 8023f6a:	603b      	str	r3, [r7, #0]
 8023f6c:	4613      	mov	r3, r2
 8023f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023f70:	e04f      	b.n	8024012 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023f72:	69bb      	ldr	r3, [r7, #24]
 8023f74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8023f78:	d04b      	beq.n	8024012 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8023f7a:	f7fc febf 	bl	8020cfc <HAL_GetTick>
 8023f7e:	4602      	mov	r2, r0
 8023f80:	683b      	ldr	r3, [r7, #0]
 8023f82:	1ad3      	subs	r3, r2, r3
 8023f84:	69ba      	ldr	r2, [r7, #24]
 8023f86:	429a      	cmp	r2, r3
 8023f88:	d302      	bcc.n	8023f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8023f8a:	69bb      	ldr	r3, [r7, #24]
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	d101      	bne.n	8023f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8023f90:	2303      	movs	r3, #3
 8023f92:	e04e      	b.n	8024032 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8023f94:	68fb      	ldr	r3, [r7, #12]
 8023f96:	681b      	ldr	r3, [r3, #0]
 8023f98:	681b      	ldr	r3, [r3, #0]
 8023f9a:	f003 0304 	and.w	r3, r3, #4
 8023f9e:	2b00      	cmp	r3, #0
 8023fa0:	d037      	beq.n	8024012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8023fa2:	68bb      	ldr	r3, [r7, #8]
 8023fa4:	2b80      	cmp	r3, #128	@ 0x80
 8023fa6:	d034      	beq.n	8024012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8023fa8:	68bb      	ldr	r3, [r7, #8]
 8023faa:	2b40      	cmp	r3, #64	@ 0x40
 8023fac:	d031      	beq.n	8024012 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8023fae:	68fb      	ldr	r3, [r7, #12]
 8023fb0:	681b      	ldr	r3, [r3, #0]
 8023fb2:	69db      	ldr	r3, [r3, #28]
 8023fb4:	f003 0308 	and.w	r3, r3, #8
 8023fb8:	2b08      	cmp	r3, #8
 8023fba:	d110      	bne.n	8023fde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8023fbc:	68fb      	ldr	r3, [r7, #12]
 8023fbe:	681b      	ldr	r3, [r3, #0]
 8023fc0:	2208      	movs	r2, #8
 8023fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8023fc4:	68f8      	ldr	r0, [r7, #12]
 8023fc6:	f000 f838 	bl	802403a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8023fca:	68fb      	ldr	r3, [r7, #12]
 8023fcc:	2208      	movs	r2, #8
 8023fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8023fd2:	68fb      	ldr	r3, [r7, #12]
 8023fd4:	2200      	movs	r2, #0
 8023fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8023fda:	2301      	movs	r3, #1
 8023fdc:	e029      	b.n	8024032 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8023fde:	68fb      	ldr	r3, [r7, #12]
 8023fe0:	681b      	ldr	r3, [r3, #0]
 8023fe2:	69db      	ldr	r3, [r3, #28]
 8023fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8023fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8023fec:	d111      	bne.n	8024012 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8023fee:	68fb      	ldr	r3, [r7, #12]
 8023ff0:	681b      	ldr	r3, [r3, #0]
 8023ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8023ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8023ff8:	68f8      	ldr	r0, [r7, #12]
 8023ffa:	f000 f81e 	bl	802403a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8023ffe:	68fb      	ldr	r3, [r7, #12]
 8024000:	2220      	movs	r2, #32
 8024002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8024006:	68fb      	ldr	r3, [r7, #12]
 8024008:	2200      	movs	r2, #0
 802400a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802400e:	2303      	movs	r3, #3
 8024010:	e00f      	b.n	8024032 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024012:	68fb      	ldr	r3, [r7, #12]
 8024014:	681b      	ldr	r3, [r3, #0]
 8024016:	69da      	ldr	r2, [r3, #28]
 8024018:	68bb      	ldr	r3, [r7, #8]
 802401a:	4013      	ands	r3, r2
 802401c:	68ba      	ldr	r2, [r7, #8]
 802401e:	429a      	cmp	r2, r3
 8024020:	bf0c      	ite	eq
 8024022:	2301      	moveq	r3, #1
 8024024:	2300      	movne	r3, #0
 8024026:	b2db      	uxtb	r3, r3
 8024028:	461a      	mov	r2, r3
 802402a:	79fb      	ldrb	r3, [r7, #7]
 802402c:	429a      	cmp	r2, r3
 802402e:	d0a0      	beq.n	8023f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8024030:	2300      	movs	r3, #0
}
 8024032:	4618      	mov	r0, r3
 8024034:	3710      	adds	r7, #16
 8024036:	46bd      	mov	sp, r7
 8024038:	bd80      	pop	{r7, pc}

0802403a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802403a:	b480      	push	{r7}
 802403c:	b095      	sub	sp, #84	@ 0x54
 802403e:	af00      	add	r7, sp, #0
 8024040:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	681b      	ldr	r3, [r3, #0]
 8024046:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802404a:	e853 3f00 	ldrex	r3, [r3]
 802404e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8024050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8024052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8024056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8024058:	687b      	ldr	r3, [r7, #4]
 802405a:	681b      	ldr	r3, [r3, #0]
 802405c:	461a      	mov	r2, r3
 802405e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8024060:	643b      	str	r3, [r7, #64]	@ 0x40
 8024062:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024064:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8024066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8024068:	e841 2300 	strex	r3, r2, [r1]
 802406c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802406e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024070:	2b00      	cmp	r3, #0
 8024072:	d1e6      	bne.n	8024042 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8024074:	687b      	ldr	r3, [r7, #4]
 8024076:	681b      	ldr	r3, [r3, #0]
 8024078:	3308      	adds	r3, #8
 802407a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802407c:	6a3b      	ldr	r3, [r7, #32]
 802407e:	e853 3f00 	ldrex	r3, [r3]
 8024082:	61fb      	str	r3, [r7, #28]
   return(result);
 8024084:	69fb      	ldr	r3, [r7, #28]
 8024086:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 802408a:	f023 0301 	bic.w	r3, r3, #1
 802408e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8024090:	687b      	ldr	r3, [r7, #4]
 8024092:	681b      	ldr	r3, [r3, #0]
 8024094:	3308      	adds	r3, #8
 8024096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8024098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 802409a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802409c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802409e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80240a0:	e841 2300 	strex	r3, r2, [r1]
 80240a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80240a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80240a8:	2b00      	cmp	r3, #0
 80240aa:	d1e3      	bne.n	8024074 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80240ac:	687b      	ldr	r3, [r7, #4]
 80240ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80240b0:	2b01      	cmp	r3, #1
 80240b2:	d118      	bne.n	80240e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	681b      	ldr	r3, [r3, #0]
 80240b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80240ba:	68fb      	ldr	r3, [r7, #12]
 80240bc:	e853 3f00 	ldrex	r3, [r3]
 80240c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80240c2:	68bb      	ldr	r3, [r7, #8]
 80240c4:	f023 0310 	bic.w	r3, r3, #16
 80240c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80240ca:	687b      	ldr	r3, [r7, #4]
 80240cc:	681b      	ldr	r3, [r3, #0]
 80240ce:	461a      	mov	r2, r3
 80240d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80240d2:	61bb      	str	r3, [r7, #24]
 80240d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80240d6:	6979      	ldr	r1, [r7, #20]
 80240d8:	69ba      	ldr	r2, [r7, #24]
 80240da:	e841 2300 	strex	r3, r2, [r1]
 80240de:	613b      	str	r3, [r7, #16]
   return(result);
 80240e0:	693b      	ldr	r3, [r7, #16]
 80240e2:	2b00      	cmp	r3, #0
 80240e4:	d1e6      	bne.n	80240b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80240e6:	687b      	ldr	r3, [r7, #4]
 80240e8:	2220      	movs	r2, #32
 80240ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	2200      	movs	r2, #0
 80240f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	2200      	movs	r2, #0
 80240f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80240fa:	bf00      	nop
 80240fc:	3754      	adds	r7, #84	@ 0x54
 80240fe:	46bd      	mov	sp, r7
 8024100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024104:	4770      	bx	lr

08024106 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8024106:	b580      	push	{r7, lr}
 8024108:	b084      	sub	sp, #16
 802410a:	af00      	add	r7, sp, #0
 802410c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 802410e:	687b      	ldr	r3, [r7, #4]
 8024110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024112:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8024114:	68fb      	ldr	r3, [r7, #12]
 8024116:	2200      	movs	r2, #0
 8024118:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 802411c:	68f8      	ldr	r0, [r7, #12]
 802411e:	f7ff fb95 	bl	802384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8024122:	bf00      	nop
 8024124:	3710      	adds	r7, #16
 8024126:	46bd      	mov	sp, r7
 8024128:	bd80      	pop	{r7, pc}

0802412a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802412a:	b580      	push	{r7, lr}
 802412c:	b088      	sub	sp, #32
 802412e:	af00      	add	r7, sp, #0
 8024130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8024132:	687b      	ldr	r3, [r7, #4]
 8024134:	681b      	ldr	r3, [r3, #0]
 8024136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024138:	68fb      	ldr	r3, [r7, #12]
 802413a:	e853 3f00 	ldrex	r3, [r3]
 802413e:	60bb      	str	r3, [r7, #8]
   return(result);
 8024140:	68bb      	ldr	r3, [r7, #8]
 8024142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8024146:	61fb      	str	r3, [r7, #28]
 8024148:	687b      	ldr	r3, [r7, #4]
 802414a:	681b      	ldr	r3, [r3, #0]
 802414c:	461a      	mov	r2, r3
 802414e:	69fb      	ldr	r3, [r7, #28]
 8024150:	61bb      	str	r3, [r7, #24]
 8024152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024154:	6979      	ldr	r1, [r7, #20]
 8024156:	69ba      	ldr	r2, [r7, #24]
 8024158:	e841 2300 	strex	r3, r2, [r1]
 802415c:	613b      	str	r3, [r7, #16]
   return(result);
 802415e:	693b      	ldr	r3, [r7, #16]
 8024160:	2b00      	cmp	r3, #0
 8024162:	d1e6      	bne.n	8024132 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	2220      	movs	r2, #32
 8024168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 802416c:	687b      	ldr	r3, [r7, #4]
 802416e:	2200      	movs	r2, #0
 8024170:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8024172:	6878      	ldr	r0, [r7, #4]
 8024174:	f7ff fb60 	bl	8023838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8024178:	bf00      	nop
 802417a:	3720      	adds	r7, #32
 802417c:	46bd      	mov	sp, r7
 802417e:	bd80      	pop	{r7, pc}

08024180 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8024180:	b480      	push	{r7}
 8024182:	b083      	sub	sp, #12
 8024184:	af00      	add	r7, sp, #0
 8024186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8024188:	bf00      	nop
 802418a:	370c      	adds	r7, #12
 802418c:	46bd      	mov	sp, r7
 802418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024192:	4770      	bx	lr

08024194 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8024194:	b480      	push	{r7}
 8024196:	b083      	sub	sp, #12
 8024198:	af00      	add	r7, sp, #0
 802419a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 802419c:	bf00      	nop
 802419e:	370c      	adds	r7, #12
 80241a0:	46bd      	mov	sp, r7
 80241a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241a6:	4770      	bx	lr

080241a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80241a8:	b480      	push	{r7}
 80241aa:	b083      	sub	sp, #12
 80241ac:	af00      	add	r7, sp, #0
 80241ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80241b0:	bf00      	nop
 80241b2:	370c      	adds	r7, #12
 80241b4:	46bd      	mov	sp, r7
 80241b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241ba:	4770      	bx	lr

080241bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80241bc:	b480      	push	{r7}
 80241be:	b085      	sub	sp, #20
 80241c0:	af00      	add	r7, sp, #0
 80241c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80241ca:	2b01      	cmp	r3, #1
 80241cc:	d101      	bne.n	80241d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80241ce:	2302      	movs	r3, #2
 80241d0:	e027      	b.n	8024222 <HAL_UARTEx_DisableFifoMode+0x66>
 80241d2:	687b      	ldr	r3, [r7, #4]
 80241d4:	2201      	movs	r2, #1
 80241d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80241da:	687b      	ldr	r3, [r7, #4]
 80241dc:	2224      	movs	r2, #36	@ 0x24
 80241de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80241e2:	687b      	ldr	r3, [r7, #4]
 80241e4:	681b      	ldr	r3, [r3, #0]
 80241e6:	681b      	ldr	r3, [r3, #0]
 80241e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80241ea:	687b      	ldr	r3, [r7, #4]
 80241ec:	681b      	ldr	r3, [r3, #0]
 80241ee:	681a      	ldr	r2, [r3, #0]
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	681b      	ldr	r3, [r3, #0]
 80241f4:	f022 0201 	bic.w	r2, r2, #1
 80241f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80241fa:	68fb      	ldr	r3, [r7, #12]
 80241fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8024200:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8024202:	687b      	ldr	r3, [r7, #4]
 8024204:	2200      	movs	r2, #0
 8024206:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8024208:	687b      	ldr	r3, [r7, #4]
 802420a:	681b      	ldr	r3, [r3, #0]
 802420c:	68fa      	ldr	r2, [r7, #12]
 802420e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8024210:	687b      	ldr	r3, [r7, #4]
 8024212:	2220      	movs	r2, #32
 8024214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	2200      	movs	r2, #0
 802421c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8024220:	2300      	movs	r3, #0
}
 8024222:	4618      	mov	r0, r3
 8024224:	3714      	adds	r7, #20
 8024226:	46bd      	mov	sp, r7
 8024228:	f85d 7b04 	ldr.w	r7, [sp], #4
 802422c:	4770      	bx	lr

0802422e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802422e:	b580      	push	{r7, lr}
 8024230:	b084      	sub	sp, #16
 8024232:	af00      	add	r7, sp, #0
 8024234:	6078      	str	r0, [r7, #4]
 8024236:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8024238:	687b      	ldr	r3, [r7, #4]
 802423a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802423e:	2b01      	cmp	r3, #1
 8024240:	d101      	bne.n	8024246 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8024242:	2302      	movs	r3, #2
 8024244:	e02d      	b.n	80242a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8024246:	687b      	ldr	r3, [r7, #4]
 8024248:	2201      	movs	r2, #1
 802424a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802424e:	687b      	ldr	r3, [r7, #4]
 8024250:	2224      	movs	r2, #36	@ 0x24
 8024252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8024256:	687b      	ldr	r3, [r7, #4]
 8024258:	681b      	ldr	r3, [r3, #0]
 802425a:	681b      	ldr	r3, [r3, #0]
 802425c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802425e:	687b      	ldr	r3, [r7, #4]
 8024260:	681b      	ldr	r3, [r3, #0]
 8024262:	681a      	ldr	r2, [r3, #0]
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	681b      	ldr	r3, [r3, #0]
 8024268:	f022 0201 	bic.w	r2, r2, #1
 802426c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 802426e:	687b      	ldr	r3, [r7, #4]
 8024270:	681b      	ldr	r3, [r3, #0]
 8024272:	689b      	ldr	r3, [r3, #8]
 8024274:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8024278:	687b      	ldr	r3, [r7, #4]
 802427a:	681b      	ldr	r3, [r3, #0]
 802427c:	683a      	ldr	r2, [r7, #0]
 802427e:	430a      	orrs	r2, r1
 8024280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8024282:	6878      	ldr	r0, [r7, #4]
 8024284:	f000 f850 	bl	8024328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8024288:	687b      	ldr	r3, [r7, #4]
 802428a:	681b      	ldr	r3, [r3, #0]
 802428c:	68fa      	ldr	r2, [r7, #12]
 802428e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8024290:	687b      	ldr	r3, [r7, #4]
 8024292:	2220      	movs	r2, #32
 8024294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8024298:	687b      	ldr	r3, [r7, #4]
 802429a:	2200      	movs	r2, #0
 802429c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80242a0:	2300      	movs	r3, #0
}
 80242a2:	4618      	mov	r0, r3
 80242a4:	3710      	adds	r7, #16
 80242a6:	46bd      	mov	sp, r7
 80242a8:	bd80      	pop	{r7, pc}

080242aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80242aa:	b580      	push	{r7, lr}
 80242ac:	b084      	sub	sp, #16
 80242ae:	af00      	add	r7, sp, #0
 80242b0:	6078      	str	r0, [r7, #4]
 80242b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80242ba:	2b01      	cmp	r3, #1
 80242bc:	d101      	bne.n	80242c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80242be:	2302      	movs	r3, #2
 80242c0:	e02d      	b.n	802431e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80242c2:	687b      	ldr	r3, [r7, #4]
 80242c4:	2201      	movs	r2, #1
 80242c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80242ca:	687b      	ldr	r3, [r7, #4]
 80242cc:	2224      	movs	r2, #36	@ 0x24
 80242ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80242d2:	687b      	ldr	r3, [r7, #4]
 80242d4:	681b      	ldr	r3, [r3, #0]
 80242d6:	681b      	ldr	r3, [r3, #0]
 80242d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80242da:	687b      	ldr	r3, [r7, #4]
 80242dc:	681b      	ldr	r3, [r3, #0]
 80242de:	681a      	ldr	r2, [r3, #0]
 80242e0:	687b      	ldr	r3, [r7, #4]
 80242e2:	681b      	ldr	r3, [r3, #0]
 80242e4:	f022 0201 	bic.w	r2, r2, #1
 80242e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80242ea:	687b      	ldr	r3, [r7, #4]
 80242ec:	681b      	ldr	r3, [r3, #0]
 80242ee:	689b      	ldr	r3, [r3, #8]
 80242f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80242f4:	687b      	ldr	r3, [r7, #4]
 80242f6:	681b      	ldr	r3, [r3, #0]
 80242f8:	683a      	ldr	r2, [r7, #0]
 80242fa:	430a      	orrs	r2, r1
 80242fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80242fe:	6878      	ldr	r0, [r7, #4]
 8024300:	f000 f812 	bl	8024328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8024304:	687b      	ldr	r3, [r7, #4]
 8024306:	681b      	ldr	r3, [r3, #0]
 8024308:	68fa      	ldr	r2, [r7, #12]
 802430a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802430c:	687b      	ldr	r3, [r7, #4]
 802430e:	2220      	movs	r2, #32
 8024310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8024314:	687b      	ldr	r3, [r7, #4]
 8024316:	2200      	movs	r2, #0
 8024318:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802431c:	2300      	movs	r3, #0
}
 802431e:	4618      	mov	r0, r3
 8024320:	3710      	adds	r7, #16
 8024322:	46bd      	mov	sp, r7
 8024324:	bd80      	pop	{r7, pc}
	...

08024328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8024328:	b480      	push	{r7}
 802432a:	b085      	sub	sp, #20
 802432c:	af00      	add	r7, sp, #0
 802432e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8024330:	687b      	ldr	r3, [r7, #4]
 8024332:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8024334:	2b00      	cmp	r3, #0
 8024336:	d108      	bne.n	802434a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8024338:	687b      	ldr	r3, [r7, #4]
 802433a:	2201      	movs	r2, #1
 802433c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8024340:	687b      	ldr	r3, [r7, #4]
 8024342:	2201      	movs	r2, #1
 8024344:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8024348:	e031      	b.n	80243ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 802434a:	2308      	movs	r3, #8
 802434c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 802434e:	2308      	movs	r3, #8
 8024350:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8024352:	687b      	ldr	r3, [r7, #4]
 8024354:	681b      	ldr	r3, [r3, #0]
 8024356:	689b      	ldr	r3, [r3, #8]
 8024358:	0e5b      	lsrs	r3, r3, #25
 802435a:	b2db      	uxtb	r3, r3
 802435c:	f003 0307 	and.w	r3, r3, #7
 8024360:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8024362:	687b      	ldr	r3, [r7, #4]
 8024364:	681b      	ldr	r3, [r3, #0]
 8024366:	689b      	ldr	r3, [r3, #8]
 8024368:	0f5b      	lsrs	r3, r3, #29
 802436a:	b2db      	uxtb	r3, r3
 802436c:	f003 0307 	and.w	r3, r3, #7
 8024370:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8024372:	7bbb      	ldrb	r3, [r7, #14]
 8024374:	7b3a      	ldrb	r2, [r7, #12]
 8024376:	4911      	ldr	r1, [pc, #68]	@ (80243bc <UARTEx_SetNbDataToProcess+0x94>)
 8024378:	5c8a      	ldrb	r2, [r1, r2]
 802437a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 802437e:	7b3a      	ldrb	r2, [r7, #12]
 8024380:	490f      	ldr	r1, [pc, #60]	@ (80243c0 <UARTEx_SetNbDataToProcess+0x98>)
 8024382:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8024384:	fb93 f3f2 	sdiv	r3, r3, r2
 8024388:	b29a      	uxth	r2, r3
 802438a:	687b      	ldr	r3, [r7, #4]
 802438c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8024390:	7bfb      	ldrb	r3, [r7, #15]
 8024392:	7b7a      	ldrb	r2, [r7, #13]
 8024394:	4909      	ldr	r1, [pc, #36]	@ (80243bc <UARTEx_SetNbDataToProcess+0x94>)
 8024396:	5c8a      	ldrb	r2, [r1, r2]
 8024398:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802439c:	7b7a      	ldrb	r2, [r7, #13]
 802439e:	4908      	ldr	r1, [pc, #32]	@ (80243c0 <UARTEx_SetNbDataToProcess+0x98>)
 80243a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80243a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80243a6:	b29a      	uxth	r2, r3
 80243a8:	687b      	ldr	r3, [r7, #4]
 80243aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80243ae:	bf00      	nop
 80243b0:	3714      	adds	r7, #20
 80243b2:	46bd      	mov	sp, r7
 80243b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243b8:	4770      	bx	lr
 80243ba:	bf00      	nop
 80243bc:	08025354 	.word	0x08025354
 80243c0:	0802535c 	.word	0x0802535c

080243c4 <std>:
 80243c4:	2300      	movs	r3, #0
 80243c6:	b510      	push	{r4, lr}
 80243c8:	4604      	mov	r4, r0
 80243ca:	e9c0 3300 	strd	r3, r3, [r0]
 80243ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80243d2:	6083      	str	r3, [r0, #8]
 80243d4:	8181      	strh	r1, [r0, #12]
 80243d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80243d8:	81c2      	strh	r2, [r0, #14]
 80243da:	6183      	str	r3, [r0, #24]
 80243dc:	4619      	mov	r1, r3
 80243de:	2208      	movs	r2, #8
 80243e0:	305c      	adds	r0, #92	@ 0x5c
 80243e2:	f000 f906 	bl	80245f2 <memset>
 80243e6:	4b0d      	ldr	r3, [pc, #52]	@ (802441c <std+0x58>)
 80243e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80243ea:	4b0d      	ldr	r3, [pc, #52]	@ (8024420 <std+0x5c>)
 80243ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80243ee:	4b0d      	ldr	r3, [pc, #52]	@ (8024424 <std+0x60>)
 80243f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80243f2:	4b0d      	ldr	r3, [pc, #52]	@ (8024428 <std+0x64>)
 80243f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80243f6:	4b0d      	ldr	r3, [pc, #52]	@ (802442c <std+0x68>)
 80243f8:	6224      	str	r4, [r4, #32]
 80243fa:	429c      	cmp	r4, r3
 80243fc:	d006      	beq.n	802440c <std+0x48>
 80243fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8024402:	4294      	cmp	r4, r2
 8024404:	d002      	beq.n	802440c <std+0x48>
 8024406:	33d0      	adds	r3, #208	@ 0xd0
 8024408:	429c      	cmp	r4, r3
 802440a:	d105      	bne.n	8024418 <std+0x54>
 802440c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024414:	f000 b966 	b.w	80246e4 <__retarget_lock_init_recursive>
 8024418:	bd10      	pop	{r4, pc}
 802441a:	bf00      	nop
 802441c:	0802456d 	.word	0x0802456d
 8024420:	0802458f 	.word	0x0802458f
 8024424:	080245c7 	.word	0x080245c7
 8024428:	080245eb 	.word	0x080245eb
 802442c:	20000128 	.word	0x20000128

08024430 <stdio_exit_handler>:
 8024430:	4a02      	ldr	r2, [pc, #8]	@ (802443c <stdio_exit_handler+0xc>)
 8024432:	4903      	ldr	r1, [pc, #12]	@ (8024440 <stdio_exit_handler+0x10>)
 8024434:	4803      	ldr	r0, [pc, #12]	@ (8024444 <stdio_exit_handler+0x14>)
 8024436:	f000 b869 	b.w	802450c <_fwalk_sglue>
 802443a:	bf00      	nop
 802443c:	20000014 	.word	0x20000014
 8024440:	08024f81 	.word	0x08024f81
 8024444:	20000024 	.word	0x20000024

08024448 <cleanup_stdio>:
 8024448:	6841      	ldr	r1, [r0, #4]
 802444a:	4b0c      	ldr	r3, [pc, #48]	@ (802447c <cleanup_stdio+0x34>)
 802444c:	4299      	cmp	r1, r3
 802444e:	b510      	push	{r4, lr}
 8024450:	4604      	mov	r4, r0
 8024452:	d001      	beq.n	8024458 <cleanup_stdio+0x10>
 8024454:	f000 fd94 	bl	8024f80 <_fflush_r>
 8024458:	68a1      	ldr	r1, [r4, #8]
 802445a:	4b09      	ldr	r3, [pc, #36]	@ (8024480 <cleanup_stdio+0x38>)
 802445c:	4299      	cmp	r1, r3
 802445e:	d002      	beq.n	8024466 <cleanup_stdio+0x1e>
 8024460:	4620      	mov	r0, r4
 8024462:	f000 fd8d 	bl	8024f80 <_fflush_r>
 8024466:	68e1      	ldr	r1, [r4, #12]
 8024468:	4b06      	ldr	r3, [pc, #24]	@ (8024484 <cleanup_stdio+0x3c>)
 802446a:	4299      	cmp	r1, r3
 802446c:	d004      	beq.n	8024478 <cleanup_stdio+0x30>
 802446e:	4620      	mov	r0, r4
 8024470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024474:	f000 bd84 	b.w	8024f80 <_fflush_r>
 8024478:	bd10      	pop	{r4, pc}
 802447a:	bf00      	nop
 802447c:	20000128 	.word	0x20000128
 8024480:	20000190 	.word	0x20000190
 8024484:	200001f8 	.word	0x200001f8

08024488 <global_stdio_init.part.0>:
 8024488:	b510      	push	{r4, lr}
 802448a:	4b0b      	ldr	r3, [pc, #44]	@ (80244b8 <global_stdio_init.part.0+0x30>)
 802448c:	4c0b      	ldr	r4, [pc, #44]	@ (80244bc <global_stdio_init.part.0+0x34>)
 802448e:	4a0c      	ldr	r2, [pc, #48]	@ (80244c0 <global_stdio_init.part.0+0x38>)
 8024490:	601a      	str	r2, [r3, #0]
 8024492:	4620      	mov	r0, r4
 8024494:	2200      	movs	r2, #0
 8024496:	2104      	movs	r1, #4
 8024498:	f7ff ff94 	bl	80243c4 <std>
 802449c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80244a0:	2201      	movs	r2, #1
 80244a2:	2109      	movs	r1, #9
 80244a4:	f7ff ff8e 	bl	80243c4 <std>
 80244a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80244ac:	2202      	movs	r2, #2
 80244ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244b2:	2112      	movs	r1, #18
 80244b4:	f7ff bf86 	b.w	80243c4 <std>
 80244b8:	20000260 	.word	0x20000260
 80244bc:	20000128 	.word	0x20000128
 80244c0:	08024431 	.word	0x08024431

080244c4 <__sfp_lock_acquire>:
 80244c4:	4801      	ldr	r0, [pc, #4]	@ (80244cc <__sfp_lock_acquire+0x8>)
 80244c6:	f000 b90e 	b.w	80246e6 <__retarget_lock_acquire_recursive>
 80244ca:	bf00      	nop
 80244cc:	20000269 	.word	0x20000269

080244d0 <__sfp_lock_release>:
 80244d0:	4801      	ldr	r0, [pc, #4]	@ (80244d8 <__sfp_lock_release+0x8>)
 80244d2:	f000 b909 	b.w	80246e8 <__retarget_lock_release_recursive>
 80244d6:	bf00      	nop
 80244d8:	20000269 	.word	0x20000269

080244dc <__sinit>:
 80244dc:	b510      	push	{r4, lr}
 80244de:	4604      	mov	r4, r0
 80244e0:	f7ff fff0 	bl	80244c4 <__sfp_lock_acquire>
 80244e4:	6a23      	ldr	r3, [r4, #32]
 80244e6:	b11b      	cbz	r3, 80244f0 <__sinit+0x14>
 80244e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244ec:	f7ff bff0 	b.w	80244d0 <__sfp_lock_release>
 80244f0:	4b04      	ldr	r3, [pc, #16]	@ (8024504 <__sinit+0x28>)
 80244f2:	6223      	str	r3, [r4, #32]
 80244f4:	4b04      	ldr	r3, [pc, #16]	@ (8024508 <__sinit+0x2c>)
 80244f6:	681b      	ldr	r3, [r3, #0]
 80244f8:	2b00      	cmp	r3, #0
 80244fa:	d1f5      	bne.n	80244e8 <__sinit+0xc>
 80244fc:	f7ff ffc4 	bl	8024488 <global_stdio_init.part.0>
 8024500:	e7f2      	b.n	80244e8 <__sinit+0xc>
 8024502:	bf00      	nop
 8024504:	08024449 	.word	0x08024449
 8024508:	20000260 	.word	0x20000260

0802450c <_fwalk_sglue>:
 802450c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024510:	4607      	mov	r7, r0
 8024512:	4688      	mov	r8, r1
 8024514:	4614      	mov	r4, r2
 8024516:	2600      	movs	r6, #0
 8024518:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802451c:	f1b9 0901 	subs.w	r9, r9, #1
 8024520:	d505      	bpl.n	802452e <_fwalk_sglue+0x22>
 8024522:	6824      	ldr	r4, [r4, #0]
 8024524:	2c00      	cmp	r4, #0
 8024526:	d1f7      	bne.n	8024518 <_fwalk_sglue+0xc>
 8024528:	4630      	mov	r0, r6
 802452a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802452e:	89ab      	ldrh	r3, [r5, #12]
 8024530:	2b01      	cmp	r3, #1
 8024532:	d907      	bls.n	8024544 <_fwalk_sglue+0x38>
 8024534:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024538:	3301      	adds	r3, #1
 802453a:	d003      	beq.n	8024544 <_fwalk_sglue+0x38>
 802453c:	4629      	mov	r1, r5
 802453e:	4638      	mov	r0, r7
 8024540:	47c0      	blx	r8
 8024542:	4306      	orrs	r6, r0
 8024544:	3568      	adds	r5, #104	@ 0x68
 8024546:	e7e9      	b.n	802451c <_fwalk_sglue+0x10>

08024548 <iprintf>:
 8024548:	b40f      	push	{r0, r1, r2, r3}
 802454a:	b507      	push	{r0, r1, r2, lr}
 802454c:	4906      	ldr	r1, [pc, #24]	@ (8024568 <iprintf+0x20>)
 802454e:	ab04      	add	r3, sp, #16
 8024550:	6808      	ldr	r0, [r1, #0]
 8024552:	f853 2b04 	ldr.w	r2, [r3], #4
 8024556:	6881      	ldr	r1, [r0, #8]
 8024558:	9301      	str	r3, [sp, #4]
 802455a:	f000 f9e9 	bl	8024930 <_vfiprintf_r>
 802455e:	b003      	add	sp, #12
 8024560:	f85d eb04 	ldr.w	lr, [sp], #4
 8024564:	b004      	add	sp, #16
 8024566:	4770      	bx	lr
 8024568:	20000020 	.word	0x20000020

0802456c <__sread>:
 802456c:	b510      	push	{r4, lr}
 802456e:	460c      	mov	r4, r1
 8024570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024574:	f000 f868 	bl	8024648 <_read_r>
 8024578:	2800      	cmp	r0, #0
 802457a:	bfab      	itete	ge
 802457c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802457e:	89a3      	ldrhlt	r3, [r4, #12]
 8024580:	181b      	addge	r3, r3, r0
 8024582:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8024586:	bfac      	ite	ge
 8024588:	6563      	strge	r3, [r4, #84]	@ 0x54
 802458a:	81a3      	strhlt	r3, [r4, #12]
 802458c:	bd10      	pop	{r4, pc}

0802458e <__swrite>:
 802458e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024592:	461f      	mov	r7, r3
 8024594:	898b      	ldrh	r3, [r1, #12]
 8024596:	05db      	lsls	r3, r3, #23
 8024598:	4605      	mov	r5, r0
 802459a:	460c      	mov	r4, r1
 802459c:	4616      	mov	r6, r2
 802459e:	d505      	bpl.n	80245ac <__swrite+0x1e>
 80245a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80245a4:	2302      	movs	r3, #2
 80245a6:	2200      	movs	r2, #0
 80245a8:	f000 f83c 	bl	8024624 <_lseek_r>
 80245ac:	89a3      	ldrh	r3, [r4, #12]
 80245ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80245b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80245b6:	81a3      	strh	r3, [r4, #12]
 80245b8:	4632      	mov	r2, r6
 80245ba:	463b      	mov	r3, r7
 80245bc:	4628      	mov	r0, r5
 80245be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80245c2:	f000 b853 	b.w	802466c <_write_r>

080245c6 <__sseek>:
 80245c6:	b510      	push	{r4, lr}
 80245c8:	460c      	mov	r4, r1
 80245ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80245ce:	f000 f829 	bl	8024624 <_lseek_r>
 80245d2:	1c43      	adds	r3, r0, #1
 80245d4:	89a3      	ldrh	r3, [r4, #12]
 80245d6:	bf15      	itete	ne
 80245d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80245da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80245de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80245e2:	81a3      	strheq	r3, [r4, #12]
 80245e4:	bf18      	it	ne
 80245e6:	81a3      	strhne	r3, [r4, #12]
 80245e8:	bd10      	pop	{r4, pc}

080245ea <__sclose>:
 80245ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80245ee:	f000 b809 	b.w	8024604 <_close_r>

080245f2 <memset>:
 80245f2:	4402      	add	r2, r0
 80245f4:	4603      	mov	r3, r0
 80245f6:	4293      	cmp	r3, r2
 80245f8:	d100      	bne.n	80245fc <memset+0xa>
 80245fa:	4770      	bx	lr
 80245fc:	f803 1b01 	strb.w	r1, [r3], #1
 8024600:	e7f9      	b.n	80245f6 <memset+0x4>
	...

08024604 <_close_r>:
 8024604:	b538      	push	{r3, r4, r5, lr}
 8024606:	4d06      	ldr	r5, [pc, #24]	@ (8024620 <_close_r+0x1c>)
 8024608:	2300      	movs	r3, #0
 802460a:	4604      	mov	r4, r0
 802460c:	4608      	mov	r0, r1
 802460e:	602b      	str	r3, [r5, #0]
 8024610:	f7fc fa0f 	bl	8020a32 <_close>
 8024614:	1c43      	adds	r3, r0, #1
 8024616:	d102      	bne.n	802461e <_close_r+0x1a>
 8024618:	682b      	ldr	r3, [r5, #0]
 802461a:	b103      	cbz	r3, 802461e <_close_r+0x1a>
 802461c:	6023      	str	r3, [r4, #0]
 802461e:	bd38      	pop	{r3, r4, r5, pc}
 8024620:	20000264 	.word	0x20000264

08024624 <_lseek_r>:
 8024624:	b538      	push	{r3, r4, r5, lr}
 8024626:	4d07      	ldr	r5, [pc, #28]	@ (8024644 <_lseek_r+0x20>)
 8024628:	4604      	mov	r4, r0
 802462a:	4608      	mov	r0, r1
 802462c:	4611      	mov	r1, r2
 802462e:	2200      	movs	r2, #0
 8024630:	602a      	str	r2, [r5, #0]
 8024632:	461a      	mov	r2, r3
 8024634:	f7fc fa24 	bl	8020a80 <_lseek>
 8024638:	1c43      	adds	r3, r0, #1
 802463a:	d102      	bne.n	8024642 <_lseek_r+0x1e>
 802463c:	682b      	ldr	r3, [r5, #0]
 802463e:	b103      	cbz	r3, 8024642 <_lseek_r+0x1e>
 8024640:	6023      	str	r3, [r4, #0]
 8024642:	bd38      	pop	{r3, r4, r5, pc}
 8024644:	20000264 	.word	0x20000264

08024648 <_read_r>:
 8024648:	b538      	push	{r3, r4, r5, lr}
 802464a:	4d07      	ldr	r5, [pc, #28]	@ (8024668 <_read_r+0x20>)
 802464c:	4604      	mov	r4, r0
 802464e:	4608      	mov	r0, r1
 8024650:	4611      	mov	r1, r2
 8024652:	2200      	movs	r2, #0
 8024654:	602a      	str	r2, [r5, #0]
 8024656:	461a      	mov	r2, r3
 8024658:	f7fc f9b2 	bl	80209c0 <_read>
 802465c:	1c43      	adds	r3, r0, #1
 802465e:	d102      	bne.n	8024666 <_read_r+0x1e>
 8024660:	682b      	ldr	r3, [r5, #0]
 8024662:	b103      	cbz	r3, 8024666 <_read_r+0x1e>
 8024664:	6023      	str	r3, [r4, #0]
 8024666:	bd38      	pop	{r3, r4, r5, pc}
 8024668:	20000264 	.word	0x20000264

0802466c <_write_r>:
 802466c:	b538      	push	{r3, r4, r5, lr}
 802466e:	4d07      	ldr	r5, [pc, #28]	@ (802468c <_write_r+0x20>)
 8024670:	4604      	mov	r4, r0
 8024672:	4608      	mov	r0, r1
 8024674:	4611      	mov	r1, r2
 8024676:	2200      	movs	r2, #0
 8024678:	602a      	str	r2, [r5, #0]
 802467a:	461a      	mov	r2, r3
 802467c:	f7fc f9bd 	bl	80209fa <_write>
 8024680:	1c43      	adds	r3, r0, #1
 8024682:	d102      	bne.n	802468a <_write_r+0x1e>
 8024684:	682b      	ldr	r3, [r5, #0]
 8024686:	b103      	cbz	r3, 802468a <_write_r+0x1e>
 8024688:	6023      	str	r3, [r4, #0]
 802468a:	bd38      	pop	{r3, r4, r5, pc}
 802468c:	20000264 	.word	0x20000264

08024690 <__errno>:
 8024690:	4b01      	ldr	r3, [pc, #4]	@ (8024698 <__errno+0x8>)
 8024692:	6818      	ldr	r0, [r3, #0]
 8024694:	4770      	bx	lr
 8024696:	bf00      	nop
 8024698:	20000020 	.word	0x20000020

0802469c <__libc_init_array>:
 802469c:	b570      	push	{r4, r5, r6, lr}
 802469e:	4d0d      	ldr	r5, [pc, #52]	@ (80246d4 <__libc_init_array+0x38>)
 80246a0:	4c0d      	ldr	r4, [pc, #52]	@ (80246d8 <__libc_init_array+0x3c>)
 80246a2:	1b64      	subs	r4, r4, r5
 80246a4:	10a4      	asrs	r4, r4, #2
 80246a6:	2600      	movs	r6, #0
 80246a8:	42a6      	cmp	r6, r4
 80246aa:	d109      	bne.n	80246c0 <__libc_init_array+0x24>
 80246ac:	4d0b      	ldr	r5, [pc, #44]	@ (80246dc <__libc_init_array+0x40>)
 80246ae:	4c0c      	ldr	r4, [pc, #48]	@ (80246e0 <__libc_init_array+0x44>)
 80246b0:	f000 fdb6 	bl	8025220 <_init>
 80246b4:	1b64      	subs	r4, r4, r5
 80246b6:	10a4      	asrs	r4, r4, #2
 80246b8:	2600      	movs	r6, #0
 80246ba:	42a6      	cmp	r6, r4
 80246bc:	d105      	bne.n	80246ca <__libc_init_array+0x2e>
 80246be:	bd70      	pop	{r4, r5, r6, pc}
 80246c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80246c4:	4798      	blx	r3
 80246c6:	3601      	adds	r6, #1
 80246c8:	e7ee      	b.n	80246a8 <__libc_init_array+0xc>
 80246ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80246ce:	4798      	blx	r3
 80246d0:	3601      	adds	r6, #1
 80246d2:	e7f2      	b.n	80246ba <__libc_init_array+0x1e>
 80246d4:	080253a0 	.word	0x080253a0
 80246d8:	080253a0 	.word	0x080253a0
 80246dc:	080253a0 	.word	0x080253a0
 80246e0:	080253a4 	.word	0x080253a4

080246e4 <__retarget_lock_init_recursive>:
 80246e4:	4770      	bx	lr

080246e6 <__retarget_lock_acquire_recursive>:
 80246e6:	4770      	bx	lr

080246e8 <__retarget_lock_release_recursive>:
 80246e8:	4770      	bx	lr
	...

080246ec <_free_r>:
 80246ec:	b538      	push	{r3, r4, r5, lr}
 80246ee:	4605      	mov	r5, r0
 80246f0:	2900      	cmp	r1, #0
 80246f2:	d041      	beq.n	8024778 <_free_r+0x8c>
 80246f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80246f8:	1f0c      	subs	r4, r1, #4
 80246fa:	2b00      	cmp	r3, #0
 80246fc:	bfb8      	it	lt
 80246fe:	18e4      	addlt	r4, r4, r3
 8024700:	f000 f8e0 	bl	80248c4 <__malloc_lock>
 8024704:	4a1d      	ldr	r2, [pc, #116]	@ (802477c <_free_r+0x90>)
 8024706:	6813      	ldr	r3, [r2, #0]
 8024708:	b933      	cbnz	r3, 8024718 <_free_r+0x2c>
 802470a:	6063      	str	r3, [r4, #4]
 802470c:	6014      	str	r4, [r2, #0]
 802470e:	4628      	mov	r0, r5
 8024710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024714:	f000 b8dc 	b.w	80248d0 <__malloc_unlock>
 8024718:	42a3      	cmp	r3, r4
 802471a:	d908      	bls.n	802472e <_free_r+0x42>
 802471c:	6820      	ldr	r0, [r4, #0]
 802471e:	1821      	adds	r1, r4, r0
 8024720:	428b      	cmp	r3, r1
 8024722:	bf01      	itttt	eq
 8024724:	6819      	ldreq	r1, [r3, #0]
 8024726:	685b      	ldreq	r3, [r3, #4]
 8024728:	1809      	addeq	r1, r1, r0
 802472a:	6021      	streq	r1, [r4, #0]
 802472c:	e7ed      	b.n	802470a <_free_r+0x1e>
 802472e:	461a      	mov	r2, r3
 8024730:	685b      	ldr	r3, [r3, #4]
 8024732:	b10b      	cbz	r3, 8024738 <_free_r+0x4c>
 8024734:	42a3      	cmp	r3, r4
 8024736:	d9fa      	bls.n	802472e <_free_r+0x42>
 8024738:	6811      	ldr	r1, [r2, #0]
 802473a:	1850      	adds	r0, r2, r1
 802473c:	42a0      	cmp	r0, r4
 802473e:	d10b      	bne.n	8024758 <_free_r+0x6c>
 8024740:	6820      	ldr	r0, [r4, #0]
 8024742:	4401      	add	r1, r0
 8024744:	1850      	adds	r0, r2, r1
 8024746:	4283      	cmp	r3, r0
 8024748:	6011      	str	r1, [r2, #0]
 802474a:	d1e0      	bne.n	802470e <_free_r+0x22>
 802474c:	6818      	ldr	r0, [r3, #0]
 802474e:	685b      	ldr	r3, [r3, #4]
 8024750:	6053      	str	r3, [r2, #4]
 8024752:	4408      	add	r0, r1
 8024754:	6010      	str	r0, [r2, #0]
 8024756:	e7da      	b.n	802470e <_free_r+0x22>
 8024758:	d902      	bls.n	8024760 <_free_r+0x74>
 802475a:	230c      	movs	r3, #12
 802475c:	602b      	str	r3, [r5, #0]
 802475e:	e7d6      	b.n	802470e <_free_r+0x22>
 8024760:	6820      	ldr	r0, [r4, #0]
 8024762:	1821      	adds	r1, r4, r0
 8024764:	428b      	cmp	r3, r1
 8024766:	bf04      	itt	eq
 8024768:	6819      	ldreq	r1, [r3, #0]
 802476a:	685b      	ldreq	r3, [r3, #4]
 802476c:	6063      	str	r3, [r4, #4]
 802476e:	bf04      	itt	eq
 8024770:	1809      	addeq	r1, r1, r0
 8024772:	6021      	streq	r1, [r4, #0]
 8024774:	6054      	str	r4, [r2, #4]
 8024776:	e7ca      	b.n	802470e <_free_r+0x22>
 8024778:	bd38      	pop	{r3, r4, r5, pc}
 802477a:	bf00      	nop
 802477c:	20000270 	.word	0x20000270

08024780 <sbrk_aligned>:
 8024780:	b570      	push	{r4, r5, r6, lr}
 8024782:	4e0f      	ldr	r6, [pc, #60]	@ (80247c0 <sbrk_aligned+0x40>)
 8024784:	460c      	mov	r4, r1
 8024786:	6831      	ldr	r1, [r6, #0]
 8024788:	4605      	mov	r5, r0
 802478a:	b911      	cbnz	r1, 8024792 <sbrk_aligned+0x12>
 802478c:	f000 fcb4 	bl	80250f8 <_sbrk_r>
 8024790:	6030      	str	r0, [r6, #0]
 8024792:	4621      	mov	r1, r4
 8024794:	4628      	mov	r0, r5
 8024796:	f000 fcaf 	bl	80250f8 <_sbrk_r>
 802479a:	1c43      	adds	r3, r0, #1
 802479c:	d103      	bne.n	80247a6 <sbrk_aligned+0x26>
 802479e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80247a2:	4620      	mov	r0, r4
 80247a4:	bd70      	pop	{r4, r5, r6, pc}
 80247a6:	1cc4      	adds	r4, r0, #3
 80247a8:	f024 0403 	bic.w	r4, r4, #3
 80247ac:	42a0      	cmp	r0, r4
 80247ae:	d0f8      	beq.n	80247a2 <sbrk_aligned+0x22>
 80247b0:	1a21      	subs	r1, r4, r0
 80247b2:	4628      	mov	r0, r5
 80247b4:	f000 fca0 	bl	80250f8 <_sbrk_r>
 80247b8:	3001      	adds	r0, #1
 80247ba:	d1f2      	bne.n	80247a2 <sbrk_aligned+0x22>
 80247bc:	e7ef      	b.n	802479e <sbrk_aligned+0x1e>
 80247be:	bf00      	nop
 80247c0:	2000026c 	.word	0x2000026c

080247c4 <_malloc_r>:
 80247c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80247c8:	1ccd      	adds	r5, r1, #3
 80247ca:	f025 0503 	bic.w	r5, r5, #3
 80247ce:	3508      	adds	r5, #8
 80247d0:	2d0c      	cmp	r5, #12
 80247d2:	bf38      	it	cc
 80247d4:	250c      	movcc	r5, #12
 80247d6:	2d00      	cmp	r5, #0
 80247d8:	4606      	mov	r6, r0
 80247da:	db01      	blt.n	80247e0 <_malloc_r+0x1c>
 80247dc:	42a9      	cmp	r1, r5
 80247de:	d904      	bls.n	80247ea <_malloc_r+0x26>
 80247e0:	230c      	movs	r3, #12
 80247e2:	6033      	str	r3, [r6, #0]
 80247e4:	2000      	movs	r0, #0
 80247e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80247ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80248c0 <_malloc_r+0xfc>
 80247ee:	f000 f869 	bl	80248c4 <__malloc_lock>
 80247f2:	f8d8 3000 	ldr.w	r3, [r8]
 80247f6:	461c      	mov	r4, r3
 80247f8:	bb44      	cbnz	r4, 802484c <_malloc_r+0x88>
 80247fa:	4629      	mov	r1, r5
 80247fc:	4630      	mov	r0, r6
 80247fe:	f7ff ffbf 	bl	8024780 <sbrk_aligned>
 8024802:	1c43      	adds	r3, r0, #1
 8024804:	4604      	mov	r4, r0
 8024806:	d158      	bne.n	80248ba <_malloc_r+0xf6>
 8024808:	f8d8 4000 	ldr.w	r4, [r8]
 802480c:	4627      	mov	r7, r4
 802480e:	2f00      	cmp	r7, #0
 8024810:	d143      	bne.n	802489a <_malloc_r+0xd6>
 8024812:	2c00      	cmp	r4, #0
 8024814:	d04b      	beq.n	80248ae <_malloc_r+0xea>
 8024816:	6823      	ldr	r3, [r4, #0]
 8024818:	4639      	mov	r1, r7
 802481a:	4630      	mov	r0, r6
 802481c:	eb04 0903 	add.w	r9, r4, r3
 8024820:	f000 fc6a 	bl	80250f8 <_sbrk_r>
 8024824:	4581      	cmp	r9, r0
 8024826:	d142      	bne.n	80248ae <_malloc_r+0xea>
 8024828:	6821      	ldr	r1, [r4, #0]
 802482a:	1a6d      	subs	r5, r5, r1
 802482c:	4629      	mov	r1, r5
 802482e:	4630      	mov	r0, r6
 8024830:	f7ff ffa6 	bl	8024780 <sbrk_aligned>
 8024834:	3001      	adds	r0, #1
 8024836:	d03a      	beq.n	80248ae <_malloc_r+0xea>
 8024838:	6823      	ldr	r3, [r4, #0]
 802483a:	442b      	add	r3, r5
 802483c:	6023      	str	r3, [r4, #0]
 802483e:	f8d8 3000 	ldr.w	r3, [r8]
 8024842:	685a      	ldr	r2, [r3, #4]
 8024844:	bb62      	cbnz	r2, 80248a0 <_malloc_r+0xdc>
 8024846:	f8c8 7000 	str.w	r7, [r8]
 802484a:	e00f      	b.n	802486c <_malloc_r+0xa8>
 802484c:	6822      	ldr	r2, [r4, #0]
 802484e:	1b52      	subs	r2, r2, r5
 8024850:	d420      	bmi.n	8024894 <_malloc_r+0xd0>
 8024852:	2a0b      	cmp	r2, #11
 8024854:	d917      	bls.n	8024886 <_malloc_r+0xc2>
 8024856:	1961      	adds	r1, r4, r5
 8024858:	42a3      	cmp	r3, r4
 802485a:	6025      	str	r5, [r4, #0]
 802485c:	bf18      	it	ne
 802485e:	6059      	strne	r1, [r3, #4]
 8024860:	6863      	ldr	r3, [r4, #4]
 8024862:	bf08      	it	eq
 8024864:	f8c8 1000 	streq.w	r1, [r8]
 8024868:	5162      	str	r2, [r4, r5]
 802486a:	604b      	str	r3, [r1, #4]
 802486c:	4630      	mov	r0, r6
 802486e:	f000 f82f 	bl	80248d0 <__malloc_unlock>
 8024872:	f104 000b 	add.w	r0, r4, #11
 8024876:	1d23      	adds	r3, r4, #4
 8024878:	f020 0007 	bic.w	r0, r0, #7
 802487c:	1ac2      	subs	r2, r0, r3
 802487e:	bf1c      	itt	ne
 8024880:	1a1b      	subne	r3, r3, r0
 8024882:	50a3      	strne	r3, [r4, r2]
 8024884:	e7af      	b.n	80247e6 <_malloc_r+0x22>
 8024886:	6862      	ldr	r2, [r4, #4]
 8024888:	42a3      	cmp	r3, r4
 802488a:	bf0c      	ite	eq
 802488c:	f8c8 2000 	streq.w	r2, [r8]
 8024890:	605a      	strne	r2, [r3, #4]
 8024892:	e7eb      	b.n	802486c <_malloc_r+0xa8>
 8024894:	4623      	mov	r3, r4
 8024896:	6864      	ldr	r4, [r4, #4]
 8024898:	e7ae      	b.n	80247f8 <_malloc_r+0x34>
 802489a:	463c      	mov	r4, r7
 802489c:	687f      	ldr	r7, [r7, #4]
 802489e:	e7b6      	b.n	802480e <_malloc_r+0x4a>
 80248a0:	461a      	mov	r2, r3
 80248a2:	685b      	ldr	r3, [r3, #4]
 80248a4:	42a3      	cmp	r3, r4
 80248a6:	d1fb      	bne.n	80248a0 <_malloc_r+0xdc>
 80248a8:	2300      	movs	r3, #0
 80248aa:	6053      	str	r3, [r2, #4]
 80248ac:	e7de      	b.n	802486c <_malloc_r+0xa8>
 80248ae:	230c      	movs	r3, #12
 80248b0:	6033      	str	r3, [r6, #0]
 80248b2:	4630      	mov	r0, r6
 80248b4:	f000 f80c 	bl	80248d0 <__malloc_unlock>
 80248b8:	e794      	b.n	80247e4 <_malloc_r+0x20>
 80248ba:	6005      	str	r5, [r0, #0]
 80248bc:	e7d6      	b.n	802486c <_malloc_r+0xa8>
 80248be:	bf00      	nop
 80248c0:	20000270 	.word	0x20000270

080248c4 <__malloc_lock>:
 80248c4:	4801      	ldr	r0, [pc, #4]	@ (80248cc <__malloc_lock+0x8>)
 80248c6:	f7ff bf0e 	b.w	80246e6 <__retarget_lock_acquire_recursive>
 80248ca:	bf00      	nop
 80248cc:	20000268 	.word	0x20000268

080248d0 <__malloc_unlock>:
 80248d0:	4801      	ldr	r0, [pc, #4]	@ (80248d8 <__malloc_unlock+0x8>)
 80248d2:	f7ff bf09 	b.w	80246e8 <__retarget_lock_release_recursive>
 80248d6:	bf00      	nop
 80248d8:	20000268 	.word	0x20000268

080248dc <__sfputc_r>:
 80248dc:	6893      	ldr	r3, [r2, #8]
 80248de:	3b01      	subs	r3, #1
 80248e0:	2b00      	cmp	r3, #0
 80248e2:	b410      	push	{r4}
 80248e4:	6093      	str	r3, [r2, #8]
 80248e6:	da08      	bge.n	80248fa <__sfputc_r+0x1e>
 80248e8:	6994      	ldr	r4, [r2, #24]
 80248ea:	42a3      	cmp	r3, r4
 80248ec:	db01      	blt.n	80248f2 <__sfputc_r+0x16>
 80248ee:	290a      	cmp	r1, #10
 80248f0:	d103      	bne.n	80248fa <__sfputc_r+0x1e>
 80248f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80248f6:	f000 bb6b 	b.w	8024fd0 <__swbuf_r>
 80248fa:	6813      	ldr	r3, [r2, #0]
 80248fc:	1c58      	adds	r0, r3, #1
 80248fe:	6010      	str	r0, [r2, #0]
 8024900:	7019      	strb	r1, [r3, #0]
 8024902:	4608      	mov	r0, r1
 8024904:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024908:	4770      	bx	lr

0802490a <__sfputs_r>:
 802490a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802490c:	4606      	mov	r6, r0
 802490e:	460f      	mov	r7, r1
 8024910:	4614      	mov	r4, r2
 8024912:	18d5      	adds	r5, r2, r3
 8024914:	42ac      	cmp	r4, r5
 8024916:	d101      	bne.n	802491c <__sfputs_r+0x12>
 8024918:	2000      	movs	r0, #0
 802491a:	e007      	b.n	802492c <__sfputs_r+0x22>
 802491c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024920:	463a      	mov	r2, r7
 8024922:	4630      	mov	r0, r6
 8024924:	f7ff ffda 	bl	80248dc <__sfputc_r>
 8024928:	1c43      	adds	r3, r0, #1
 802492a:	d1f3      	bne.n	8024914 <__sfputs_r+0xa>
 802492c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024930 <_vfiprintf_r>:
 8024930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024934:	460d      	mov	r5, r1
 8024936:	b09d      	sub	sp, #116	@ 0x74
 8024938:	4614      	mov	r4, r2
 802493a:	4698      	mov	r8, r3
 802493c:	4606      	mov	r6, r0
 802493e:	b118      	cbz	r0, 8024948 <_vfiprintf_r+0x18>
 8024940:	6a03      	ldr	r3, [r0, #32]
 8024942:	b90b      	cbnz	r3, 8024948 <_vfiprintf_r+0x18>
 8024944:	f7ff fdca 	bl	80244dc <__sinit>
 8024948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802494a:	07d9      	lsls	r1, r3, #31
 802494c:	d405      	bmi.n	802495a <_vfiprintf_r+0x2a>
 802494e:	89ab      	ldrh	r3, [r5, #12]
 8024950:	059a      	lsls	r2, r3, #22
 8024952:	d402      	bmi.n	802495a <_vfiprintf_r+0x2a>
 8024954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024956:	f7ff fec6 	bl	80246e6 <__retarget_lock_acquire_recursive>
 802495a:	89ab      	ldrh	r3, [r5, #12]
 802495c:	071b      	lsls	r3, r3, #28
 802495e:	d501      	bpl.n	8024964 <_vfiprintf_r+0x34>
 8024960:	692b      	ldr	r3, [r5, #16]
 8024962:	b99b      	cbnz	r3, 802498c <_vfiprintf_r+0x5c>
 8024964:	4629      	mov	r1, r5
 8024966:	4630      	mov	r0, r6
 8024968:	f000 fb70 	bl	802504c <__swsetup_r>
 802496c:	b170      	cbz	r0, 802498c <_vfiprintf_r+0x5c>
 802496e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024970:	07dc      	lsls	r4, r3, #31
 8024972:	d504      	bpl.n	802497e <_vfiprintf_r+0x4e>
 8024974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024978:	b01d      	add	sp, #116	@ 0x74
 802497a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802497e:	89ab      	ldrh	r3, [r5, #12]
 8024980:	0598      	lsls	r0, r3, #22
 8024982:	d4f7      	bmi.n	8024974 <_vfiprintf_r+0x44>
 8024984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024986:	f7ff feaf 	bl	80246e8 <__retarget_lock_release_recursive>
 802498a:	e7f3      	b.n	8024974 <_vfiprintf_r+0x44>
 802498c:	2300      	movs	r3, #0
 802498e:	9309      	str	r3, [sp, #36]	@ 0x24
 8024990:	2320      	movs	r3, #32
 8024992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024996:	f8cd 800c 	str.w	r8, [sp, #12]
 802499a:	2330      	movs	r3, #48	@ 0x30
 802499c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8024b4c <_vfiprintf_r+0x21c>
 80249a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80249a4:	f04f 0901 	mov.w	r9, #1
 80249a8:	4623      	mov	r3, r4
 80249aa:	469a      	mov	sl, r3
 80249ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80249b0:	b10a      	cbz	r2, 80249b6 <_vfiprintf_r+0x86>
 80249b2:	2a25      	cmp	r2, #37	@ 0x25
 80249b4:	d1f9      	bne.n	80249aa <_vfiprintf_r+0x7a>
 80249b6:	ebba 0b04 	subs.w	fp, sl, r4
 80249ba:	d00b      	beq.n	80249d4 <_vfiprintf_r+0xa4>
 80249bc:	465b      	mov	r3, fp
 80249be:	4622      	mov	r2, r4
 80249c0:	4629      	mov	r1, r5
 80249c2:	4630      	mov	r0, r6
 80249c4:	f7ff ffa1 	bl	802490a <__sfputs_r>
 80249c8:	3001      	adds	r0, #1
 80249ca:	f000 80a7 	beq.w	8024b1c <_vfiprintf_r+0x1ec>
 80249ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80249d0:	445a      	add	r2, fp
 80249d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80249d4:	f89a 3000 	ldrb.w	r3, [sl]
 80249d8:	2b00      	cmp	r3, #0
 80249da:	f000 809f 	beq.w	8024b1c <_vfiprintf_r+0x1ec>
 80249de:	2300      	movs	r3, #0
 80249e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80249e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80249e8:	f10a 0a01 	add.w	sl, sl, #1
 80249ec:	9304      	str	r3, [sp, #16]
 80249ee:	9307      	str	r3, [sp, #28]
 80249f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80249f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80249f6:	4654      	mov	r4, sl
 80249f8:	2205      	movs	r2, #5
 80249fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80249fe:	4853      	ldr	r0, [pc, #332]	@ (8024b4c <_vfiprintf_r+0x21c>)
 8024a00:	f7fb fbbe 	bl	8020180 <memchr>
 8024a04:	9a04      	ldr	r2, [sp, #16]
 8024a06:	b9d8      	cbnz	r0, 8024a40 <_vfiprintf_r+0x110>
 8024a08:	06d1      	lsls	r1, r2, #27
 8024a0a:	bf44      	itt	mi
 8024a0c:	2320      	movmi	r3, #32
 8024a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024a12:	0713      	lsls	r3, r2, #28
 8024a14:	bf44      	itt	mi
 8024a16:	232b      	movmi	r3, #43	@ 0x2b
 8024a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8024a20:	2b2a      	cmp	r3, #42	@ 0x2a
 8024a22:	d015      	beq.n	8024a50 <_vfiprintf_r+0x120>
 8024a24:	9a07      	ldr	r2, [sp, #28]
 8024a26:	4654      	mov	r4, sl
 8024a28:	2000      	movs	r0, #0
 8024a2a:	f04f 0c0a 	mov.w	ip, #10
 8024a2e:	4621      	mov	r1, r4
 8024a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024a34:	3b30      	subs	r3, #48	@ 0x30
 8024a36:	2b09      	cmp	r3, #9
 8024a38:	d94b      	bls.n	8024ad2 <_vfiprintf_r+0x1a2>
 8024a3a:	b1b0      	cbz	r0, 8024a6a <_vfiprintf_r+0x13a>
 8024a3c:	9207      	str	r2, [sp, #28]
 8024a3e:	e014      	b.n	8024a6a <_vfiprintf_r+0x13a>
 8024a40:	eba0 0308 	sub.w	r3, r0, r8
 8024a44:	fa09 f303 	lsl.w	r3, r9, r3
 8024a48:	4313      	orrs	r3, r2
 8024a4a:	9304      	str	r3, [sp, #16]
 8024a4c:	46a2      	mov	sl, r4
 8024a4e:	e7d2      	b.n	80249f6 <_vfiprintf_r+0xc6>
 8024a50:	9b03      	ldr	r3, [sp, #12]
 8024a52:	1d19      	adds	r1, r3, #4
 8024a54:	681b      	ldr	r3, [r3, #0]
 8024a56:	9103      	str	r1, [sp, #12]
 8024a58:	2b00      	cmp	r3, #0
 8024a5a:	bfbb      	ittet	lt
 8024a5c:	425b      	neglt	r3, r3
 8024a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8024a62:	9307      	strge	r3, [sp, #28]
 8024a64:	9307      	strlt	r3, [sp, #28]
 8024a66:	bfb8      	it	lt
 8024a68:	9204      	strlt	r2, [sp, #16]
 8024a6a:	7823      	ldrb	r3, [r4, #0]
 8024a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8024a6e:	d10a      	bne.n	8024a86 <_vfiprintf_r+0x156>
 8024a70:	7863      	ldrb	r3, [r4, #1]
 8024a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8024a74:	d132      	bne.n	8024adc <_vfiprintf_r+0x1ac>
 8024a76:	9b03      	ldr	r3, [sp, #12]
 8024a78:	1d1a      	adds	r2, r3, #4
 8024a7a:	681b      	ldr	r3, [r3, #0]
 8024a7c:	9203      	str	r2, [sp, #12]
 8024a7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8024a82:	3402      	adds	r4, #2
 8024a84:	9305      	str	r3, [sp, #20]
 8024a86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8024b5c <_vfiprintf_r+0x22c>
 8024a8a:	7821      	ldrb	r1, [r4, #0]
 8024a8c:	2203      	movs	r2, #3
 8024a8e:	4650      	mov	r0, sl
 8024a90:	f7fb fb76 	bl	8020180 <memchr>
 8024a94:	b138      	cbz	r0, 8024aa6 <_vfiprintf_r+0x176>
 8024a96:	9b04      	ldr	r3, [sp, #16]
 8024a98:	eba0 000a 	sub.w	r0, r0, sl
 8024a9c:	2240      	movs	r2, #64	@ 0x40
 8024a9e:	4082      	lsls	r2, r0
 8024aa0:	4313      	orrs	r3, r2
 8024aa2:	3401      	adds	r4, #1
 8024aa4:	9304      	str	r3, [sp, #16]
 8024aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024aaa:	4829      	ldr	r0, [pc, #164]	@ (8024b50 <_vfiprintf_r+0x220>)
 8024aac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8024ab0:	2206      	movs	r2, #6
 8024ab2:	f7fb fb65 	bl	8020180 <memchr>
 8024ab6:	2800      	cmp	r0, #0
 8024ab8:	d03f      	beq.n	8024b3a <_vfiprintf_r+0x20a>
 8024aba:	4b26      	ldr	r3, [pc, #152]	@ (8024b54 <_vfiprintf_r+0x224>)
 8024abc:	bb1b      	cbnz	r3, 8024b06 <_vfiprintf_r+0x1d6>
 8024abe:	9b03      	ldr	r3, [sp, #12]
 8024ac0:	3307      	adds	r3, #7
 8024ac2:	f023 0307 	bic.w	r3, r3, #7
 8024ac6:	3308      	adds	r3, #8
 8024ac8:	9303      	str	r3, [sp, #12]
 8024aca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024acc:	443b      	add	r3, r7
 8024ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8024ad0:	e76a      	b.n	80249a8 <_vfiprintf_r+0x78>
 8024ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8024ad6:	460c      	mov	r4, r1
 8024ad8:	2001      	movs	r0, #1
 8024ada:	e7a8      	b.n	8024a2e <_vfiprintf_r+0xfe>
 8024adc:	2300      	movs	r3, #0
 8024ade:	3401      	adds	r4, #1
 8024ae0:	9305      	str	r3, [sp, #20]
 8024ae2:	4619      	mov	r1, r3
 8024ae4:	f04f 0c0a 	mov.w	ip, #10
 8024ae8:	4620      	mov	r0, r4
 8024aea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024aee:	3a30      	subs	r2, #48	@ 0x30
 8024af0:	2a09      	cmp	r2, #9
 8024af2:	d903      	bls.n	8024afc <_vfiprintf_r+0x1cc>
 8024af4:	2b00      	cmp	r3, #0
 8024af6:	d0c6      	beq.n	8024a86 <_vfiprintf_r+0x156>
 8024af8:	9105      	str	r1, [sp, #20]
 8024afa:	e7c4      	b.n	8024a86 <_vfiprintf_r+0x156>
 8024afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8024b00:	4604      	mov	r4, r0
 8024b02:	2301      	movs	r3, #1
 8024b04:	e7f0      	b.n	8024ae8 <_vfiprintf_r+0x1b8>
 8024b06:	ab03      	add	r3, sp, #12
 8024b08:	9300      	str	r3, [sp, #0]
 8024b0a:	462a      	mov	r2, r5
 8024b0c:	4b12      	ldr	r3, [pc, #72]	@ (8024b58 <_vfiprintf_r+0x228>)
 8024b0e:	a904      	add	r1, sp, #16
 8024b10:	4630      	mov	r0, r6
 8024b12:	f3af 8000 	nop.w
 8024b16:	4607      	mov	r7, r0
 8024b18:	1c78      	adds	r0, r7, #1
 8024b1a:	d1d6      	bne.n	8024aca <_vfiprintf_r+0x19a>
 8024b1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8024b1e:	07d9      	lsls	r1, r3, #31
 8024b20:	d405      	bmi.n	8024b2e <_vfiprintf_r+0x1fe>
 8024b22:	89ab      	ldrh	r3, [r5, #12]
 8024b24:	059a      	lsls	r2, r3, #22
 8024b26:	d402      	bmi.n	8024b2e <_vfiprintf_r+0x1fe>
 8024b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024b2a:	f7ff fddd 	bl	80246e8 <__retarget_lock_release_recursive>
 8024b2e:	89ab      	ldrh	r3, [r5, #12]
 8024b30:	065b      	lsls	r3, r3, #25
 8024b32:	f53f af1f 	bmi.w	8024974 <_vfiprintf_r+0x44>
 8024b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8024b38:	e71e      	b.n	8024978 <_vfiprintf_r+0x48>
 8024b3a:	ab03      	add	r3, sp, #12
 8024b3c:	9300      	str	r3, [sp, #0]
 8024b3e:	462a      	mov	r2, r5
 8024b40:	4b05      	ldr	r3, [pc, #20]	@ (8024b58 <_vfiprintf_r+0x228>)
 8024b42:	a904      	add	r1, sp, #16
 8024b44:	4630      	mov	r0, r6
 8024b46:	f000 f879 	bl	8024c3c <_printf_i>
 8024b4a:	e7e4      	b.n	8024b16 <_vfiprintf_r+0x1e6>
 8024b4c:	08025364 	.word	0x08025364
 8024b50:	0802536e 	.word	0x0802536e
 8024b54:	00000000 	.word	0x00000000
 8024b58:	0802490b 	.word	0x0802490b
 8024b5c:	0802536a 	.word	0x0802536a

08024b60 <_printf_common>:
 8024b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024b64:	4616      	mov	r6, r2
 8024b66:	4698      	mov	r8, r3
 8024b68:	688a      	ldr	r2, [r1, #8]
 8024b6a:	690b      	ldr	r3, [r1, #16]
 8024b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024b70:	4293      	cmp	r3, r2
 8024b72:	bfb8      	it	lt
 8024b74:	4613      	movlt	r3, r2
 8024b76:	6033      	str	r3, [r6, #0]
 8024b78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024b7c:	4607      	mov	r7, r0
 8024b7e:	460c      	mov	r4, r1
 8024b80:	b10a      	cbz	r2, 8024b86 <_printf_common+0x26>
 8024b82:	3301      	adds	r3, #1
 8024b84:	6033      	str	r3, [r6, #0]
 8024b86:	6823      	ldr	r3, [r4, #0]
 8024b88:	0699      	lsls	r1, r3, #26
 8024b8a:	bf42      	ittt	mi
 8024b8c:	6833      	ldrmi	r3, [r6, #0]
 8024b8e:	3302      	addmi	r3, #2
 8024b90:	6033      	strmi	r3, [r6, #0]
 8024b92:	6825      	ldr	r5, [r4, #0]
 8024b94:	f015 0506 	ands.w	r5, r5, #6
 8024b98:	d106      	bne.n	8024ba8 <_printf_common+0x48>
 8024b9a:	f104 0a19 	add.w	sl, r4, #25
 8024b9e:	68e3      	ldr	r3, [r4, #12]
 8024ba0:	6832      	ldr	r2, [r6, #0]
 8024ba2:	1a9b      	subs	r3, r3, r2
 8024ba4:	42ab      	cmp	r3, r5
 8024ba6:	dc26      	bgt.n	8024bf6 <_printf_common+0x96>
 8024ba8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024bac:	6822      	ldr	r2, [r4, #0]
 8024bae:	3b00      	subs	r3, #0
 8024bb0:	bf18      	it	ne
 8024bb2:	2301      	movne	r3, #1
 8024bb4:	0692      	lsls	r2, r2, #26
 8024bb6:	d42b      	bmi.n	8024c10 <_printf_common+0xb0>
 8024bb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024bbc:	4641      	mov	r1, r8
 8024bbe:	4638      	mov	r0, r7
 8024bc0:	47c8      	blx	r9
 8024bc2:	3001      	adds	r0, #1
 8024bc4:	d01e      	beq.n	8024c04 <_printf_common+0xa4>
 8024bc6:	6823      	ldr	r3, [r4, #0]
 8024bc8:	6922      	ldr	r2, [r4, #16]
 8024bca:	f003 0306 	and.w	r3, r3, #6
 8024bce:	2b04      	cmp	r3, #4
 8024bd0:	bf02      	ittt	eq
 8024bd2:	68e5      	ldreq	r5, [r4, #12]
 8024bd4:	6833      	ldreq	r3, [r6, #0]
 8024bd6:	1aed      	subeq	r5, r5, r3
 8024bd8:	68a3      	ldr	r3, [r4, #8]
 8024bda:	bf0c      	ite	eq
 8024bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024be0:	2500      	movne	r5, #0
 8024be2:	4293      	cmp	r3, r2
 8024be4:	bfc4      	itt	gt
 8024be6:	1a9b      	subgt	r3, r3, r2
 8024be8:	18ed      	addgt	r5, r5, r3
 8024bea:	2600      	movs	r6, #0
 8024bec:	341a      	adds	r4, #26
 8024bee:	42b5      	cmp	r5, r6
 8024bf0:	d11a      	bne.n	8024c28 <_printf_common+0xc8>
 8024bf2:	2000      	movs	r0, #0
 8024bf4:	e008      	b.n	8024c08 <_printf_common+0xa8>
 8024bf6:	2301      	movs	r3, #1
 8024bf8:	4652      	mov	r2, sl
 8024bfa:	4641      	mov	r1, r8
 8024bfc:	4638      	mov	r0, r7
 8024bfe:	47c8      	blx	r9
 8024c00:	3001      	adds	r0, #1
 8024c02:	d103      	bne.n	8024c0c <_printf_common+0xac>
 8024c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c0c:	3501      	adds	r5, #1
 8024c0e:	e7c6      	b.n	8024b9e <_printf_common+0x3e>
 8024c10:	18e1      	adds	r1, r4, r3
 8024c12:	1c5a      	adds	r2, r3, #1
 8024c14:	2030      	movs	r0, #48	@ 0x30
 8024c16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024c1a:	4422      	add	r2, r4
 8024c1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8024c20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8024c24:	3302      	adds	r3, #2
 8024c26:	e7c7      	b.n	8024bb8 <_printf_common+0x58>
 8024c28:	2301      	movs	r3, #1
 8024c2a:	4622      	mov	r2, r4
 8024c2c:	4641      	mov	r1, r8
 8024c2e:	4638      	mov	r0, r7
 8024c30:	47c8      	blx	r9
 8024c32:	3001      	adds	r0, #1
 8024c34:	d0e6      	beq.n	8024c04 <_printf_common+0xa4>
 8024c36:	3601      	adds	r6, #1
 8024c38:	e7d9      	b.n	8024bee <_printf_common+0x8e>
	...

08024c3c <_printf_i>:
 8024c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024c40:	7e0f      	ldrb	r7, [r1, #24]
 8024c42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8024c44:	2f78      	cmp	r7, #120	@ 0x78
 8024c46:	4691      	mov	r9, r2
 8024c48:	4680      	mov	r8, r0
 8024c4a:	460c      	mov	r4, r1
 8024c4c:	469a      	mov	sl, r3
 8024c4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8024c52:	d807      	bhi.n	8024c64 <_printf_i+0x28>
 8024c54:	2f62      	cmp	r7, #98	@ 0x62
 8024c56:	d80a      	bhi.n	8024c6e <_printf_i+0x32>
 8024c58:	2f00      	cmp	r7, #0
 8024c5a:	f000 80d1 	beq.w	8024e00 <_printf_i+0x1c4>
 8024c5e:	2f58      	cmp	r7, #88	@ 0x58
 8024c60:	f000 80b8 	beq.w	8024dd4 <_printf_i+0x198>
 8024c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024c68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024c6c:	e03a      	b.n	8024ce4 <_printf_i+0xa8>
 8024c6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8024c72:	2b15      	cmp	r3, #21
 8024c74:	d8f6      	bhi.n	8024c64 <_printf_i+0x28>
 8024c76:	a101      	add	r1, pc, #4	@ (adr r1, 8024c7c <_printf_i+0x40>)
 8024c78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024c7c:	08024cd5 	.word	0x08024cd5
 8024c80:	08024ce9 	.word	0x08024ce9
 8024c84:	08024c65 	.word	0x08024c65
 8024c88:	08024c65 	.word	0x08024c65
 8024c8c:	08024c65 	.word	0x08024c65
 8024c90:	08024c65 	.word	0x08024c65
 8024c94:	08024ce9 	.word	0x08024ce9
 8024c98:	08024c65 	.word	0x08024c65
 8024c9c:	08024c65 	.word	0x08024c65
 8024ca0:	08024c65 	.word	0x08024c65
 8024ca4:	08024c65 	.word	0x08024c65
 8024ca8:	08024de7 	.word	0x08024de7
 8024cac:	08024d13 	.word	0x08024d13
 8024cb0:	08024da1 	.word	0x08024da1
 8024cb4:	08024c65 	.word	0x08024c65
 8024cb8:	08024c65 	.word	0x08024c65
 8024cbc:	08024e09 	.word	0x08024e09
 8024cc0:	08024c65 	.word	0x08024c65
 8024cc4:	08024d13 	.word	0x08024d13
 8024cc8:	08024c65 	.word	0x08024c65
 8024ccc:	08024c65 	.word	0x08024c65
 8024cd0:	08024da9 	.word	0x08024da9
 8024cd4:	6833      	ldr	r3, [r6, #0]
 8024cd6:	1d1a      	adds	r2, r3, #4
 8024cd8:	681b      	ldr	r3, [r3, #0]
 8024cda:	6032      	str	r2, [r6, #0]
 8024cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024ce0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024ce4:	2301      	movs	r3, #1
 8024ce6:	e09c      	b.n	8024e22 <_printf_i+0x1e6>
 8024ce8:	6833      	ldr	r3, [r6, #0]
 8024cea:	6820      	ldr	r0, [r4, #0]
 8024cec:	1d19      	adds	r1, r3, #4
 8024cee:	6031      	str	r1, [r6, #0]
 8024cf0:	0606      	lsls	r6, r0, #24
 8024cf2:	d501      	bpl.n	8024cf8 <_printf_i+0xbc>
 8024cf4:	681d      	ldr	r5, [r3, #0]
 8024cf6:	e003      	b.n	8024d00 <_printf_i+0xc4>
 8024cf8:	0645      	lsls	r5, r0, #25
 8024cfa:	d5fb      	bpl.n	8024cf4 <_printf_i+0xb8>
 8024cfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8024d00:	2d00      	cmp	r5, #0
 8024d02:	da03      	bge.n	8024d0c <_printf_i+0xd0>
 8024d04:	232d      	movs	r3, #45	@ 0x2d
 8024d06:	426d      	negs	r5, r5
 8024d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024d0c:	4858      	ldr	r0, [pc, #352]	@ (8024e70 <_printf_i+0x234>)
 8024d0e:	230a      	movs	r3, #10
 8024d10:	e011      	b.n	8024d36 <_printf_i+0xfa>
 8024d12:	6821      	ldr	r1, [r4, #0]
 8024d14:	6833      	ldr	r3, [r6, #0]
 8024d16:	0608      	lsls	r0, r1, #24
 8024d18:	f853 5b04 	ldr.w	r5, [r3], #4
 8024d1c:	d402      	bmi.n	8024d24 <_printf_i+0xe8>
 8024d1e:	0649      	lsls	r1, r1, #25
 8024d20:	bf48      	it	mi
 8024d22:	b2ad      	uxthmi	r5, r5
 8024d24:	2f6f      	cmp	r7, #111	@ 0x6f
 8024d26:	4852      	ldr	r0, [pc, #328]	@ (8024e70 <_printf_i+0x234>)
 8024d28:	6033      	str	r3, [r6, #0]
 8024d2a:	bf14      	ite	ne
 8024d2c:	230a      	movne	r3, #10
 8024d2e:	2308      	moveq	r3, #8
 8024d30:	2100      	movs	r1, #0
 8024d32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8024d36:	6866      	ldr	r6, [r4, #4]
 8024d38:	60a6      	str	r6, [r4, #8]
 8024d3a:	2e00      	cmp	r6, #0
 8024d3c:	db05      	blt.n	8024d4a <_printf_i+0x10e>
 8024d3e:	6821      	ldr	r1, [r4, #0]
 8024d40:	432e      	orrs	r6, r5
 8024d42:	f021 0104 	bic.w	r1, r1, #4
 8024d46:	6021      	str	r1, [r4, #0]
 8024d48:	d04b      	beq.n	8024de2 <_printf_i+0x1a6>
 8024d4a:	4616      	mov	r6, r2
 8024d4c:	fbb5 f1f3 	udiv	r1, r5, r3
 8024d50:	fb03 5711 	mls	r7, r3, r1, r5
 8024d54:	5dc7      	ldrb	r7, [r0, r7]
 8024d56:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024d5a:	462f      	mov	r7, r5
 8024d5c:	42bb      	cmp	r3, r7
 8024d5e:	460d      	mov	r5, r1
 8024d60:	d9f4      	bls.n	8024d4c <_printf_i+0x110>
 8024d62:	2b08      	cmp	r3, #8
 8024d64:	d10b      	bne.n	8024d7e <_printf_i+0x142>
 8024d66:	6823      	ldr	r3, [r4, #0]
 8024d68:	07df      	lsls	r7, r3, #31
 8024d6a:	d508      	bpl.n	8024d7e <_printf_i+0x142>
 8024d6c:	6923      	ldr	r3, [r4, #16]
 8024d6e:	6861      	ldr	r1, [r4, #4]
 8024d70:	4299      	cmp	r1, r3
 8024d72:	bfde      	ittt	le
 8024d74:	2330      	movle	r3, #48	@ 0x30
 8024d76:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024d7a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8024d7e:	1b92      	subs	r2, r2, r6
 8024d80:	6122      	str	r2, [r4, #16]
 8024d82:	f8cd a000 	str.w	sl, [sp]
 8024d86:	464b      	mov	r3, r9
 8024d88:	aa03      	add	r2, sp, #12
 8024d8a:	4621      	mov	r1, r4
 8024d8c:	4640      	mov	r0, r8
 8024d8e:	f7ff fee7 	bl	8024b60 <_printf_common>
 8024d92:	3001      	adds	r0, #1
 8024d94:	d14a      	bne.n	8024e2c <_printf_i+0x1f0>
 8024d96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024d9a:	b004      	add	sp, #16
 8024d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024da0:	6823      	ldr	r3, [r4, #0]
 8024da2:	f043 0320 	orr.w	r3, r3, #32
 8024da6:	6023      	str	r3, [r4, #0]
 8024da8:	4832      	ldr	r0, [pc, #200]	@ (8024e74 <_printf_i+0x238>)
 8024daa:	2778      	movs	r7, #120	@ 0x78
 8024dac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024db0:	6823      	ldr	r3, [r4, #0]
 8024db2:	6831      	ldr	r1, [r6, #0]
 8024db4:	061f      	lsls	r7, r3, #24
 8024db6:	f851 5b04 	ldr.w	r5, [r1], #4
 8024dba:	d402      	bmi.n	8024dc2 <_printf_i+0x186>
 8024dbc:	065f      	lsls	r7, r3, #25
 8024dbe:	bf48      	it	mi
 8024dc0:	b2ad      	uxthmi	r5, r5
 8024dc2:	6031      	str	r1, [r6, #0]
 8024dc4:	07d9      	lsls	r1, r3, #31
 8024dc6:	bf44      	itt	mi
 8024dc8:	f043 0320 	orrmi.w	r3, r3, #32
 8024dcc:	6023      	strmi	r3, [r4, #0]
 8024dce:	b11d      	cbz	r5, 8024dd8 <_printf_i+0x19c>
 8024dd0:	2310      	movs	r3, #16
 8024dd2:	e7ad      	b.n	8024d30 <_printf_i+0xf4>
 8024dd4:	4826      	ldr	r0, [pc, #152]	@ (8024e70 <_printf_i+0x234>)
 8024dd6:	e7e9      	b.n	8024dac <_printf_i+0x170>
 8024dd8:	6823      	ldr	r3, [r4, #0]
 8024dda:	f023 0320 	bic.w	r3, r3, #32
 8024dde:	6023      	str	r3, [r4, #0]
 8024de0:	e7f6      	b.n	8024dd0 <_printf_i+0x194>
 8024de2:	4616      	mov	r6, r2
 8024de4:	e7bd      	b.n	8024d62 <_printf_i+0x126>
 8024de6:	6833      	ldr	r3, [r6, #0]
 8024de8:	6825      	ldr	r5, [r4, #0]
 8024dea:	6961      	ldr	r1, [r4, #20]
 8024dec:	1d18      	adds	r0, r3, #4
 8024dee:	6030      	str	r0, [r6, #0]
 8024df0:	062e      	lsls	r6, r5, #24
 8024df2:	681b      	ldr	r3, [r3, #0]
 8024df4:	d501      	bpl.n	8024dfa <_printf_i+0x1be>
 8024df6:	6019      	str	r1, [r3, #0]
 8024df8:	e002      	b.n	8024e00 <_printf_i+0x1c4>
 8024dfa:	0668      	lsls	r0, r5, #25
 8024dfc:	d5fb      	bpl.n	8024df6 <_printf_i+0x1ba>
 8024dfe:	8019      	strh	r1, [r3, #0]
 8024e00:	2300      	movs	r3, #0
 8024e02:	6123      	str	r3, [r4, #16]
 8024e04:	4616      	mov	r6, r2
 8024e06:	e7bc      	b.n	8024d82 <_printf_i+0x146>
 8024e08:	6833      	ldr	r3, [r6, #0]
 8024e0a:	1d1a      	adds	r2, r3, #4
 8024e0c:	6032      	str	r2, [r6, #0]
 8024e0e:	681e      	ldr	r6, [r3, #0]
 8024e10:	6862      	ldr	r2, [r4, #4]
 8024e12:	2100      	movs	r1, #0
 8024e14:	4630      	mov	r0, r6
 8024e16:	f7fb f9b3 	bl	8020180 <memchr>
 8024e1a:	b108      	cbz	r0, 8024e20 <_printf_i+0x1e4>
 8024e1c:	1b80      	subs	r0, r0, r6
 8024e1e:	6060      	str	r0, [r4, #4]
 8024e20:	6863      	ldr	r3, [r4, #4]
 8024e22:	6123      	str	r3, [r4, #16]
 8024e24:	2300      	movs	r3, #0
 8024e26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024e2a:	e7aa      	b.n	8024d82 <_printf_i+0x146>
 8024e2c:	6923      	ldr	r3, [r4, #16]
 8024e2e:	4632      	mov	r2, r6
 8024e30:	4649      	mov	r1, r9
 8024e32:	4640      	mov	r0, r8
 8024e34:	47d0      	blx	sl
 8024e36:	3001      	adds	r0, #1
 8024e38:	d0ad      	beq.n	8024d96 <_printf_i+0x15a>
 8024e3a:	6823      	ldr	r3, [r4, #0]
 8024e3c:	079b      	lsls	r3, r3, #30
 8024e3e:	d413      	bmi.n	8024e68 <_printf_i+0x22c>
 8024e40:	68e0      	ldr	r0, [r4, #12]
 8024e42:	9b03      	ldr	r3, [sp, #12]
 8024e44:	4298      	cmp	r0, r3
 8024e46:	bfb8      	it	lt
 8024e48:	4618      	movlt	r0, r3
 8024e4a:	e7a6      	b.n	8024d9a <_printf_i+0x15e>
 8024e4c:	2301      	movs	r3, #1
 8024e4e:	4632      	mov	r2, r6
 8024e50:	4649      	mov	r1, r9
 8024e52:	4640      	mov	r0, r8
 8024e54:	47d0      	blx	sl
 8024e56:	3001      	adds	r0, #1
 8024e58:	d09d      	beq.n	8024d96 <_printf_i+0x15a>
 8024e5a:	3501      	adds	r5, #1
 8024e5c:	68e3      	ldr	r3, [r4, #12]
 8024e5e:	9903      	ldr	r1, [sp, #12]
 8024e60:	1a5b      	subs	r3, r3, r1
 8024e62:	42ab      	cmp	r3, r5
 8024e64:	dcf2      	bgt.n	8024e4c <_printf_i+0x210>
 8024e66:	e7eb      	b.n	8024e40 <_printf_i+0x204>
 8024e68:	2500      	movs	r5, #0
 8024e6a:	f104 0619 	add.w	r6, r4, #25
 8024e6e:	e7f5      	b.n	8024e5c <_printf_i+0x220>
 8024e70:	08025375 	.word	0x08025375
 8024e74:	08025386 	.word	0x08025386

08024e78 <__sflush_r>:
 8024e78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8024e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024e80:	0716      	lsls	r6, r2, #28
 8024e82:	4605      	mov	r5, r0
 8024e84:	460c      	mov	r4, r1
 8024e86:	d454      	bmi.n	8024f32 <__sflush_r+0xba>
 8024e88:	684b      	ldr	r3, [r1, #4]
 8024e8a:	2b00      	cmp	r3, #0
 8024e8c:	dc02      	bgt.n	8024e94 <__sflush_r+0x1c>
 8024e8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8024e90:	2b00      	cmp	r3, #0
 8024e92:	dd48      	ble.n	8024f26 <__sflush_r+0xae>
 8024e94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024e96:	2e00      	cmp	r6, #0
 8024e98:	d045      	beq.n	8024f26 <__sflush_r+0xae>
 8024e9a:	2300      	movs	r3, #0
 8024e9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8024ea0:	682f      	ldr	r7, [r5, #0]
 8024ea2:	6a21      	ldr	r1, [r4, #32]
 8024ea4:	602b      	str	r3, [r5, #0]
 8024ea6:	d030      	beq.n	8024f0a <__sflush_r+0x92>
 8024ea8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8024eaa:	89a3      	ldrh	r3, [r4, #12]
 8024eac:	0759      	lsls	r1, r3, #29
 8024eae:	d505      	bpl.n	8024ebc <__sflush_r+0x44>
 8024eb0:	6863      	ldr	r3, [r4, #4]
 8024eb2:	1ad2      	subs	r2, r2, r3
 8024eb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024eb6:	b10b      	cbz	r3, 8024ebc <__sflush_r+0x44>
 8024eb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8024eba:	1ad2      	subs	r2, r2, r3
 8024ebc:	2300      	movs	r3, #0
 8024ebe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024ec0:	6a21      	ldr	r1, [r4, #32]
 8024ec2:	4628      	mov	r0, r5
 8024ec4:	47b0      	blx	r6
 8024ec6:	1c43      	adds	r3, r0, #1
 8024ec8:	89a3      	ldrh	r3, [r4, #12]
 8024eca:	d106      	bne.n	8024eda <__sflush_r+0x62>
 8024ecc:	6829      	ldr	r1, [r5, #0]
 8024ece:	291d      	cmp	r1, #29
 8024ed0:	d82b      	bhi.n	8024f2a <__sflush_r+0xb2>
 8024ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8024f7c <__sflush_r+0x104>)
 8024ed4:	40ca      	lsrs	r2, r1
 8024ed6:	07d6      	lsls	r6, r2, #31
 8024ed8:	d527      	bpl.n	8024f2a <__sflush_r+0xb2>
 8024eda:	2200      	movs	r2, #0
 8024edc:	6062      	str	r2, [r4, #4]
 8024ede:	04d9      	lsls	r1, r3, #19
 8024ee0:	6922      	ldr	r2, [r4, #16]
 8024ee2:	6022      	str	r2, [r4, #0]
 8024ee4:	d504      	bpl.n	8024ef0 <__sflush_r+0x78>
 8024ee6:	1c42      	adds	r2, r0, #1
 8024ee8:	d101      	bne.n	8024eee <__sflush_r+0x76>
 8024eea:	682b      	ldr	r3, [r5, #0]
 8024eec:	b903      	cbnz	r3, 8024ef0 <__sflush_r+0x78>
 8024eee:	6560      	str	r0, [r4, #84]	@ 0x54
 8024ef0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024ef2:	602f      	str	r7, [r5, #0]
 8024ef4:	b1b9      	cbz	r1, 8024f26 <__sflush_r+0xae>
 8024ef6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024efa:	4299      	cmp	r1, r3
 8024efc:	d002      	beq.n	8024f04 <__sflush_r+0x8c>
 8024efe:	4628      	mov	r0, r5
 8024f00:	f7ff fbf4 	bl	80246ec <_free_r>
 8024f04:	2300      	movs	r3, #0
 8024f06:	6363      	str	r3, [r4, #52]	@ 0x34
 8024f08:	e00d      	b.n	8024f26 <__sflush_r+0xae>
 8024f0a:	2301      	movs	r3, #1
 8024f0c:	4628      	mov	r0, r5
 8024f0e:	47b0      	blx	r6
 8024f10:	4602      	mov	r2, r0
 8024f12:	1c50      	adds	r0, r2, #1
 8024f14:	d1c9      	bne.n	8024eaa <__sflush_r+0x32>
 8024f16:	682b      	ldr	r3, [r5, #0]
 8024f18:	2b00      	cmp	r3, #0
 8024f1a:	d0c6      	beq.n	8024eaa <__sflush_r+0x32>
 8024f1c:	2b1d      	cmp	r3, #29
 8024f1e:	d001      	beq.n	8024f24 <__sflush_r+0xac>
 8024f20:	2b16      	cmp	r3, #22
 8024f22:	d11e      	bne.n	8024f62 <__sflush_r+0xea>
 8024f24:	602f      	str	r7, [r5, #0]
 8024f26:	2000      	movs	r0, #0
 8024f28:	e022      	b.n	8024f70 <__sflush_r+0xf8>
 8024f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024f2e:	b21b      	sxth	r3, r3
 8024f30:	e01b      	b.n	8024f6a <__sflush_r+0xf2>
 8024f32:	690f      	ldr	r7, [r1, #16]
 8024f34:	2f00      	cmp	r7, #0
 8024f36:	d0f6      	beq.n	8024f26 <__sflush_r+0xae>
 8024f38:	0793      	lsls	r3, r2, #30
 8024f3a:	680e      	ldr	r6, [r1, #0]
 8024f3c:	bf08      	it	eq
 8024f3e:	694b      	ldreq	r3, [r1, #20]
 8024f40:	600f      	str	r7, [r1, #0]
 8024f42:	bf18      	it	ne
 8024f44:	2300      	movne	r3, #0
 8024f46:	eba6 0807 	sub.w	r8, r6, r7
 8024f4a:	608b      	str	r3, [r1, #8]
 8024f4c:	f1b8 0f00 	cmp.w	r8, #0
 8024f50:	dde9      	ble.n	8024f26 <__sflush_r+0xae>
 8024f52:	6a21      	ldr	r1, [r4, #32]
 8024f54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8024f56:	4643      	mov	r3, r8
 8024f58:	463a      	mov	r2, r7
 8024f5a:	4628      	mov	r0, r5
 8024f5c:	47b0      	blx	r6
 8024f5e:	2800      	cmp	r0, #0
 8024f60:	dc08      	bgt.n	8024f74 <__sflush_r+0xfc>
 8024f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024f6a:	81a3      	strh	r3, [r4, #12]
 8024f6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024f74:	4407      	add	r7, r0
 8024f76:	eba8 0800 	sub.w	r8, r8, r0
 8024f7a:	e7e7      	b.n	8024f4c <__sflush_r+0xd4>
 8024f7c:	20400001 	.word	0x20400001

08024f80 <_fflush_r>:
 8024f80:	b538      	push	{r3, r4, r5, lr}
 8024f82:	690b      	ldr	r3, [r1, #16]
 8024f84:	4605      	mov	r5, r0
 8024f86:	460c      	mov	r4, r1
 8024f88:	b913      	cbnz	r3, 8024f90 <_fflush_r+0x10>
 8024f8a:	2500      	movs	r5, #0
 8024f8c:	4628      	mov	r0, r5
 8024f8e:	bd38      	pop	{r3, r4, r5, pc}
 8024f90:	b118      	cbz	r0, 8024f9a <_fflush_r+0x1a>
 8024f92:	6a03      	ldr	r3, [r0, #32]
 8024f94:	b90b      	cbnz	r3, 8024f9a <_fflush_r+0x1a>
 8024f96:	f7ff faa1 	bl	80244dc <__sinit>
 8024f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f9e:	2b00      	cmp	r3, #0
 8024fa0:	d0f3      	beq.n	8024f8a <_fflush_r+0xa>
 8024fa2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024fa4:	07d0      	lsls	r0, r2, #31
 8024fa6:	d404      	bmi.n	8024fb2 <_fflush_r+0x32>
 8024fa8:	0599      	lsls	r1, r3, #22
 8024faa:	d402      	bmi.n	8024fb2 <_fflush_r+0x32>
 8024fac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024fae:	f7ff fb9a 	bl	80246e6 <__retarget_lock_acquire_recursive>
 8024fb2:	4628      	mov	r0, r5
 8024fb4:	4621      	mov	r1, r4
 8024fb6:	f7ff ff5f 	bl	8024e78 <__sflush_r>
 8024fba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8024fbc:	07da      	lsls	r2, r3, #31
 8024fbe:	4605      	mov	r5, r0
 8024fc0:	d4e4      	bmi.n	8024f8c <_fflush_r+0xc>
 8024fc2:	89a3      	ldrh	r3, [r4, #12]
 8024fc4:	059b      	lsls	r3, r3, #22
 8024fc6:	d4e1      	bmi.n	8024f8c <_fflush_r+0xc>
 8024fc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024fca:	f7ff fb8d 	bl	80246e8 <__retarget_lock_release_recursive>
 8024fce:	e7dd      	b.n	8024f8c <_fflush_r+0xc>

08024fd0 <__swbuf_r>:
 8024fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024fd2:	460e      	mov	r6, r1
 8024fd4:	4614      	mov	r4, r2
 8024fd6:	4605      	mov	r5, r0
 8024fd8:	b118      	cbz	r0, 8024fe2 <__swbuf_r+0x12>
 8024fda:	6a03      	ldr	r3, [r0, #32]
 8024fdc:	b90b      	cbnz	r3, 8024fe2 <__swbuf_r+0x12>
 8024fde:	f7ff fa7d 	bl	80244dc <__sinit>
 8024fe2:	69a3      	ldr	r3, [r4, #24]
 8024fe4:	60a3      	str	r3, [r4, #8]
 8024fe6:	89a3      	ldrh	r3, [r4, #12]
 8024fe8:	071a      	lsls	r2, r3, #28
 8024fea:	d501      	bpl.n	8024ff0 <__swbuf_r+0x20>
 8024fec:	6923      	ldr	r3, [r4, #16]
 8024fee:	b943      	cbnz	r3, 8025002 <__swbuf_r+0x32>
 8024ff0:	4621      	mov	r1, r4
 8024ff2:	4628      	mov	r0, r5
 8024ff4:	f000 f82a 	bl	802504c <__swsetup_r>
 8024ff8:	b118      	cbz	r0, 8025002 <__swbuf_r+0x32>
 8024ffa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8024ffe:	4638      	mov	r0, r7
 8025000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025002:	6823      	ldr	r3, [r4, #0]
 8025004:	6922      	ldr	r2, [r4, #16]
 8025006:	1a98      	subs	r0, r3, r2
 8025008:	6963      	ldr	r3, [r4, #20]
 802500a:	b2f6      	uxtb	r6, r6
 802500c:	4283      	cmp	r3, r0
 802500e:	4637      	mov	r7, r6
 8025010:	dc05      	bgt.n	802501e <__swbuf_r+0x4e>
 8025012:	4621      	mov	r1, r4
 8025014:	4628      	mov	r0, r5
 8025016:	f7ff ffb3 	bl	8024f80 <_fflush_r>
 802501a:	2800      	cmp	r0, #0
 802501c:	d1ed      	bne.n	8024ffa <__swbuf_r+0x2a>
 802501e:	68a3      	ldr	r3, [r4, #8]
 8025020:	3b01      	subs	r3, #1
 8025022:	60a3      	str	r3, [r4, #8]
 8025024:	6823      	ldr	r3, [r4, #0]
 8025026:	1c5a      	adds	r2, r3, #1
 8025028:	6022      	str	r2, [r4, #0]
 802502a:	701e      	strb	r6, [r3, #0]
 802502c:	6962      	ldr	r2, [r4, #20]
 802502e:	1c43      	adds	r3, r0, #1
 8025030:	429a      	cmp	r2, r3
 8025032:	d004      	beq.n	802503e <__swbuf_r+0x6e>
 8025034:	89a3      	ldrh	r3, [r4, #12]
 8025036:	07db      	lsls	r3, r3, #31
 8025038:	d5e1      	bpl.n	8024ffe <__swbuf_r+0x2e>
 802503a:	2e0a      	cmp	r6, #10
 802503c:	d1df      	bne.n	8024ffe <__swbuf_r+0x2e>
 802503e:	4621      	mov	r1, r4
 8025040:	4628      	mov	r0, r5
 8025042:	f7ff ff9d 	bl	8024f80 <_fflush_r>
 8025046:	2800      	cmp	r0, #0
 8025048:	d0d9      	beq.n	8024ffe <__swbuf_r+0x2e>
 802504a:	e7d6      	b.n	8024ffa <__swbuf_r+0x2a>

0802504c <__swsetup_r>:
 802504c:	b538      	push	{r3, r4, r5, lr}
 802504e:	4b29      	ldr	r3, [pc, #164]	@ (80250f4 <__swsetup_r+0xa8>)
 8025050:	4605      	mov	r5, r0
 8025052:	6818      	ldr	r0, [r3, #0]
 8025054:	460c      	mov	r4, r1
 8025056:	b118      	cbz	r0, 8025060 <__swsetup_r+0x14>
 8025058:	6a03      	ldr	r3, [r0, #32]
 802505a:	b90b      	cbnz	r3, 8025060 <__swsetup_r+0x14>
 802505c:	f7ff fa3e 	bl	80244dc <__sinit>
 8025060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025064:	0719      	lsls	r1, r3, #28
 8025066:	d422      	bmi.n	80250ae <__swsetup_r+0x62>
 8025068:	06da      	lsls	r2, r3, #27
 802506a:	d407      	bmi.n	802507c <__swsetup_r+0x30>
 802506c:	2209      	movs	r2, #9
 802506e:	602a      	str	r2, [r5, #0]
 8025070:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025074:	81a3      	strh	r3, [r4, #12]
 8025076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802507a:	e033      	b.n	80250e4 <__swsetup_r+0x98>
 802507c:	0758      	lsls	r0, r3, #29
 802507e:	d512      	bpl.n	80250a6 <__swsetup_r+0x5a>
 8025080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8025082:	b141      	cbz	r1, 8025096 <__swsetup_r+0x4a>
 8025084:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8025088:	4299      	cmp	r1, r3
 802508a:	d002      	beq.n	8025092 <__swsetup_r+0x46>
 802508c:	4628      	mov	r0, r5
 802508e:	f7ff fb2d 	bl	80246ec <_free_r>
 8025092:	2300      	movs	r3, #0
 8025094:	6363      	str	r3, [r4, #52]	@ 0x34
 8025096:	89a3      	ldrh	r3, [r4, #12]
 8025098:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802509c:	81a3      	strh	r3, [r4, #12]
 802509e:	2300      	movs	r3, #0
 80250a0:	6063      	str	r3, [r4, #4]
 80250a2:	6923      	ldr	r3, [r4, #16]
 80250a4:	6023      	str	r3, [r4, #0]
 80250a6:	89a3      	ldrh	r3, [r4, #12]
 80250a8:	f043 0308 	orr.w	r3, r3, #8
 80250ac:	81a3      	strh	r3, [r4, #12]
 80250ae:	6923      	ldr	r3, [r4, #16]
 80250b0:	b94b      	cbnz	r3, 80250c6 <__swsetup_r+0x7a>
 80250b2:	89a3      	ldrh	r3, [r4, #12]
 80250b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80250b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80250bc:	d003      	beq.n	80250c6 <__swsetup_r+0x7a>
 80250be:	4621      	mov	r1, r4
 80250c0:	4628      	mov	r0, r5
 80250c2:	f000 f84f 	bl	8025164 <__smakebuf_r>
 80250c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80250ca:	f013 0201 	ands.w	r2, r3, #1
 80250ce:	d00a      	beq.n	80250e6 <__swsetup_r+0x9a>
 80250d0:	2200      	movs	r2, #0
 80250d2:	60a2      	str	r2, [r4, #8]
 80250d4:	6962      	ldr	r2, [r4, #20]
 80250d6:	4252      	negs	r2, r2
 80250d8:	61a2      	str	r2, [r4, #24]
 80250da:	6922      	ldr	r2, [r4, #16]
 80250dc:	b942      	cbnz	r2, 80250f0 <__swsetup_r+0xa4>
 80250de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80250e2:	d1c5      	bne.n	8025070 <__swsetup_r+0x24>
 80250e4:	bd38      	pop	{r3, r4, r5, pc}
 80250e6:	0799      	lsls	r1, r3, #30
 80250e8:	bf58      	it	pl
 80250ea:	6962      	ldrpl	r2, [r4, #20]
 80250ec:	60a2      	str	r2, [r4, #8]
 80250ee:	e7f4      	b.n	80250da <__swsetup_r+0x8e>
 80250f0:	2000      	movs	r0, #0
 80250f2:	e7f7      	b.n	80250e4 <__swsetup_r+0x98>
 80250f4:	20000020 	.word	0x20000020

080250f8 <_sbrk_r>:
 80250f8:	b538      	push	{r3, r4, r5, lr}
 80250fa:	4d06      	ldr	r5, [pc, #24]	@ (8025114 <_sbrk_r+0x1c>)
 80250fc:	2300      	movs	r3, #0
 80250fe:	4604      	mov	r4, r0
 8025100:	4608      	mov	r0, r1
 8025102:	602b      	str	r3, [r5, #0]
 8025104:	f7fb fcca 	bl	8020a9c <_sbrk>
 8025108:	1c43      	adds	r3, r0, #1
 802510a:	d102      	bne.n	8025112 <_sbrk_r+0x1a>
 802510c:	682b      	ldr	r3, [r5, #0]
 802510e:	b103      	cbz	r3, 8025112 <_sbrk_r+0x1a>
 8025110:	6023      	str	r3, [r4, #0]
 8025112:	bd38      	pop	{r3, r4, r5, pc}
 8025114:	20000264 	.word	0x20000264

08025118 <__swhatbuf_r>:
 8025118:	b570      	push	{r4, r5, r6, lr}
 802511a:	460c      	mov	r4, r1
 802511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025120:	2900      	cmp	r1, #0
 8025122:	b096      	sub	sp, #88	@ 0x58
 8025124:	4615      	mov	r5, r2
 8025126:	461e      	mov	r6, r3
 8025128:	da0d      	bge.n	8025146 <__swhatbuf_r+0x2e>
 802512a:	89a3      	ldrh	r3, [r4, #12]
 802512c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8025130:	f04f 0100 	mov.w	r1, #0
 8025134:	bf14      	ite	ne
 8025136:	2340      	movne	r3, #64	@ 0x40
 8025138:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802513c:	2000      	movs	r0, #0
 802513e:	6031      	str	r1, [r6, #0]
 8025140:	602b      	str	r3, [r5, #0]
 8025142:	b016      	add	sp, #88	@ 0x58
 8025144:	bd70      	pop	{r4, r5, r6, pc}
 8025146:	466a      	mov	r2, sp
 8025148:	f000 f848 	bl	80251dc <_fstat_r>
 802514c:	2800      	cmp	r0, #0
 802514e:	dbec      	blt.n	802512a <__swhatbuf_r+0x12>
 8025150:	9901      	ldr	r1, [sp, #4]
 8025152:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8025156:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802515a:	4259      	negs	r1, r3
 802515c:	4159      	adcs	r1, r3
 802515e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8025162:	e7eb      	b.n	802513c <__swhatbuf_r+0x24>

08025164 <__smakebuf_r>:
 8025164:	898b      	ldrh	r3, [r1, #12]
 8025166:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8025168:	079d      	lsls	r5, r3, #30
 802516a:	4606      	mov	r6, r0
 802516c:	460c      	mov	r4, r1
 802516e:	d507      	bpl.n	8025180 <__smakebuf_r+0x1c>
 8025170:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8025174:	6023      	str	r3, [r4, #0]
 8025176:	6123      	str	r3, [r4, #16]
 8025178:	2301      	movs	r3, #1
 802517a:	6163      	str	r3, [r4, #20]
 802517c:	b003      	add	sp, #12
 802517e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025180:	ab01      	add	r3, sp, #4
 8025182:	466a      	mov	r2, sp
 8025184:	f7ff ffc8 	bl	8025118 <__swhatbuf_r>
 8025188:	9f00      	ldr	r7, [sp, #0]
 802518a:	4605      	mov	r5, r0
 802518c:	4639      	mov	r1, r7
 802518e:	4630      	mov	r0, r6
 8025190:	f7ff fb18 	bl	80247c4 <_malloc_r>
 8025194:	b948      	cbnz	r0, 80251aa <__smakebuf_r+0x46>
 8025196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802519a:	059a      	lsls	r2, r3, #22
 802519c:	d4ee      	bmi.n	802517c <__smakebuf_r+0x18>
 802519e:	f023 0303 	bic.w	r3, r3, #3
 80251a2:	f043 0302 	orr.w	r3, r3, #2
 80251a6:	81a3      	strh	r3, [r4, #12]
 80251a8:	e7e2      	b.n	8025170 <__smakebuf_r+0xc>
 80251aa:	89a3      	ldrh	r3, [r4, #12]
 80251ac:	6020      	str	r0, [r4, #0]
 80251ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80251b2:	81a3      	strh	r3, [r4, #12]
 80251b4:	9b01      	ldr	r3, [sp, #4]
 80251b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80251ba:	b15b      	cbz	r3, 80251d4 <__smakebuf_r+0x70>
 80251bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80251c0:	4630      	mov	r0, r6
 80251c2:	f000 f81d 	bl	8025200 <_isatty_r>
 80251c6:	b128      	cbz	r0, 80251d4 <__smakebuf_r+0x70>
 80251c8:	89a3      	ldrh	r3, [r4, #12]
 80251ca:	f023 0303 	bic.w	r3, r3, #3
 80251ce:	f043 0301 	orr.w	r3, r3, #1
 80251d2:	81a3      	strh	r3, [r4, #12]
 80251d4:	89a3      	ldrh	r3, [r4, #12]
 80251d6:	431d      	orrs	r5, r3
 80251d8:	81a5      	strh	r5, [r4, #12]
 80251da:	e7cf      	b.n	802517c <__smakebuf_r+0x18>

080251dc <_fstat_r>:
 80251dc:	b538      	push	{r3, r4, r5, lr}
 80251de:	4d07      	ldr	r5, [pc, #28]	@ (80251fc <_fstat_r+0x20>)
 80251e0:	2300      	movs	r3, #0
 80251e2:	4604      	mov	r4, r0
 80251e4:	4608      	mov	r0, r1
 80251e6:	4611      	mov	r1, r2
 80251e8:	602b      	str	r3, [r5, #0]
 80251ea:	f7fb fc2e 	bl	8020a4a <_fstat>
 80251ee:	1c43      	adds	r3, r0, #1
 80251f0:	d102      	bne.n	80251f8 <_fstat_r+0x1c>
 80251f2:	682b      	ldr	r3, [r5, #0]
 80251f4:	b103      	cbz	r3, 80251f8 <_fstat_r+0x1c>
 80251f6:	6023      	str	r3, [r4, #0]
 80251f8:	bd38      	pop	{r3, r4, r5, pc}
 80251fa:	bf00      	nop
 80251fc:	20000264 	.word	0x20000264

08025200 <_isatty_r>:
 8025200:	b538      	push	{r3, r4, r5, lr}
 8025202:	4d06      	ldr	r5, [pc, #24]	@ (802521c <_isatty_r+0x1c>)
 8025204:	2300      	movs	r3, #0
 8025206:	4604      	mov	r4, r0
 8025208:	4608      	mov	r0, r1
 802520a:	602b      	str	r3, [r5, #0]
 802520c:	f7fb fc2d 	bl	8020a6a <_isatty>
 8025210:	1c43      	adds	r3, r0, #1
 8025212:	d102      	bne.n	802521a <_isatty_r+0x1a>
 8025214:	682b      	ldr	r3, [r5, #0]
 8025216:	b103      	cbz	r3, 802521a <_isatty_r+0x1a>
 8025218:	6023      	str	r3, [r4, #0]
 802521a:	bd38      	pop	{r3, r4, r5, pc}
 802521c:	20000264 	.word	0x20000264

08025220 <_init>:
 8025220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025222:	bf00      	nop
 8025224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025226:	bc08      	pop	{r3}
 8025228:	469e      	mov	lr, r3
 802522a:	4770      	bx	lr

0802522c <_fini>:
 802522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802522e:	bf00      	nop
 8025230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025232:	bc08      	pop	{r3}
 8025234:	469e      	mov	lr, r3
 8025236:	4770      	bx	lr
